   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"modbus.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.rodata.crcHi,"a",%progbits
  25              		.align	2
  28              	crcHi:
  29 0000 00000000 		.word	0
  30 0004 C1000000 		.word	193
  31 0008 81000000 		.word	129
  32 000c 40000000 		.word	64
  33 0010 01000000 		.word	1
  34 0014 C0000000 		.word	192
  35 0018 80000000 		.word	128
  36 001c 41000000 		.word	65
  37 0020 01000000 		.word	1
  38 0024 C0000000 		.word	192
  39 0028 80000000 		.word	128
  40 002c 41000000 		.word	65
  41 0030 00000000 		.word	0
  42 0034 C1000000 		.word	193
  43 0038 81000000 		.word	129
  44 003c 40000000 		.word	64
  45 0040 01000000 		.word	1
  46 0044 C0000000 		.word	192
  47 0048 80000000 		.word	128
  48 004c 41000000 		.word	65
  49 0050 00000000 		.word	0
  50 0054 C1000000 		.word	193
  51 0058 81000000 		.word	129
  52 005c 40000000 		.word	64
  53 0060 00000000 		.word	0
  54 0064 C1000000 		.word	193
  55 0068 81000000 		.word	129
  56 006c 40000000 		.word	64
  57 0070 01000000 		.word	1
  58 0074 C0000000 		.word	192
  59 0078 80000000 		.word	128
  60 007c 41000000 		.word	65
  61 0080 01000000 		.word	1
  62 0084 C0000000 		.word	192
  63 0088 80000000 		.word	128
  64 008c 41000000 		.word	65
  65 0090 00000000 		.word	0
  66 0094 C1000000 		.word	193
  67 0098 81000000 		.word	129
  68 009c 40000000 		.word	64
  69 00a0 00000000 		.word	0
  70 00a4 C1000000 		.word	193
  71 00a8 81000000 		.word	129
  72 00ac 40000000 		.word	64
  73 00b0 01000000 		.word	1
  74 00b4 C0000000 		.word	192
  75 00b8 80000000 		.word	128
  76 00bc 41000000 		.word	65
  77 00c0 00000000 		.word	0
  78 00c4 C1000000 		.word	193
  79 00c8 81000000 		.word	129
  80 00cc 40000000 		.word	64
  81 00d0 01000000 		.word	1
  82 00d4 C0000000 		.word	192
  83 00d8 80000000 		.word	128
  84 00dc 41000000 		.word	65
  85 00e0 01000000 		.word	1
  86 00e4 C0000000 		.word	192
  87 00e8 80000000 		.word	128
  88 00ec 41000000 		.word	65
  89 00f0 00000000 		.word	0
  90 00f4 C1000000 		.word	193
  91 00f8 81000000 		.word	129
  92 00fc 40000000 		.word	64
  93 0100 01000000 		.word	1
  94 0104 C0000000 		.word	192
  95 0108 80000000 		.word	128
  96 010c 41000000 		.word	65
  97 0110 00000000 		.word	0
  98 0114 C1000000 		.word	193
  99 0118 81000000 		.word	129
 100 011c 40000000 		.word	64
 101 0120 00000000 		.word	0
 102 0124 C1000000 		.word	193
 103 0128 81000000 		.word	129
 104 012c 40000000 		.word	64
 105 0130 01000000 		.word	1
 106 0134 C0000000 		.word	192
 107 0138 80000000 		.word	128
 108 013c 41000000 		.word	65
 109 0140 00000000 		.word	0
 110 0144 C1000000 		.word	193
 111 0148 81000000 		.word	129
 112 014c 40000000 		.word	64
 113 0150 01000000 		.word	1
 114 0154 C0000000 		.word	192
 115 0158 80000000 		.word	128
 116 015c 41000000 		.word	65
 117 0160 01000000 		.word	1
 118 0164 C0000000 		.word	192
 119 0168 80000000 		.word	128
 120 016c 41000000 		.word	65
 121 0170 00000000 		.word	0
 122 0174 C1000000 		.word	193
 123 0178 81000000 		.word	129
 124 017c 40000000 		.word	64
 125 0180 00000000 		.word	0
 126 0184 C1000000 		.word	193
 127 0188 81000000 		.word	129
 128 018c 40000000 		.word	64
 129 0190 01000000 		.word	1
 130 0194 C0000000 		.word	192
 131 0198 80000000 		.word	128
 132 019c 41000000 		.word	65
 133 01a0 01000000 		.word	1
 134 01a4 C0000000 		.word	192
 135 01a8 80000000 		.word	128
 136 01ac 41000000 		.word	65
 137 01b0 00000000 		.word	0
 138 01b4 C1000000 		.word	193
 139 01b8 81000000 		.word	129
 140 01bc 40000000 		.word	64
 141 01c0 01000000 		.word	1
 142 01c4 C0000000 		.word	192
 143 01c8 80000000 		.word	128
 144 01cc 41000000 		.word	65
 145 01d0 00000000 		.word	0
 146 01d4 C1000000 		.word	193
 147 01d8 81000000 		.word	129
 148 01dc 40000000 		.word	64
 149 01e0 00000000 		.word	0
 150 01e4 C1000000 		.word	193
 151 01e8 81000000 		.word	129
 152 01ec 40000000 		.word	64
 153 01f0 01000000 		.word	1
 154 01f4 C0000000 		.word	192
 155 01f8 80000000 		.word	128
 156 01fc 41000000 		.word	65
 157 0200 01000000 		.word	1
 158 0204 C0000000 		.word	192
 159 0208 80000000 		.word	128
 160 020c 41000000 		.word	65
 161 0210 00000000 		.word	0
 162 0214 C1000000 		.word	193
 163 0218 81000000 		.word	129
 164 021c 40000000 		.word	64
 165 0220 00000000 		.word	0
 166 0224 C1000000 		.word	193
 167 0228 81000000 		.word	129
 168 022c 40000000 		.word	64
 169 0230 01000000 		.word	1
 170 0234 C0000000 		.word	192
 171 0238 80000000 		.word	128
 172 023c 41000000 		.word	65
 173 0240 00000000 		.word	0
 174 0244 C1000000 		.word	193
 175 0248 81000000 		.word	129
 176 024c 40000000 		.word	64
 177 0250 01000000 		.word	1
 178 0254 C0000000 		.word	192
 179 0258 80000000 		.word	128
 180 025c 41000000 		.word	65
 181 0260 01000000 		.word	1
 182 0264 C0000000 		.word	192
 183 0268 80000000 		.word	128
 184 026c 41000000 		.word	65
 185 0270 00000000 		.word	0
 186 0274 C1000000 		.word	193
 187 0278 81000000 		.word	129
 188 027c 40000000 		.word	64
 189 0280 00000000 		.word	0
 190 0284 C1000000 		.word	193
 191 0288 81000000 		.word	129
 192 028c 40000000 		.word	64
 193 0290 01000000 		.word	1
 194 0294 C0000000 		.word	192
 195 0298 80000000 		.word	128
 196 029c 41000000 		.word	65
 197 02a0 01000000 		.word	1
 198 02a4 C0000000 		.word	192
 199 02a8 80000000 		.word	128
 200 02ac 41000000 		.word	65
 201 02b0 00000000 		.word	0
 202 02b4 C1000000 		.word	193
 203 02b8 81000000 		.word	129
 204 02bc 40000000 		.word	64
 205 02c0 01000000 		.word	1
 206 02c4 C0000000 		.word	192
 207 02c8 80000000 		.word	128
 208 02cc 41000000 		.word	65
 209 02d0 00000000 		.word	0
 210 02d4 C1000000 		.word	193
 211 02d8 81000000 		.word	129
 212 02dc 40000000 		.word	64
 213 02e0 00000000 		.word	0
 214 02e4 C1000000 		.word	193
 215 02e8 81000000 		.word	129
 216 02ec 40000000 		.word	64
 217 02f0 01000000 		.word	1
 218 02f4 C0000000 		.word	192
 219 02f8 80000000 		.word	128
 220 02fc 41000000 		.word	65
 221 0300 00000000 		.word	0
 222 0304 C1000000 		.word	193
 223 0308 81000000 		.word	129
 224 030c 40000000 		.word	64
 225 0310 01000000 		.word	1
 226 0314 C0000000 		.word	192
 227 0318 80000000 		.word	128
 228 031c 41000000 		.word	65
 229 0320 01000000 		.word	1
 230 0324 C0000000 		.word	192
 231 0328 80000000 		.word	128
 232 032c 41000000 		.word	65
 233 0330 00000000 		.word	0
 234 0334 C1000000 		.word	193
 235 0338 81000000 		.word	129
 236 033c 40000000 		.word	64
 237 0340 01000000 		.word	1
 238 0344 C0000000 		.word	192
 239 0348 80000000 		.word	128
 240 034c 41000000 		.word	65
 241 0350 00000000 		.word	0
 242 0354 C1000000 		.word	193
 243 0358 81000000 		.word	129
 244 035c 40000000 		.word	64
 245 0360 00000000 		.word	0
 246 0364 C1000000 		.word	193
 247 0368 81000000 		.word	129
 248 036c 40000000 		.word	64
 249 0370 01000000 		.word	1
 250 0374 C0000000 		.word	192
 251 0378 80000000 		.word	128
 252 037c 41000000 		.word	65
 253 0380 01000000 		.word	1
 254 0384 C0000000 		.word	192
 255 0388 80000000 		.word	128
 256 038c 41000000 		.word	65
 257 0390 00000000 		.word	0
 258 0394 C1000000 		.word	193
 259 0398 81000000 		.word	129
 260 039c 40000000 		.word	64
 261 03a0 00000000 		.word	0
 262 03a4 C1000000 		.word	193
 263 03a8 81000000 		.word	129
 264 03ac 40000000 		.word	64
 265 03b0 01000000 		.word	1
 266 03b4 C0000000 		.word	192
 267 03b8 80000000 		.word	128
 268 03bc 41000000 		.word	65
 269 03c0 00000000 		.word	0
 270 03c4 C1000000 		.word	193
 271 03c8 81000000 		.word	129
 272 03cc 40000000 		.word	64
 273 03d0 01000000 		.word	1
 274 03d4 C0000000 		.word	192
 275 03d8 80000000 		.word	128
 276 03dc 41000000 		.word	65
 277 03e0 01000000 		.word	1
 278 03e4 C0000000 		.word	192
 279 03e8 80000000 		.word	128
 280 03ec 41000000 		.word	65
 281 03f0 00000000 		.word	0
 282 03f4 C1000000 		.word	193
 283 03f8 81000000 		.word	129
 284 03fc 40000000 		.word	64
 285              		.section	.rodata.crcLo,"a",%progbits
 286              		.align	2
 289              	crcLo:
 290 0000 00000000 		.word	0
 291 0004 C0000000 		.word	192
 292 0008 C1000000 		.word	193
 293 000c 01000000 		.word	1
 294 0010 C3000000 		.word	195
 295 0014 03000000 		.word	3
 296 0018 02000000 		.word	2
 297 001c C2000000 		.word	194
 298 0020 C6000000 		.word	198
 299 0024 06000000 		.word	6
 300 0028 07000000 		.word	7
 301 002c C7000000 		.word	199
 302 0030 05000000 		.word	5
 303 0034 C5000000 		.word	197
 304 0038 C4000000 		.word	196
 305 003c 04000000 		.word	4
 306 0040 CC000000 		.word	204
 307 0044 0C000000 		.word	12
 308 0048 0D000000 		.word	13
 309 004c CD000000 		.word	205
 310 0050 0F000000 		.word	15
 311 0054 CF000000 		.word	207
 312 0058 CE000000 		.word	206
 313 005c 0E000000 		.word	14
 314 0060 0A000000 		.word	10
 315 0064 CA000000 		.word	202
 316 0068 CB000000 		.word	203
 317 006c 0B000000 		.word	11
 318 0070 C9000000 		.word	201
 319 0074 09000000 		.word	9
 320 0078 08000000 		.word	8
 321 007c C8000000 		.word	200
 322 0080 D8000000 		.word	216
 323 0084 18000000 		.word	24
 324 0088 19000000 		.word	25
 325 008c D9000000 		.word	217
 326 0090 1B000000 		.word	27
 327 0094 DB000000 		.word	219
 328 0098 DA000000 		.word	218
 329 009c 1A000000 		.word	26
 330 00a0 1E000000 		.word	30
 331 00a4 DE000000 		.word	222
 332 00a8 DF000000 		.word	223
 333 00ac 1F000000 		.word	31
 334 00b0 DD000000 		.word	221
 335 00b4 1D000000 		.word	29
 336 00b8 1C000000 		.word	28
 337 00bc DC000000 		.word	220
 338 00c0 14000000 		.word	20
 339 00c4 D4000000 		.word	212
 340 00c8 D5000000 		.word	213
 341 00cc 15000000 		.word	21
 342 00d0 D7000000 		.word	215
 343 00d4 17000000 		.word	23
 344 00d8 16000000 		.word	22
 345 00dc D6000000 		.word	214
 346 00e0 D2000000 		.word	210
 347 00e4 12000000 		.word	18
 348 00e8 13000000 		.word	19
 349 00ec D3000000 		.word	211
 350 00f0 11000000 		.word	17
 351 00f4 D1000000 		.word	209
 352 00f8 D0000000 		.word	208
 353 00fc 10000000 		.word	16
 354 0100 F0000000 		.word	240
 355 0104 30000000 		.word	48
 356 0108 31000000 		.word	49
 357 010c F1000000 		.word	241
 358 0110 33000000 		.word	51
 359 0114 F3000000 		.word	243
 360 0118 F2000000 		.word	242
 361 011c 32000000 		.word	50
 362 0120 36000000 		.word	54
 363 0124 F6000000 		.word	246
 364 0128 F7000000 		.word	247
 365 012c 37000000 		.word	55
 366 0130 F5000000 		.word	245
 367 0134 35000000 		.word	53
 368 0138 34000000 		.word	52
 369 013c F4000000 		.word	244
 370 0140 3C000000 		.word	60
 371 0144 FC000000 		.word	252
 372 0148 FD000000 		.word	253
 373 014c 3D000000 		.word	61
 374 0150 FF000000 		.word	255
 375 0154 3F000000 		.word	63
 376 0158 3E000000 		.word	62
 377 015c FE000000 		.word	254
 378 0160 FA000000 		.word	250
 379 0164 3A000000 		.word	58
 380 0168 3B000000 		.word	59
 381 016c FB000000 		.word	251
 382 0170 39000000 		.word	57
 383 0174 F9000000 		.word	249
 384 0178 F8000000 		.word	248
 385 017c 38000000 		.word	56
 386 0180 28000000 		.word	40
 387 0184 E8000000 		.word	232
 388 0188 E9000000 		.word	233
 389 018c 29000000 		.word	41
 390 0190 EB000000 		.word	235
 391 0194 2B000000 		.word	43
 392 0198 2A000000 		.word	42
 393 019c EA000000 		.word	234
 394 01a0 EE000000 		.word	238
 395 01a4 2E000000 		.word	46
 396 01a8 2F000000 		.word	47
 397 01ac EF000000 		.word	239
 398 01b0 2D000000 		.word	45
 399 01b4 ED000000 		.word	237
 400 01b8 EC000000 		.word	236
 401 01bc 2C000000 		.word	44
 402 01c0 E4000000 		.word	228
 403 01c4 24000000 		.word	36
 404 01c8 25000000 		.word	37
 405 01cc E5000000 		.word	229
 406 01d0 27000000 		.word	39
 407 01d4 E7000000 		.word	231
 408 01d8 E6000000 		.word	230
 409 01dc 26000000 		.word	38
 410 01e0 22000000 		.word	34
 411 01e4 E2000000 		.word	226
 412 01e8 E3000000 		.word	227
 413 01ec 23000000 		.word	35
 414 01f0 E1000000 		.word	225
 415 01f4 21000000 		.word	33
 416 01f8 20000000 		.word	32
 417 01fc E0000000 		.word	224
 418 0200 A0000000 		.word	160
 419 0204 60000000 		.word	96
 420 0208 61000000 		.word	97
 421 020c A1000000 		.word	161
 422 0210 63000000 		.word	99
 423 0214 A3000000 		.word	163
 424 0218 A2000000 		.word	162
 425 021c 62000000 		.word	98
 426 0220 66000000 		.word	102
 427 0224 A6000000 		.word	166
 428 0228 A7000000 		.word	167
 429 022c 67000000 		.word	103
 430 0230 A5000000 		.word	165
 431 0234 65000000 		.word	101
 432 0238 64000000 		.word	100
 433 023c A4000000 		.word	164
 434 0240 6C000000 		.word	108
 435 0244 AC000000 		.word	172
 436 0248 AD000000 		.word	173
 437 024c 6D000000 		.word	109
 438 0250 AF000000 		.word	175
 439 0254 6F000000 		.word	111
 440 0258 6E000000 		.word	110
 441 025c AE000000 		.word	174
 442 0260 AA000000 		.word	170
 443 0264 6A000000 		.word	106
 444 0268 6B000000 		.word	107
 445 026c AB000000 		.word	171
 446 0270 69000000 		.word	105
 447 0274 A9000000 		.word	169
 448 0278 A8000000 		.word	168
 449 027c 68000000 		.word	104
 450 0280 78000000 		.word	120
 451 0284 B8000000 		.word	184
 452 0288 B9000000 		.word	185
 453 028c 79000000 		.word	121
 454 0290 BB000000 		.word	187
 455 0294 7B000000 		.word	123
 456 0298 7A000000 		.word	122
 457 029c BA000000 		.word	186
 458 02a0 BE000000 		.word	190
 459 02a4 7E000000 		.word	126
 460 02a8 7F000000 		.word	127
 461 02ac BF000000 		.word	191
 462 02b0 7D000000 		.word	125
 463 02b4 BD000000 		.word	189
 464 02b8 BC000000 		.word	188
 465 02bc 7C000000 		.word	124
 466 02c0 B4000000 		.word	180
 467 02c4 74000000 		.word	116
 468 02c8 75000000 		.word	117
 469 02cc B5000000 		.word	181
 470 02d0 77000000 		.word	119
 471 02d4 B7000000 		.word	183
 472 02d8 B6000000 		.word	182
 473 02dc 76000000 		.word	118
 474 02e0 72000000 		.word	114
 475 02e4 B2000000 		.word	178
 476 02e8 B3000000 		.word	179
 477 02ec 73000000 		.word	115
 478 02f0 B1000000 		.word	177
 479 02f4 71000000 		.word	113
 480 02f8 70000000 		.word	112
 481 02fc B0000000 		.word	176
 482 0300 50000000 		.word	80
 483 0304 90000000 		.word	144
 484 0308 91000000 		.word	145
 485 030c 51000000 		.word	81
 486 0310 93000000 		.word	147
 487 0314 53000000 		.word	83
 488 0318 52000000 		.word	82
 489 031c 92000000 		.word	146
 490 0320 96000000 		.word	150
 491 0324 56000000 		.word	86
 492 0328 57000000 		.word	87
 493 032c 97000000 		.word	151
 494 0330 55000000 		.word	85
 495 0334 95000000 		.word	149
 496 0338 94000000 		.word	148
 497 033c 54000000 		.word	84
 498 0340 9C000000 		.word	156
 499 0344 5C000000 		.word	92
 500 0348 5D000000 		.word	93
 501 034c 9D000000 		.word	157
 502 0350 5F000000 		.word	95
 503 0354 9F000000 		.word	159
 504 0358 9E000000 		.word	158
 505 035c 5E000000 		.word	94
 506 0360 5A000000 		.word	90
 507 0364 9A000000 		.word	154
 508 0368 9B000000 		.word	155
 509 036c 5B000000 		.word	91
 510 0370 99000000 		.word	153
 511 0374 59000000 		.word	89
 512 0378 58000000 		.word	88
 513 037c 98000000 		.word	152
 514 0380 88000000 		.word	136
 515 0384 48000000 		.word	72
 516 0388 49000000 		.word	73
 517 038c 89000000 		.word	137
 518 0390 4B000000 		.word	75
 519 0394 8B000000 		.word	139
 520 0398 8A000000 		.word	138
 521 039c 4A000000 		.word	74
 522 03a0 4E000000 		.word	78
 523 03a4 8E000000 		.word	142
 524 03a8 8F000000 		.word	143
 525 03ac 4F000000 		.word	79
 526 03b0 8D000000 		.word	141
 527 03b4 4D000000 		.word	77
 528 03b8 4C000000 		.word	76
 529 03bc 8C000000 		.word	140
 530 03c0 44000000 		.word	68
 531 03c4 84000000 		.word	132
 532 03c8 85000000 		.word	133
 533 03cc 45000000 		.word	69
 534 03d0 87000000 		.word	135
 535 03d4 47000000 		.word	71
 536 03d8 46000000 		.word	70
 537 03dc 86000000 		.word	134
 538 03e0 82000000 		.word	130
 539 03e4 42000000 		.word	66
 540 03e8 43000000 		.word	67
 541 03ec 83000000 		.word	131
 542 03f0 41000000 		.word	65
 543 03f4 81000000 		.word	129
 544 03f8 80000000 		.word	128
 545 03fc 40000000 		.word	64
 546              		.global	firstRequest
 547              		.section	.bss.firstRequest,"aw",%nobits
 548              		.align	2
 551              	firstRequest:
 552 0000 00000000 		.space	4
 553              		.global	totalRequest
 554              		.section	.bss.totalRequest,"aw",%nobits
 555              		.align	2
 558              	totalRequest:
 559 0000 00000000 		.space	4
 560              		.global	writeRequest
 561              		.section	.bss.writeRequest,"aw",%nobits
 562              		.align	2
 565              	writeRequest:
 566 0000 00000000 		.space	4
 567              		.global	arrayResponsePacket
 568              		.section	.bss.arrayResponsePacket,"aw",%nobits
 569              		.align	2
 572              	arrayResponsePacket:
 573 0000 00000000 		.space	200
 573      00000000 
 573      00000000 
 573      00000000 
 573      00000000 
 574              		.global	rPacket
 575              		.section	.data.rPacket,"aw",%progbits
 576              		.align	2
 579              	rPacket:
 580 0000 00000000 		.word	arrayResponsePacket
 581              		.global	users
 582              		.section	.bss.users,"aw",%nobits
 583              		.align	2
 586              	users:
 587 0000 00000000 		.space	4
 588              		.comm	s,4,4
 589              		.section	.text.addData,"ax",%progbits
 590              		.align	2
 591              		.global	addData
 592              		.thumb
 593              		.thumb_func
 595              	addData:
 596              	.LFB0:
 597              		.file 1 "src/modbus.c"
   1:src/modbus.c  **** /*
   2:src/modbus.c  ****  * modbus.h
   3:src/modbus.c  ****  *
   4:src/modbus.c  ****  *  Created on: 29-Nov-2012
   5:src/modbus.c  ****  *  Author: chetanpatil
   6:src/modbus.c  ****  */
   7:src/modbus.c  **** 
   8:src/modbus.c  **** #include "modbus.h"
   9:src/modbus.c  **** 
  10:src/modbus.c  **** uint32_t firstRequest = 0;
  11:src/modbus.c  **** uint32_t totalRequest = 0;
  12:src/modbus.c  **** uint32_t writeRequest = 0;
  13:src/modbus.c  **** 
  14:src/modbus.c  **** // Creating packet to send the data back to Master as requested
  15:src/modbus.c  **** uint32_t arrayResponsePacket[50] = { 0 };
  16:src/modbus.c  **** uint32_t *rPacket = arrayResponsePacket;
  17:src/modbus.c  **** 
  18:src/modbus.c  **** // HASHMAP : Using uthash.h
  19:src/modbus.c  **** struct heapStruct *users = NULL;
  20:src/modbus.c  **** struct heapStruct *s;
  21:src/modbus.c  **** 
  22:src/modbus.c  **** //Add the data in HASH MAP
  23:src/modbus.c  **** void addData(uint32_t keyID, uint32_t *keyValue) {
 598              		.loc 1 23 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 80
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 90B5     		push	{r4, r7, lr}
 603              	.LCFI0:
 604              		.cfi_def_cfa_offset 12
 605 0002 95B0     		sub	sp, sp, #84
 606              	.LCFI1:
 607              		.cfi_def_cfa_offset 96
 608 0004 00AF     		add	r7, sp, #0
 609              		.cfi_offset 14, -4
 610              		.cfi_offset 7, -8
 611              		.cfi_offset 4, -12
 612              	.LCFI2:
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
 615 0008 3960     		str	r1, [r7, #0]
 616              	.LBB2:
  24:src/modbus.c  **** 	struct heapStruct *s;
  25:src/modbus.c  **** 
  26:src/modbus.c  **** 	HASH_FIND_INT(users, &keyID, s);
 617              		.loc 1 26 0
 618 000a 4FF00003 		mov	r3, #0
 619 000e FB64     		str	r3, [r7, #76]
 620 0010 8D4B     		ldr	r3, .L56
 621 0012 1B68     		ldr	r3, [r3, #0]
 622 0014 002B     		cmp	r3, #0
 623 0016 00F05C82 		beq	.L2
 624              	.LBB3:
 625              		.loc 1 26 0 is_stmt 0 discriminator 1
 626 001a 07F10403 		add	r3, r7, #4
 627 001e BB63     		str	r3, [r7, #56]
 628 0020 8A4B     		ldr	r3, .L56+4
 629 0022 BB64     		str	r3, [r7, #72]
 630 0024 8A4B     		ldr	r3, .L56+8
 631 0026 3B64     		str	r3, [r7, #64]
 632 0028 3B6C     		ldr	r3, [r7, #64]
 633 002a 7B64     		str	r3, [r7, #68]
 634 002c 4FF00403 		mov	r3, #4
 635 0030 FB63     		str	r3, [r7, #60]
 636 0032 E3E0     		b	.L3
 637              	.L4:
 638              		.loc 1 26 0 discriminator 3
 639 0034 BB6B     		ldr	r3, [r7, #56]
 640 0036 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 641 0038 1A46     		mov	r2, r3
 642 003a BB6B     		ldr	r3, [r7, #56]
 643 003c 03F10103 		add	r3, r3, #1
 644 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 645 0042 4FEA0323 		lsl	r3, r3, #8
 646 0046 D218     		adds	r2, r2, r3
 647 0048 BB6B     		ldr	r3, [r7, #56]
 648 004a 03F10203 		add	r3, r3, #2
 649 004e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 650 0050 4FEA0343 		lsl	r3, r3, #16
 651 0054 D218     		adds	r2, r2, r3
 652 0056 BB6B     		ldr	r3, [r7, #56]
 653 0058 03F10303 		add	r3, r3, #3
 654 005c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 655 005e 4FEA0363 		lsl	r3, r3, #24
 656 0062 D318     		adds	r3, r2, r3
 657 0064 7A6C     		ldr	r2, [r7, #68]
 658 0066 D318     		adds	r3, r2, r3
 659 0068 7B64     		str	r3, [r7, #68]
 660 006a BB6B     		ldr	r3, [r7, #56]
 661 006c 03F10403 		add	r3, r3, #4
 662 0070 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 663 0072 1A46     		mov	r2, r3
 664 0074 BB6B     		ldr	r3, [r7, #56]
 665 0076 03F10503 		add	r3, r3, #5
 666 007a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 667 007c 4FEA0323 		lsl	r3, r3, #8
 668 0080 D218     		adds	r2, r2, r3
 669 0082 BB6B     		ldr	r3, [r7, #56]
 670 0084 03F10603 		add	r3, r3, #6
 671 0088 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 672 008a 4FEA0343 		lsl	r3, r3, #16
 673 008e D218     		adds	r2, r2, r3
 674 0090 BB6B     		ldr	r3, [r7, #56]
 675 0092 03F10703 		add	r3, r3, #7
 676 0096 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 677 0098 4FEA0363 		lsl	r3, r3, #24
 678 009c D318     		adds	r3, r2, r3
 679 009e 3A6C     		ldr	r2, [r7, #64]
 680 00a0 D318     		adds	r3, r2, r3
 681 00a2 3B64     		str	r3, [r7, #64]
 682 00a4 BB6B     		ldr	r3, [r7, #56]
 683 00a6 03F10803 		add	r3, r3, #8
 684 00aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 685 00ac 1A46     		mov	r2, r3
 686 00ae BB6B     		ldr	r3, [r7, #56]
 687 00b0 03F10903 		add	r3, r3, #9
 688 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 689 00b6 4FEA0323 		lsl	r3, r3, #8
 690 00ba D218     		adds	r2, r2, r3
 691 00bc BB6B     		ldr	r3, [r7, #56]
 692 00be 03F10A03 		add	r3, r3, #10
 693 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 694 00c4 4FEA0343 		lsl	r3, r3, #16
 695 00c8 D218     		adds	r2, r2, r3
 696 00ca BB6B     		ldr	r3, [r7, #56]
 697 00cc 03F10B03 		add	r3, r3, #11
 698 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 699 00d2 4FEA0363 		lsl	r3, r3, #24
 700 00d6 D318     		adds	r3, r2, r3
 701 00d8 BA6C     		ldr	r2, [r7, #72]
 702 00da D318     		adds	r3, r2, r3
 703 00dc BB64     		str	r3, [r7, #72]
 704 00de 7A6C     		ldr	r2, [r7, #68]
 705 00e0 3B6C     		ldr	r3, [r7, #64]
 706 00e2 D31A     		subs	r3, r2, r3
 707 00e4 7B64     		str	r3, [r7, #68]
 708 00e6 7A6C     		ldr	r2, [r7, #68]
 709 00e8 BB6C     		ldr	r3, [r7, #72]
 710 00ea D31A     		subs	r3, r2, r3
 711 00ec 7B64     		str	r3, [r7, #68]
 712 00ee BB6C     		ldr	r3, [r7, #72]
 713 00f0 4FEA5333 		lsr	r3, r3, #13
 714 00f4 7A6C     		ldr	r2, [r7, #68]
 715 00f6 82EA0303 		eor	r3, r2, r3
 716 00fa 7B64     		str	r3, [r7, #68]
 717 00fc 3A6C     		ldr	r2, [r7, #64]
 718 00fe BB6C     		ldr	r3, [r7, #72]
 719 0100 D31A     		subs	r3, r2, r3
 720 0102 3B64     		str	r3, [r7, #64]
 721 0104 3A6C     		ldr	r2, [r7, #64]
 722 0106 7B6C     		ldr	r3, [r7, #68]
 723 0108 D31A     		subs	r3, r2, r3
 724 010a 3B64     		str	r3, [r7, #64]
 725 010c 7B6C     		ldr	r3, [r7, #68]
 726 010e 4FEA0323 		lsl	r3, r3, #8
 727 0112 3A6C     		ldr	r2, [r7, #64]
 728 0114 82EA0303 		eor	r3, r2, r3
 729 0118 3B64     		str	r3, [r7, #64]
 730 011a BA6C     		ldr	r2, [r7, #72]
 731 011c 7B6C     		ldr	r3, [r7, #68]
 732 011e D31A     		subs	r3, r2, r3
 733 0120 BB64     		str	r3, [r7, #72]
 734 0122 BA6C     		ldr	r2, [r7, #72]
 735 0124 3B6C     		ldr	r3, [r7, #64]
 736 0126 D31A     		subs	r3, r2, r3
 737 0128 BB64     		str	r3, [r7, #72]
 738 012a 3B6C     		ldr	r3, [r7, #64]
 739 012c 4FEA5333 		lsr	r3, r3, #13
 740 0130 BA6C     		ldr	r2, [r7, #72]
 741 0132 82EA0303 		eor	r3, r2, r3
 742 0136 BB64     		str	r3, [r7, #72]
 743 0138 7A6C     		ldr	r2, [r7, #68]
 744 013a 3B6C     		ldr	r3, [r7, #64]
 745 013c D31A     		subs	r3, r2, r3
 746 013e 7B64     		str	r3, [r7, #68]
 747 0140 7A6C     		ldr	r2, [r7, #68]
 748 0142 BB6C     		ldr	r3, [r7, #72]
 749 0144 D31A     		subs	r3, r2, r3
 750 0146 7B64     		str	r3, [r7, #68]
 751 0148 BB6C     		ldr	r3, [r7, #72]
 752 014a 4FEA1333 		lsr	r3, r3, #12
 753 014e 7A6C     		ldr	r2, [r7, #68]
 754 0150 82EA0303 		eor	r3, r2, r3
 755 0154 7B64     		str	r3, [r7, #68]
 756 0156 3A6C     		ldr	r2, [r7, #64]
 757 0158 BB6C     		ldr	r3, [r7, #72]
 758 015a D31A     		subs	r3, r2, r3
 759 015c 3B64     		str	r3, [r7, #64]
 760 015e 3A6C     		ldr	r2, [r7, #64]
 761 0160 7B6C     		ldr	r3, [r7, #68]
 762 0162 D31A     		subs	r3, r2, r3
 763 0164 3B64     		str	r3, [r7, #64]
 764 0166 7B6C     		ldr	r3, [r7, #68]
 765 0168 4FEA0343 		lsl	r3, r3, #16
 766 016c 3A6C     		ldr	r2, [r7, #64]
 767 016e 82EA0303 		eor	r3, r2, r3
 768 0172 3B64     		str	r3, [r7, #64]
 769 0174 BA6C     		ldr	r2, [r7, #72]
 770 0176 7B6C     		ldr	r3, [r7, #68]
 771 0178 D31A     		subs	r3, r2, r3
 772 017a BB64     		str	r3, [r7, #72]
 773 017c BA6C     		ldr	r2, [r7, #72]
 774 017e 3B6C     		ldr	r3, [r7, #64]
 775 0180 D31A     		subs	r3, r2, r3
 776 0182 BB64     		str	r3, [r7, #72]
 777 0184 3B6C     		ldr	r3, [r7, #64]
 778 0186 4FEA5313 		lsr	r3, r3, #5
 779 018a BA6C     		ldr	r2, [r7, #72]
 780 018c 82EA0303 		eor	r3, r2, r3
 781 0190 BB64     		str	r3, [r7, #72]
 782 0192 7A6C     		ldr	r2, [r7, #68]
 783 0194 3B6C     		ldr	r3, [r7, #64]
 784 0196 D31A     		subs	r3, r2, r3
 785 0198 7B64     		str	r3, [r7, #68]
 786 019a 7A6C     		ldr	r2, [r7, #68]
 787 019c BB6C     		ldr	r3, [r7, #72]
 788 019e D31A     		subs	r3, r2, r3
 789 01a0 7B64     		str	r3, [r7, #68]
 790 01a2 BB6C     		ldr	r3, [r7, #72]
 791 01a4 4FEAD303 		lsr	r3, r3, #3
 792 01a8 7A6C     		ldr	r2, [r7, #68]
 793 01aa 82EA0303 		eor	r3, r2, r3
 794 01ae 7B64     		str	r3, [r7, #68]
 795 01b0 3A6C     		ldr	r2, [r7, #64]
 796 01b2 BB6C     		ldr	r3, [r7, #72]
 797 01b4 D31A     		subs	r3, r2, r3
 798 01b6 3B64     		str	r3, [r7, #64]
 799 01b8 3A6C     		ldr	r2, [r7, #64]
 800 01ba 7B6C     		ldr	r3, [r7, #68]
 801 01bc D31A     		subs	r3, r2, r3
 802 01be 3B64     		str	r3, [r7, #64]
 803 01c0 7B6C     		ldr	r3, [r7, #68]
 804 01c2 4FEA8323 		lsl	r3, r3, #10
 805 01c6 3A6C     		ldr	r2, [r7, #64]
 806 01c8 82EA0303 		eor	r3, r2, r3
 807 01cc 3B64     		str	r3, [r7, #64]
 808 01ce BA6C     		ldr	r2, [r7, #72]
 809 01d0 7B6C     		ldr	r3, [r7, #68]
 810 01d2 D31A     		subs	r3, r2, r3
 811 01d4 BB64     		str	r3, [r7, #72]
 812 01d6 BA6C     		ldr	r2, [r7, #72]
 813 01d8 3B6C     		ldr	r3, [r7, #64]
 814 01da D31A     		subs	r3, r2, r3
 815 01dc BB64     		str	r3, [r7, #72]
 816 01de 3B6C     		ldr	r3, [r7, #64]
 817 01e0 4FEAD333 		lsr	r3, r3, #15
 818 01e4 BA6C     		ldr	r2, [r7, #72]
 819 01e6 82EA0303 		eor	r3, r2, r3
 820 01ea BB64     		str	r3, [r7, #72]
 821 01ec BB6B     		ldr	r3, [r7, #56]
 822 01ee 03F10C03 		add	r3, r3, #12
 823 01f2 BB63     		str	r3, [r7, #56]
 824 01f4 FB6B     		ldr	r3, [r7, #60]
 825 01f6 A3F10C03 		sub	r3, r3, #12
 826 01fa FB63     		str	r3, [r7, #60]
 827              	.L3:
 828              		.loc 1 26 0 discriminator 2
 829 01fc FB6B     		ldr	r3, [r7, #60]
 830 01fe 0B2B     		cmp	r3, #11
 831 0200 3FF618AF 		bhi	.L4
 832              		.loc 1 26 0 discriminator 4
 833 0204 BB6C     		ldr	r3, [r7, #72]
 834 0206 03F10403 		add	r3, r3, #4
 835 020a BB64     		str	r3, [r7, #72]
 836 020c FB6B     		ldr	r3, [r7, #60]
 837 020e 03F1FF33 		add	r3, r3, #-1
 838 0212 0A2B     		cmp	r3, #10
 839 0214 7BD8     		bhi	.L5
 840 0216 01A2     		adr	r2, .L17
 841 0218 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 842              		.align	2
 843              	.L17:
 844 021c 05030000 		.word	.L6+1
 845 0220 F3020000 		.word	.L7+1
 846 0224 E1020000 		.word	.L8+1
 847 0228 CF020000 		.word	.L9+1
 848 022c C1020000 		.word	.L10+1
 849 0230 AF020000 		.word	.L11+1
 850 0234 9D020000 		.word	.L12+1
 851 0238 8B020000 		.word	.L13+1
 852 023c 79020000 		.word	.L14+1
 853 0240 67020000 		.word	.L15+1
 854 0244 55020000 		.word	.L16+1
 855              	.L57:
 856              		.align	2
 857              	.L56:
 858 0248 00000000 		.word	users
 859 024c EFBEEDFE 		.word	-17973521
 860 0250 B979379E 		.word	-1640531527
 861              	.L16:
 862              		.loc 1 26 0 discriminator 16
 863 0254 BB6B     		ldr	r3, [r7, #56]
 864 0256 03F10A03 		add	r3, r3, #10
 865 025a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 866 025c 4FEA0363 		lsl	r3, r3, #24
 867 0260 BA6C     		ldr	r2, [r7, #72]
 868 0262 D318     		adds	r3, r2, r3
 869 0264 BB64     		str	r3, [r7, #72]
 870              	.L15:
 871              		.loc 1 26 0 discriminator 15
 872 0266 BB6B     		ldr	r3, [r7, #56]
 873 0268 03F10903 		add	r3, r3, #9
 874 026c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 875 026e 4FEA0343 		lsl	r3, r3, #16
 876 0272 BA6C     		ldr	r2, [r7, #72]
 877 0274 D318     		adds	r3, r2, r3
 878 0276 BB64     		str	r3, [r7, #72]
 879              	.L14:
 880              		.loc 1 26 0 discriminator 14
 881 0278 BB6B     		ldr	r3, [r7, #56]
 882 027a 03F10803 		add	r3, r3, #8
 883 027e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 884 0280 4FEA0323 		lsl	r3, r3, #8
 885 0284 BA6C     		ldr	r2, [r7, #72]
 886 0286 D318     		adds	r3, r2, r3
 887 0288 BB64     		str	r3, [r7, #72]
 888              	.L13:
 889              		.loc 1 26 0 discriminator 13
 890 028a BB6B     		ldr	r3, [r7, #56]
 891 028c 03F10703 		add	r3, r3, #7
 892 0290 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 893 0292 4FEA0363 		lsl	r3, r3, #24
 894 0296 3A6C     		ldr	r2, [r7, #64]
 895 0298 D318     		adds	r3, r2, r3
 896 029a 3B64     		str	r3, [r7, #64]
 897              	.L12:
 898              		.loc 1 26 0 discriminator 12
 899 029c BB6B     		ldr	r3, [r7, #56]
 900 029e 03F10603 		add	r3, r3, #6
 901 02a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 902 02a4 4FEA0343 		lsl	r3, r3, #16
 903 02a8 3A6C     		ldr	r2, [r7, #64]
 904 02aa D318     		adds	r3, r2, r3
 905 02ac 3B64     		str	r3, [r7, #64]
 906              	.L11:
 907              		.loc 1 26 0 discriminator 11
 908 02ae BB6B     		ldr	r3, [r7, #56]
 909 02b0 03F10503 		add	r3, r3, #5
 910 02b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 911 02b6 4FEA0323 		lsl	r3, r3, #8
 912 02ba 3A6C     		ldr	r2, [r7, #64]
 913 02bc D318     		adds	r3, r2, r3
 914 02be 3B64     		str	r3, [r7, #64]
 915              	.L10:
 916              		.loc 1 26 0 discriminator 10
 917 02c0 BB6B     		ldr	r3, [r7, #56]
 918 02c2 03F10403 		add	r3, r3, #4
 919 02c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 920 02c8 3A6C     		ldr	r2, [r7, #64]
 921 02ca D318     		adds	r3, r2, r3
 922 02cc 3B64     		str	r3, [r7, #64]
 923              	.L9:
 924              		.loc 1 26 0 discriminator 9
 925 02ce BB6B     		ldr	r3, [r7, #56]
 926 02d0 03F10303 		add	r3, r3, #3
 927 02d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 928 02d6 4FEA0363 		lsl	r3, r3, #24
 929 02da 7A6C     		ldr	r2, [r7, #68]
 930 02dc D318     		adds	r3, r2, r3
 931 02de 7B64     		str	r3, [r7, #68]
 932              	.L8:
 933              		.loc 1 26 0 discriminator 8
 934 02e0 BB6B     		ldr	r3, [r7, #56]
 935 02e2 03F10203 		add	r3, r3, #2
 936 02e6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 937 02e8 4FEA0343 		lsl	r3, r3, #16
 938 02ec 7A6C     		ldr	r2, [r7, #68]
 939 02ee D318     		adds	r3, r2, r3
 940 02f0 7B64     		str	r3, [r7, #68]
 941              	.L7:
 942              		.loc 1 26 0 discriminator 7
 943 02f2 BB6B     		ldr	r3, [r7, #56]
 944 02f4 03F10103 		add	r3, r3, #1
 945 02f8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 946 02fa 4FEA0323 		lsl	r3, r3, #8
 947 02fe 7A6C     		ldr	r2, [r7, #68]
 948 0300 D318     		adds	r3, r2, r3
 949 0302 7B64     		str	r3, [r7, #68]
 950              	.L6:
 951              		.loc 1 26 0 discriminator 6
 952 0304 BB6B     		ldr	r3, [r7, #56]
 953 0306 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 954 0308 7A6C     		ldr	r2, [r7, #68]
 955 030a D318     		adds	r3, r2, r3
 956 030c 7B64     		str	r3, [r7, #68]
 957              	.L5:
 958              		.loc 1 26 0 discriminator 5
 959 030e 7A6C     		ldr	r2, [r7, #68]
 960 0310 3B6C     		ldr	r3, [r7, #64]
 961 0312 D31A     		subs	r3, r2, r3
 962 0314 7B64     		str	r3, [r7, #68]
 963 0316 7A6C     		ldr	r2, [r7, #68]
 964 0318 BB6C     		ldr	r3, [r7, #72]
 965 031a D31A     		subs	r3, r2, r3
 966 031c 7B64     		str	r3, [r7, #68]
 967 031e BB6C     		ldr	r3, [r7, #72]
 968 0320 4FEA5333 		lsr	r3, r3, #13
 969 0324 7A6C     		ldr	r2, [r7, #68]
 970 0326 82EA0303 		eor	r3, r2, r3
 971 032a 7B64     		str	r3, [r7, #68]
 972 032c 3A6C     		ldr	r2, [r7, #64]
 973 032e BB6C     		ldr	r3, [r7, #72]
 974 0330 D31A     		subs	r3, r2, r3
 975 0332 3B64     		str	r3, [r7, #64]
 976 0334 3A6C     		ldr	r2, [r7, #64]
 977 0336 7B6C     		ldr	r3, [r7, #68]
 978 0338 D31A     		subs	r3, r2, r3
 979 033a 3B64     		str	r3, [r7, #64]
 980 033c 7B6C     		ldr	r3, [r7, #68]
 981 033e 4FEA0323 		lsl	r3, r3, #8
 982 0342 3A6C     		ldr	r2, [r7, #64]
 983 0344 82EA0303 		eor	r3, r2, r3
 984 0348 3B64     		str	r3, [r7, #64]
 985 034a BA6C     		ldr	r2, [r7, #72]
 986 034c 7B6C     		ldr	r3, [r7, #68]
 987 034e D31A     		subs	r3, r2, r3
 988 0350 BB64     		str	r3, [r7, #72]
 989 0352 BA6C     		ldr	r2, [r7, #72]
 990 0354 3B6C     		ldr	r3, [r7, #64]
 991 0356 D31A     		subs	r3, r2, r3
 992 0358 BB64     		str	r3, [r7, #72]
 993 035a 3B6C     		ldr	r3, [r7, #64]
 994 035c 4FEA5333 		lsr	r3, r3, #13
 995 0360 BA6C     		ldr	r2, [r7, #72]
 996 0362 82EA0303 		eor	r3, r2, r3
 997 0366 BB64     		str	r3, [r7, #72]
 998 0368 7A6C     		ldr	r2, [r7, #68]
 999 036a 3B6C     		ldr	r3, [r7, #64]
 1000 036c D31A     		subs	r3, r2, r3
 1001 036e 7B64     		str	r3, [r7, #68]
 1002 0370 7A6C     		ldr	r2, [r7, #68]
 1003 0372 BB6C     		ldr	r3, [r7, #72]
 1004 0374 D31A     		subs	r3, r2, r3
 1005 0376 7B64     		str	r3, [r7, #68]
 1006 0378 BB6C     		ldr	r3, [r7, #72]
 1007 037a 4FEA1333 		lsr	r3, r3, #12
 1008 037e 7A6C     		ldr	r2, [r7, #68]
 1009 0380 82EA0303 		eor	r3, r2, r3
 1010 0384 7B64     		str	r3, [r7, #68]
 1011 0386 3A6C     		ldr	r2, [r7, #64]
 1012 0388 BB6C     		ldr	r3, [r7, #72]
 1013 038a D31A     		subs	r3, r2, r3
 1014 038c 3B64     		str	r3, [r7, #64]
 1015 038e 3A6C     		ldr	r2, [r7, #64]
 1016 0390 7B6C     		ldr	r3, [r7, #68]
 1017 0392 D31A     		subs	r3, r2, r3
 1018 0394 3B64     		str	r3, [r7, #64]
 1019 0396 7B6C     		ldr	r3, [r7, #68]
 1020 0398 4FEA0343 		lsl	r3, r3, #16
 1021 039c 3A6C     		ldr	r2, [r7, #64]
 1022 039e 82EA0303 		eor	r3, r2, r3
 1023 03a2 3B64     		str	r3, [r7, #64]
 1024 03a4 BA6C     		ldr	r2, [r7, #72]
 1025 03a6 7B6C     		ldr	r3, [r7, #68]
 1026 03a8 D31A     		subs	r3, r2, r3
 1027 03aa BB64     		str	r3, [r7, #72]
 1028 03ac BA6C     		ldr	r2, [r7, #72]
 1029 03ae 3B6C     		ldr	r3, [r7, #64]
 1030 03b0 D31A     		subs	r3, r2, r3
 1031 03b2 BB64     		str	r3, [r7, #72]
 1032 03b4 3B6C     		ldr	r3, [r7, #64]
 1033 03b6 4FEA5313 		lsr	r3, r3, #5
 1034 03ba BA6C     		ldr	r2, [r7, #72]
 1035 03bc 82EA0303 		eor	r3, r2, r3
 1036 03c0 BB64     		str	r3, [r7, #72]
 1037 03c2 7A6C     		ldr	r2, [r7, #68]
 1038 03c4 3B6C     		ldr	r3, [r7, #64]
 1039 03c6 D31A     		subs	r3, r2, r3
 1040 03c8 7B64     		str	r3, [r7, #68]
 1041 03ca 7A6C     		ldr	r2, [r7, #68]
 1042 03cc BB6C     		ldr	r3, [r7, #72]
 1043 03ce D31A     		subs	r3, r2, r3
 1044 03d0 7B64     		str	r3, [r7, #68]
 1045 03d2 BB6C     		ldr	r3, [r7, #72]
 1046 03d4 4FEAD303 		lsr	r3, r3, #3
 1047 03d8 7A6C     		ldr	r2, [r7, #68]
 1048 03da 82EA0303 		eor	r3, r2, r3
 1049 03de 7B64     		str	r3, [r7, #68]
 1050 03e0 3A6C     		ldr	r2, [r7, #64]
 1051 03e2 BB6C     		ldr	r3, [r7, #72]
 1052 03e4 D31A     		subs	r3, r2, r3
 1053 03e6 3B64     		str	r3, [r7, #64]
 1054 03e8 3A6C     		ldr	r2, [r7, #64]
 1055 03ea 7B6C     		ldr	r3, [r7, #68]
 1056 03ec D31A     		subs	r3, r2, r3
 1057 03ee 3B64     		str	r3, [r7, #64]
 1058 03f0 7B6C     		ldr	r3, [r7, #68]
 1059 03f2 4FEA8323 		lsl	r3, r3, #10
 1060 03f6 3A6C     		ldr	r2, [r7, #64]
 1061 03f8 82EA0303 		eor	r3, r2, r3
 1062 03fc 3B64     		str	r3, [r7, #64]
 1063 03fe BA6C     		ldr	r2, [r7, #72]
 1064 0400 7B6C     		ldr	r3, [r7, #68]
 1065 0402 D31A     		subs	r3, r2, r3
 1066 0404 BB64     		str	r3, [r7, #72]
 1067 0406 BA6C     		ldr	r2, [r7, #72]
 1068 0408 3B6C     		ldr	r3, [r7, #64]
 1069 040a D31A     		subs	r3, r2, r3
 1070 040c BB64     		str	r3, [r7, #72]
 1071 040e 3B6C     		ldr	r3, [r7, #64]
 1072 0410 4FEAD333 		lsr	r3, r3, #15
 1073 0414 BA6C     		ldr	r2, [r7, #72]
 1074 0416 82EA0303 		eor	r3, r2, r3
 1075 041a BB64     		str	r3, [r7, #72]
 1076 041c 854B     		ldr	r3, .L58
 1077 041e 1B68     		ldr	r3, [r3, #0]
 1078 0420 9B68     		ldr	r3, [r3, #8]
 1079 0422 5B68     		ldr	r3, [r3, #4]
 1080 0424 03F1FF32 		add	r2, r3, #-1
 1081 0428 BB6C     		ldr	r3, [r7, #72]
 1082 042a 02EA0303 		and	r3, r2, r3
 1083 042e FB61     		str	r3, [r7, #28]
 1084              	.LBE3:
 1085 0430 804B     		ldr	r3, .L58
 1086 0432 1B68     		ldr	r3, [r3, #0]
 1087 0434 9B68     		ldr	r3, [r3, #8]
 1088 0436 1968     		ldr	r1, [r3, #0]
 1089 0438 FA69     		ldr	r2, [r7, #28]
 1090 043a 1346     		mov	r3, r2
 1091 043c 4FEA4303 		lsl	r3, r3, #1
 1092 0440 9B18     		adds	r3, r3, r2
 1093 0442 4FEA8303 		lsl	r3, r3, #2
 1094 0446 CB18     		adds	r3, r1, r3
 1095 0448 1B68     		ldr	r3, [r3, #0]
 1096 044a 002B     		cmp	r3, #0
 1097 044c 16D0     		beq	.L18
 1098              		.loc 1 26 0 discriminator 18
 1099 044e 794B     		ldr	r3, .L58
 1100 0450 1B68     		ldr	r3, [r3, #0]
 1101 0452 9B68     		ldr	r3, [r3, #8]
 1102 0454 1968     		ldr	r1, [r3, #0]
 1103 0456 FA69     		ldr	r2, [r7, #28]
 1104 0458 1346     		mov	r3, r2
 1105 045a 4FEA4303 		lsl	r3, r3, #1
 1106 045e 9B18     		adds	r3, r3, r2
 1107 0460 4FEA8303 		lsl	r3, r3, #2
 1108 0464 CB18     		adds	r3, r1, r3
 1109 0466 1B68     		ldr	r3, [r3, #0]
 1110 0468 1A46     		mov	r2, r3
 1111 046a 724B     		ldr	r3, .L58
 1112 046c 1B68     		ldr	r3, [r3, #0]
 1113 046e 9B68     		ldr	r3, [r3, #8]
 1114 0470 5B69     		ldr	r3, [r3, #20]
 1115 0472 C3F10003 		rsb	r3, r3, #0
 1116 0476 D318     		adds	r3, r2, r3
 1117 0478 FB64     		str	r3, [r7, #76]
 1118 047a 27E0     		b	.L20
 1119              	.L18:
 1120              		.loc 1 26 0 discriminator 19
 1121 047c 4FF00003 		mov	r3, #0
 1122 0480 FB64     		str	r3, [r7, #76]
 1123 0482 23E0     		b	.L20
 1124              	.L23:
 1125              		.loc 1 26 0 discriminator 26
 1126 0484 FB6C     		ldr	r3, [r7, #76]
 1127 0486 1B6A     		ldr	r3, [r3, #32]
 1128 0488 042B     		cmp	r3, #4
 1129 048a 0CD1     		bne	.L21
 1130              		.loc 1 26 0 discriminator 22
 1131 048c FB6C     		ldr	r3, [r7, #76]
 1132 048e DA69     		ldr	r2, [r3, #28]
 1133 0490 07F10403 		add	r3, r7, #4
 1134 0494 1046     		mov	r0, r2
 1135 0496 1946     		mov	r1, r3
 1136 0498 4FF00402 		mov	r2, #4
 1137 049c FFF7FEFF 		bl	memcmp
 1138 04a0 0346     		mov	r3, r0
 1139 04a2 002B     		cmp	r3, #0
 1140 04a4 15D0     		beq	.L2
 1141              	.L21:
 1142              		.loc 1 26 0 discriminator 23
 1143 04a6 FB6C     		ldr	r3, [r7, #76]
 1144 04a8 9B69     		ldr	r3, [r3, #24]
 1145 04aa 002B     		cmp	r3, #0
 1146 04ac 0BD0     		beq	.L22
 1147              		.loc 1 26 0 discriminator 24
 1148 04ae FB6C     		ldr	r3, [r7, #76]
 1149 04b0 9B69     		ldr	r3, [r3, #24]
 1150 04b2 1A46     		mov	r2, r3
 1151 04b4 5F4B     		ldr	r3, .L58
 1152 04b6 1B68     		ldr	r3, [r3, #0]
 1153 04b8 9B68     		ldr	r3, [r3, #8]
 1154 04ba 5B69     		ldr	r3, [r3, #20]
 1155 04bc C3F10003 		rsb	r3, r3, #0
 1156 04c0 D318     		adds	r3, r2, r3
 1157 04c2 FB64     		str	r3, [r7, #76]
 1158 04c4 02E0     		b	.L20
 1159              	.L22:
 1160              		.loc 1 26 0 discriminator 25
 1161 04c6 4FF00003 		mov	r3, #0
 1162 04ca FB64     		str	r3, [r7, #76]
 1163              	.L20:
 1164              		.loc 1 26 0 discriminator 21
 1165 04cc FB6C     		ldr	r3, [r7, #76]
 1166 04ce 002B     		cmp	r3, #0
 1167 04d0 D8D1     		bne	.L23
 1168              	.L2:
 1169              	.LBE2:
  27:src/modbus.c  **** 	// id already in the hash?
  28:src/modbus.c  **** 	if (s == NULL) {
 1170              		.loc 1 28 0 is_stmt 1
 1171 04d2 FB6C     		ldr	r3, [r7, #76]
 1172 04d4 002B     		cmp	r3, #0
 1173 04d6 40F05384 		bne	.L24
  29:src/modbus.c  **** 		s = (struct heapStruct*) malloc(sizeof(struct heapStruct));
 1174              		.loc 1 29 0
 1175 04da 4FF02800 		mov	r0, #40
 1176 04de FFF7FEFF 		bl	malloc
 1177 04e2 0346     		mov	r3, r0
 1178 04e4 FB64     		str	r3, [r7, #76]
  30:src/modbus.c  **** 		s->key = keyID;
 1179              		.loc 1 30 0
 1180 04e6 7B68     		ldr	r3, [r7, #4]
 1181 04e8 1A46     		mov	r2, r3
 1182 04ea FB6C     		ldr	r3, [r7, #76]
 1183 04ec 1A60     		str	r2, [r3, #0]
 1184              	.LBB4:
  31:src/modbus.c  **** 		HASH_ADD_INT( users, key, s);
 1185              		.loc 1 31 0
 1186 04ee FB6C     		ldr	r3, [r7, #76]
 1187 04f0 4FF00002 		mov	r2, #0
 1188 04f4 1A61     		str	r2, [r3, #16]
 1189 04f6 FA6C     		ldr	r2, [r7, #76]
 1190 04f8 FB6C     		ldr	r3, [r7, #76]
 1191 04fa DA61     		str	r2, [r3, #28]
 1192 04fc FB6C     		ldr	r3, [r7, #76]
 1193 04fe 4FF00402 		mov	r2, #4
 1194 0502 1A62     		str	r2, [r3, #32]
 1195 0504 4B4B     		ldr	r3, .L58
 1196 0506 1B68     		ldr	r3, [r3, #0]
 1197 0508 002B     		cmp	r3, #0
 1198 050a 60D1     		bne	.L25
 1199              		.loc 1 31 0 is_stmt 0 discriminator 1
 1200 050c 494B     		ldr	r3, .L58
 1201 050e FA6C     		ldr	r2, [r7, #76]
 1202 0510 1A60     		str	r2, [r3, #0]
 1203 0512 484B     		ldr	r3, .L58
 1204 0514 1B68     		ldr	r3, [r3, #0]
 1205 0516 4FF00002 		mov	r2, #0
 1206 051a DA60     		str	r2, [r3, #12]
 1207 051c 454B     		ldr	r3, .L58
 1208 051e 1C68     		ldr	r4, [r3, #0]
 1209 0520 4FF02C00 		mov	r0, #44
 1210 0524 FFF7FEFF 		bl	malloc
 1211 0528 0346     		mov	r3, r0
 1212 052a A360     		str	r3, [r4, #8]
 1213 052c 414B     		ldr	r3, .L58
 1214 052e 1B68     		ldr	r3, [r3, #0]
 1215 0530 9B68     		ldr	r3, [r3, #8]
 1216 0532 002B     		cmp	r3, #0
 1217 0534 03D1     		bne	.L26
 1218              		.loc 1 31 0 discriminator 3
 1219 0536 4FF0FF30 		mov	r0, #-1
 1220 053a FFF7FEFF 		bl	exit
 1221              	.L26:
 1222              		.loc 1 31 0 discriminator 4
 1223 053e 3D4B     		ldr	r3, .L58
 1224 0540 1B68     		ldr	r3, [r3, #0]
 1225 0542 9B68     		ldr	r3, [r3, #8]
 1226 0544 1846     		mov	r0, r3
 1227 0546 4FF00001 		mov	r1, #0
 1228 054a 4FF02C02 		mov	r2, #44
 1229 054e FFF7FEFF 		bl	memset
 1230 0552 384B     		ldr	r3, .L58
 1231 0554 1B68     		ldr	r3, [r3, #0]
 1232 0556 9B68     		ldr	r3, [r3, #8]
 1233 0558 364A     		ldr	r2, .L58
 1234 055a 1268     		ldr	r2, [r2, #0]
 1235 055c 02F10802 		add	r2, r2, #8
 1236 0560 1A61     		str	r2, [r3, #16]
 1237 0562 344B     		ldr	r3, .L58
 1238 0564 1B68     		ldr	r3, [r3, #0]
 1239 0566 9B68     		ldr	r3, [r3, #8]
 1240 0568 4FF02002 		mov	r2, #32
 1241 056c 5A60     		str	r2, [r3, #4]
 1242 056e 314B     		ldr	r3, .L58
 1243 0570 1B68     		ldr	r3, [r3, #0]
 1244 0572 9B68     		ldr	r3, [r3, #8]
 1245 0574 4FF00502 		mov	r2, #5
 1246 0578 9A60     		str	r2, [r3, #8]
 1247 057a 2E4B     		ldr	r3, .L58
 1248 057c 1B68     		ldr	r3, [r3, #0]
 1249 057e 9B68     		ldr	r3, [r3, #8]
 1250 0580 4FF00802 		mov	r2, #8
 1251 0584 5A61     		str	r2, [r3, #20]
 1252 0586 2B4B     		ldr	r3, .L58
 1253 0588 1B68     		ldr	r3, [r3, #0]
 1254 058a 9C68     		ldr	r4, [r3, #8]
 1255 058c 4FF4C070 		mov	r0, #384
 1256 0590 FFF7FEFF 		bl	malloc
 1257 0594 0346     		mov	r3, r0
 1258 0596 2360     		str	r3, [r4, #0]
 1259 0598 264B     		ldr	r3, .L58
 1260 059a 1B68     		ldr	r3, [r3, #0]
 1261 059c 9B68     		ldr	r3, [r3, #8]
 1262 059e 1B68     		ldr	r3, [r3, #0]
 1263 05a0 002B     		cmp	r3, #0
 1264 05a2 03D1     		bne	.L27
 1265              		.loc 1 31 0 discriminator 5
 1266 05a4 4FF0FF30 		mov	r0, #-1
 1267 05a8 FFF7FEFF 		bl	exit
 1268              	.L27:
 1269              		.loc 1 31 0 discriminator 6
 1270 05ac 214B     		ldr	r3, .L58
 1271 05ae 1B68     		ldr	r3, [r3, #0]
 1272 05b0 9B68     		ldr	r3, [r3, #8]
 1273 05b2 1B68     		ldr	r3, [r3, #0]
 1274 05b4 1846     		mov	r0, r3
 1275 05b6 4FF00001 		mov	r1, #0
 1276 05ba 4FF4C072 		mov	r2, #384
 1277 05be FFF7FEFF 		bl	memset
 1278 05c2 1C4B     		ldr	r3, .L58
 1279 05c4 1B68     		ldr	r3, [r3, #0]
 1280 05c6 9B68     		ldr	r3, [r3, #8]
 1281 05c8 1B4A     		ldr	r2, .L58+4
 1282 05ca 9A62     		str	r2, [r3, #40]
 1283 05cc 19E0     		b	.L28
 1284              	.L25:
 1285              		.loc 1 31 0 discriminator 2
 1286 05ce 194B     		ldr	r3, .L58
 1287 05d0 1B68     		ldr	r3, [r3, #0]
 1288 05d2 9B68     		ldr	r3, [r3, #8]
 1289 05d4 1B69     		ldr	r3, [r3, #16]
 1290 05d6 FA6C     		ldr	r2, [r7, #76]
 1291 05d8 9A60     		str	r2, [r3, #8]
 1292 05da 164B     		ldr	r3, .L58
 1293 05dc 1B68     		ldr	r3, [r3, #0]
 1294 05de 9B68     		ldr	r3, [r3, #8]
 1295 05e0 1A69     		ldr	r2, [r3, #16]
 1296 05e2 144B     		ldr	r3, .L58
 1297 05e4 1B68     		ldr	r3, [r3, #0]
 1298 05e6 9B68     		ldr	r3, [r3, #8]
 1299 05e8 5B69     		ldr	r3, [r3, #20]
 1300 05ea C3F10003 		rsb	r3, r3, #0
 1301 05ee D218     		adds	r2, r2, r3
 1302 05f0 FB6C     		ldr	r3, [r7, #76]
 1303 05f2 DA60     		str	r2, [r3, #12]
 1304 05f4 0F4B     		ldr	r3, .L58
 1305 05f6 1B68     		ldr	r3, [r3, #0]
 1306 05f8 9B68     		ldr	r3, [r3, #8]
 1307 05fa FA6C     		ldr	r2, [r7, #76]
 1308 05fc 02F10802 		add	r2, r2, #8
 1309 0600 1A61     		str	r2, [r3, #16]
 1310              	.L28:
 1311              		.loc 1 31 0 discriminator 7
 1312 0602 0C4B     		ldr	r3, .L58
 1313 0604 1B68     		ldr	r3, [r3, #0]
 1314 0606 9B68     		ldr	r3, [r3, #8]
 1315 0608 DA68     		ldr	r2, [r3, #12]
 1316 060a 02F10102 		add	r2, r2, #1
 1317 060e DA60     		str	r2, [r3, #12]
 1318 0610 084B     		ldr	r3, .L58
 1319 0612 1B68     		ldr	r3, [r3, #0]
 1320 0614 9A68     		ldr	r2, [r3, #8]
 1321 0616 FB6C     		ldr	r3, [r7, #76]
 1322 0618 9A60     		str	r2, [r3, #8]
 1323              	.LBB5:
 1324 061a FB6C     		ldr	r3, [r7, #76]
 1325 061c BB62     		str	r3, [r7, #40]
 1326 061e FB6C     		ldr	r3, [r7, #76]
 1327 0620 064A     		ldr	r2, .L58+8
 1328 0622 5A62     		str	r2, [r3, #36]
 1329 0624 064B     		ldr	r3, .L58+12
 1330 0626 3B63     		str	r3, [r7, #48]
 1331 0628 3B6B     		ldr	r3, [r7, #48]
 1332 062a 7B63     		str	r3, [r7, #52]
 1333 062c 4FF00403 		mov	r3, #4
 1334 0630 FB62     		str	r3, [r7, #44]
 1335 0632 05E1     		b	.L29
 1336              	.L59:
 1337              		.align	2
 1338              	.L58:
 1339 0634 00000000 		.word	users
 1340 0638 E11F11A0 		.word	-1609490463
 1341 063c EFBEEDFE 		.word	-17973521
 1342 0640 B979379E 		.word	-1640531527
 1343              	.L30:
 1344              		.loc 1 31 0 discriminator 9
 1345 0644 BB6A     		ldr	r3, [r7, #40]
 1346 0646 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1347 0648 1A46     		mov	r2, r3
 1348 064a BB6A     		ldr	r3, [r7, #40]
 1349 064c 03F10103 		add	r3, r3, #1
 1350 0650 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1351 0652 4FEA0323 		lsl	r3, r3, #8
 1352 0656 D218     		adds	r2, r2, r3
 1353 0658 BB6A     		ldr	r3, [r7, #40]
 1354 065a 03F10203 		add	r3, r3, #2
 1355 065e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1356 0660 4FEA0343 		lsl	r3, r3, #16
 1357 0664 D218     		adds	r2, r2, r3
 1358 0666 BB6A     		ldr	r3, [r7, #40]
 1359 0668 03F10303 		add	r3, r3, #3
 1360 066c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1361 066e 4FEA0363 		lsl	r3, r3, #24
 1362 0672 D318     		adds	r3, r2, r3
 1363 0674 7A6B     		ldr	r2, [r7, #52]
 1364 0676 D318     		adds	r3, r2, r3
 1365 0678 7B63     		str	r3, [r7, #52]
 1366 067a BB6A     		ldr	r3, [r7, #40]
 1367 067c 03F10403 		add	r3, r3, #4
 1368 0680 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1369 0682 1A46     		mov	r2, r3
 1370 0684 BB6A     		ldr	r3, [r7, #40]
 1371 0686 03F10503 		add	r3, r3, #5
 1372 068a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1373 068c 4FEA0323 		lsl	r3, r3, #8
 1374 0690 D218     		adds	r2, r2, r3
 1375 0692 BB6A     		ldr	r3, [r7, #40]
 1376 0694 03F10603 		add	r3, r3, #6
 1377 0698 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1378 069a 4FEA0343 		lsl	r3, r3, #16
 1379 069e D218     		adds	r2, r2, r3
 1380 06a0 BB6A     		ldr	r3, [r7, #40]
 1381 06a2 03F10703 		add	r3, r3, #7
 1382 06a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1383 06a8 4FEA0363 		lsl	r3, r3, #24
 1384 06ac D318     		adds	r3, r2, r3
 1385 06ae 3A6B     		ldr	r2, [r7, #48]
 1386 06b0 D318     		adds	r3, r2, r3
 1387 06b2 3B63     		str	r3, [r7, #48]
 1388 06b4 FB6C     		ldr	r3, [r7, #76]
 1389 06b6 5A6A     		ldr	r2, [r3, #36]
 1390 06b8 BB6A     		ldr	r3, [r7, #40]
 1391 06ba 03F10803 		add	r3, r3, #8
 1392 06be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1393 06c0 1946     		mov	r1, r3
 1394 06c2 BB6A     		ldr	r3, [r7, #40]
 1395 06c4 03F10903 		add	r3, r3, #9
 1396 06c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1397 06ca 4FEA0323 		lsl	r3, r3, #8
 1398 06ce C918     		adds	r1, r1, r3
 1399 06d0 BB6A     		ldr	r3, [r7, #40]
 1400 06d2 03F10A03 		add	r3, r3, #10
 1401 06d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1402 06d8 4FEA0343 		lsl	r3, r3, #16
 1403 06dc C918     		adds	r1, r1, r3
 1404 06de BB6A     		ldr	r3, [r7, #40]
 1405 06e0 03F10B03 		add	r3, r3, #11
 1406 06e4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1407 06e6 4FEA0363 		lsl	r3, r3, #24
 1408 06ea CB18     		adds	r3, r1, r3
 1409 06ec D218     		adds	r2, r2, r3
 1410 06ee FB6C     		ldr	r3, [r7, #76]
 1411 06f0 5A62     		str	r2, [r3, #36]
 1412 06f2 7A6B     		ldr	r2, [r7, #52]
 1413 06f4 3B6B     		ldr	r3, [r7, #48]
 1414 06f6 D31A     		subs	r3, r2, r3
 1415 06f8 7B63     		str	r3, [r7, #52]
 1416 06fa FB6C     		ldr	r3, [r7, #76]
 1417 06fc 5B6A     		ldr	r3, [r3, #36]
 1418 06fe 7A6B     		ldr	r2, [r7, #52]
 1419 0700 D31A     		subs	r3, r2, r3
 1420 0702 7B63     		str	r3, [r7, #52]
 1421 0704 FB6C     		ldr	r3, [r7, #76]
 1422 0706 5B6A     		ldr	r3, [r3, #36]
 1423 0708 4FEA5333 		lsr	r3, r3, #13
 1424 070c 7A6B     		ldr	r2, [r7, #52]
 1425 070e 82EA0303 		eor	r3, r2, r3
 1426 0712 7B63     		str	r3, [r7, #52]
 1427 0714 FB6C     		ldr	r3, [r7, #76]
 1428 0716 5B6A     		ldr	r3, [r3, #36]
 1429 0718 3A6B     		ldr	r2, [r7, #48]
 1430 071a D31A     		subs	r3, r2, r3
 1431 071c 3B63     		str	r3, [r7, #48]
 1432 071e 3A6B     		ldr	r2, [r7, #48]
 1433 0720 7B6B     		ldr	r3, [r7, #52]
 1434 0722 D31A     		subs	r3, r2, r3
 1435 0724 3B63     		str	r3, [r7, #48]
 1436 0726 7B6B     		ldr	r3, [r7, #52]
 1437 0728 4FEA0323 		lsl	r3, r3, #8
 1438 072c 3A6B     		ldr	r2, [r7, #48]
 1439 072e 82EA0303 		eor	r3, r2, r3
 1440 0732 3B63     		str	r3, [r7, #48]
 1441 0734 FB6C     		ldr	r3, [r7, #76]
 1442 0736 5A6A     		ldr	r2, [r3, #36]
 1443 0738 7B6B     		ldr	r3, [r7, #52]
 1444 073a D21A     		subs	r2, r2, r3
 1445 073c FB6C     		ldr	r3, [r7, #76]
 1446 073e 5A62     		str	r2, [r3, #36]
 1447 0740 FB6C     		ldr	r3, [r7, #76]
 1448 0742 5A6A     		ldr	r2, [r3, #36]
 1449 0744 3B6B     		ldr	r3, [r7, #48]
 1450 0746 D21A     		subs	r2, r2, r3
 1451 0748 FB6C     		ldr	r3, [r7, #76]
 1452 074a 5A62     		str	r2, [r3, #36]
 1453 074c FB6C     		ldr	r3, [r7, #76]
 1454 074e 5A6A     		ldr	r2, [r3, #36]
 1455 0750 3B6B     		ldr	r3, [r7, #48]
 1456 0752 4FEA5333 		lsr	r3, r3, #13
 1457 0756 5A40     		eors	r2, r2, r3
 1458 0758 FB6C     		ldr	r3, [r7, #76]
 1459 075a 5A62     		str	r2, [r3, #36]
 1460 075c 7A6B     		ldr	r2, [r7, #52]
 1461 075e 3B6B     		ldr	r3, [r7, #48]
 1462 0760 D31A     		subs	r3, r2, r3
 1463 0762 7B63     		str	r3, [r7, #52]
 1464 0764 FB6C     		ldr	r3, [r7, #76]
 1465 0766 5B6A     		ldr	r3, [r3, #36]
 1466 0768 7A6B     		ldr	r2, [r7, #52]
 1467 076a D31A     		subs	r3, r2, r3
 1468 076c 7B63     		str	r3, [r7, #52]
 1469 076e FB6C     		ldr	r3, [r7, #76]
 1470 0770 5B6A     		ldr	r3, [r3, #36]
 1471 0772 4FEA1333 		lsr	r3, r3, #12
 1472 0776 7A6B     		ldr	r2, [r7, #52]
 1473 0778 82EA0303 		eor	r3, r2, r3
 1474 077c 7B63     		str	r3, [r7, #52]
 1475 077e FB6C     		ldr	r3, [r7, #76]
 1476 0780 5B6A     		ldr	r3, [r3, #36]
 1477 0782 3A6B     		ldr	r2, [r7, #48]
 1478 0784 D31A     		subs	r3, r2, r3
 1479 0786 3B63     		str	r3, [r7, #48]
 1480 0788 3A6B     		ldr	r2, [r7, #48]
 1481 078a 7B6B     		ldr	r3, [r7, #52]
 1482 078c D31A     		subs	r3, r2, r3
 1483 078e 3B63     		str	r3, [r7, #48]
 1484 0790 7B6B     		ldr	r3, [r7, #52]
 1485 0792 4FEA0343 		lsl	r3, r3, #16
 1486 0796 3A6B     		ldr	r2, [r7, #48]
 1487 0798 82EA0303 		eor	r3, r2, r3
 1488 079c 3B63     		str	r3, [r7, #48]
 1489 079e FB6C     		ldr	r3, [r7, #76]
 1490 07a0 5A6A     		ldr	r2, [r3, #36]
 1491 07a2 7B6B     		ldr	r3, [r7, #52]
 1492 07a4 D21A     		subs	r2, r2, r3
 1493 07a6 FB6C     		ldr	r3, [r7, #76]
 1494 07a8 5A62     		str	r2, [r3, #36]
 1495 07aa FB6C     		ldr	r3, [r7, #76]
 1496 07ac 5A6A     		ldr	r2, [r3, #36]
 1497 07ae 3B6B     		ldr	r3, [r7, #48]
 1498 07b0 D21A     		subs	r2, r2, r3
 1499 07b2 FB6C     		ldr	r3, [r7, #76]
 1500 07b4 5A62     		str	r2, [r3, #36]
 1501 07b6 FB6C     		ldr	r3, [r7, #76]
 1502 07b8 5A6A     		ldr	r2, [r3, #36]
 1503 07ba 3B6B     		ldr	r3, [r7, #48]
 1504 07bc 4FEA5313 		lsr	r3, r3, #5
 1505 07c0 5A40     		eors	r2, r2, r3
 1506 07c2 FB6C     		ldr	r3, [r7, #76]
 1507 07c4 5A62     		str	r2, [r3, #36]
 1508 07c6 7A6B     		ldr	r2, [r7, #52]
 1509 07c8 3B6B     		ldr	r3, [r7, #48]
 1510 07ca D31A     		subs	r3, r2, r3
 1511 07cc 7B63     		str	r3, [r7, #52]
 1512 07ce FB6C     		ldr	r3, [r7, #76]
 1513 07d0 5B6A     		ldr	r3, [r3, #36]
 1514 07d2 7A6B     		ldr	r2, [r7, #52]
 1515 07d4 D31A     		subs	r3, r2, r3
 1516 07d6 7B63     		str	r3, [r7, #52]
 1517 07d8 FB6C     		ldr	r3, [r7, #76]
 1518 07da 5B6A     		ldr	r3, [r3, #36]
 1519 07dc 4FEAD303 		lsr	r3, r3, #3
 1520 07e0 7A6B     		ldr	r2, [r7, #52]
 1521 07e2 82EA0303 		eor	r3, r2, r3
 1522 07e6 7B63     		str	r3, [r7, #52]
 1523 07e8 FB6C     		ldr	r3, [r7, #76]
 1524 07ea 5B6A     		ldr	r3, [r3, #36]
 1525 07ec 3A6B     		ldr	r2, [r7, #48]
 1526 07ee D31A     		subs	r3, r2, r3
 1527 07f0 3B63     		str	r3, [r7, #48]
 1528 07f2 3A6B     		ldr	r2, [r7, #48]
 1529 07f4 7B6B     		ldr	r3, [r7, #52]
 1530 07f6 D31A     		subs	r3, r2, r3
 1531 07f8 3B63     		str	r3, [r7, #48]
 1532 07fa 7B6B     		ldr	r3, [r7, #52]
 1533 07fc 4FEA8323 		lsl	r3, r3, #10
 1534 0800 3A6B     		ldr	r2, [r7, #48]
 1535 0802 82EA0303 		eor	r3, r2, r3
 1536 0806 3B63     		str	r3, [r7, #48]
 1537 0808 FB6C     		ldr	r3, [r7, #76]
 1538 080a 5A6A     		ldr	r2, [r3, #36]
 1539 080c 7B6B     		ldr	r3, [r7, #52]
 1540 080e D21A     		subs	r2, r2, r3
 1541 0810 FB6C     		ldr	r3, [r7, #76]
 1542 0812 5A62     		str	r2, [r3, #36]
 1543 0814 FB6C     		ldr	r3, [r7, #76]
 1544 0816 5A6A     		ldr	r2, [r3, #36]
 1545 0818 3B6B     		ldr	r3, [r7, #48]
 1546 081a D21A     		subs	r2, r2, r3
 1547 081c FB6C     		ldr	r3, [r7, #76]
 1548 081e 5A62     		str	r2, [r3, #36]
 1549 0820 FB6C     		ldr	r3, [r7, #76]
 1550 0822 5A6A     		ldr	r2, [r3, #36]
 1551 0824 3B6B     		ldr	r3, [r7, #48]
 1552 0826 4FEAD333 		lsr	r3, r3, #15
 1553 082a 5A40     		eors	r2, r2, r3
 1554 082c FB6C     		ldr	r3, [r7, #76]
 1555 082e 5A62     		str	r2, [r3, #36]
 1556 0830 BB6A     		ldr	r3, [r7, #40]
 1557 0832 03F10C03 		add	r3, r3, #12
 1558 0836 BB62     		str	r3, [r7, #40]
 1559 0838 FB6A     		ldr	r3, [r7, #44]
 1560 083a A3F10C03 		sub	r3, r3, #12
 1561 083e FB62     		str	r3, [r7, #44]
 1562              	.L29:
 1563              		.loc 1 31 0 discriminator 8
 1564 0840 FB6A     		ldr	r3, [r7, #44]
 1565 0842 0B2B     		cmp	r3, #11
 1566 0844 3FF6FEAE 		bhi	.L30
 1567              		.loc 1 31 0 discriminator 10
 1568 0848 FB6C     		ldr	r3, [r7, #76]
 1569 084a 5B6A     		ldr	r3, [r3, #36]
 1570 084c 03F10402 		add	r2, r3, #4
 1571 0850 FB6C     		ldr	r3, [r7, #76]
 1572 0852 5A62     		str	r2, [r3, #36]
 1573 0854 FB6A     		ldr	r3, [r7, #44]
 1574 0856 03F1FF33 		add	r3, r3, #-1
 1575 085a 0A2B     		cmp	r3, #10
 1576 085c 7BD8     		bhi	.L31
 1577 085e 01A2     		adr	r2, .L43
 1578 0860 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1579              		.align	2
 1580              	.L43:
 1581 0864 4D090000 		.word	.L32+1
 1582 0868 3B090000 		.word	.L33+1
 1583 086c 29090000 		.word	.L34+1
 1584 0870 17090000 		.word	.L35+1
 1585 0874 09090000 		.word	.L36+1
 1586 0878 F7080000 		.word	.L37+1
 1587 087c E5080000 		.word	.L38+1
 1588 0880 D3080000 		.word	.L39+1
 1589 0884 BD080000 		.word	.L40+1
 1590 0888 A7080000 		.word	.L41+1
 1591 088c 91080000 		.word	.L42+1
 1592              	.L42:
 1593              		.loc 1 31 0 discriminator 22
 1594 0890 FB6C     		ldr	r3, [r7, #76]
 1595 0892 5A6A     		ldr	r2, [r3, #36]
 1596 0894 BB6A     		ldr	r3, [r7, #40]
 1597 0896 03F10A03 		add	r3, r3, #10
 1598 089a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1599 089c 4FEA0363 		lsl	r3, r3, #24
 1600 08a0 D218     		adds	r2, r2, r3
 1601 08a2 FB6C     		ldr	r3, [r7, #76]
 1602 08a4 5A62     		str	r2, [r3, #36]
 1603              	.L41:
 1604              		.loc 1 31 0 discriminator 21
 1605 08a6 FB6C     		ldr	r3, [r7, #76]
 1606 08a8 5A6A     		ldr	r2, [r3, #36]
 1607 08aa BB6A     		ldr	r3, [r7, #40]
 1608 08ac 03F10903 		add	r3, r3, #9
 1609 08b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1610 08b2 4FEA0343 		lsl	r3, r3, #16
 1611 08b6 D218     		adds	r2, r2, r3
 1612 08b8 FB6C     		ldr	r3, [r7, #76]
 1613 08ba 5A62     		str	r2, [r3, #36]
 1614              	.L40:
 1615              		.loc 1 31 0 discriminator 20
 1616 08bc FB6C     		ldr	r3, [r7, #76]
 1617 08be 5A6A     		ldr	r2, [r3, #36]
 1618 08c0 BB6A     		ldr	r3, [r7, #40]
 1619 08c2 03F10803 		add	r3, r3, #8
 1620 08c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1621 08c8 4FEA0323 		lsl	r3, r3, #8
 1622 08cc D218     		adds	r2, r2, r3
 1623 08ce FB6C     		ldr	r3, [r7, #76]
 1624 08d0 5A62     		str	r2, [r3, #36]
 1625              	.L39:
 1626              		.loc 1 31 0 discriminator 19
 1627 08d2 BB6A     		ldr	r3, [r7, #40]
 1628 08d4 03F10703 		add	r3, r3, #7
 1629 08d8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1630 08da 4FEA0363 		lsl	r3, r3, #24
 1631 08de 3A6B     		ldr	r2, [r7, #48]
 1632 08e0 D318     		adds	r3, r2, r3
 1633 08e2 3B63     		str	r3, [r7, #48]
 1634              	.L38:
 1635              		.loc 1 31 0 discriminator 18
 1636 08e4 BB6A     		ldr	r3, [r7, #40]
 1637 08e6 03F10603 		add	r3, r3, #6
 1638 08ea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1639 08ec 4FEA0343 		lsl	r3, r3, #16
 1640 08f0 3A6B     		ldr	r2, [r7, #48]
 1641 08f2 D318     		adds	r3, r2, r3
 1642 08f4 3B63     		str	r3, [r7, #48]
 1643              	.L37:
 1644              		.loc 1 31 0 discriminator 17
 1645 08f6 BB6A     		ldr	r3, [r7, #40]
 1646 08f8 03F10503 		add	r3, r3, #5
 1647 08fc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1648 08fe 4FEA0323 		lsl	r3, r3, #8
 1649 0902 3A6B     		ldr	r2, [r7, #48]
 1650 0904 D318     		adds	r3, r2, r3
 1651 0906 3B63     		str	r3, [r7, #48]
 1652              	.L36:
 1653              		.loc 1 31 0 discriminator 16
 1654 0908 BB6A     		ldr	r3, [r7, #40]
 1655 090a 03F10403 		add	r3, r3, #4
 1656 090e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1657 0910 3A6B     		ldr	r2, [r7, #48]
 1658 0912 D318     		adds	r3, r2, r3
 1659 0914 3B63     		str	r3, [r7, #48]
 1660              	.L35:
 1661              		.loc 1 31 0 discriminator 15
 1662 0916 BB6A     		ldr	r3, [r7, #40]
 1663 0918 03F10303 		add	r3, r3, #3
 1664 091c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1665 091e 4FEA0363 		lsl	r3, r3, #24
 1666 0922 7A6B     		ldr	r2, [r7, #52]
 1667 0924 D318     		adds	r3, r2, r3
 1668 0926 7B63     		str	r3, [r7, #52]
 1669              	.L34:
 1670              		.loc 1 31 0 discriminator 14
 1671 0928 BB6A     		ldr	r3, [r7, #40]
 1672 092a 03F10203 		add	r3, r3, #2
 1673 092e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1674 0930 4FEA0343 		lsl	r3, r3, #16
 1675 0934 7A6B     		ldr	r2, [r7, #52]
 1676 0936 D318     		adds	r3, r2, r3
 1677 0938 7B63     		str	r3, [r7, #52]
 1678              	.L33:
 1679              		.loc 1 31 0 discriminator 13
 1680 093a BB6A     		ldr	r3, [r7, #40]
 1681 093c 03F10103 		add	r3, r3, #1
 1682 0940 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1683 0942 4FEA0323 		lsl	r3, r3, #8
 1684 0946 7A6B     		ldr	r2, [r7, #52]
 1685 0948 D318     		adds	r3, r2, r3
 1686 094a 7B63     		str	r3, [r7, #52]
 1687              	.L32:
 1688              		.loc 1 31 0 discriminator 12
 1689 094c BB6A     		ldr	r3, [r7, #40]
 1690 094e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1691 0950 7A6B     		ldr	r2, [r7, #52]
 1692 0952 D318     		adds	r3, r2, r3
 1693 0954 7B63     		str	r3, [r7, #52]
 1694              	.L31:
 1695              		.loc 1 31 0 discriminator 11
 1696 0956 7A6B     		ldr	r2, [r7, #52]
 1697 0958 3B6B     		ldr	r3, [r7, #48]
 1698 095a D31A     		subs	r3, r2, r3
 1699 095c 7B63     		str	r3, [r7, #52]
 1700 095e FB6C     		ldr	r3, [r7, #76]
 1701 0960 5B6A     		ldr	r3, [r3, #36]
 1702 0962 7A6B     		ldr	r2, [r7, #52]
 1703 0964 D31A     		subs	r3, r2, r3
 1704 0966 7B63     		str	r3, [r7, #52]
 1705 0968 FB6C     		ldr	r3, [r7, #76]
 1706 096a 5B6A     		ldr	r3, [r3, #36]
 1707 096c 4FEA5333 		lsr	r3, r3, #13
 1708 0970 7A6B     		ldr	r2, [r7, #52]
 1709 0972 82EA0303 		eor	r3, r2, r3
 1710 0976 7B63     		str	r3, [r7, #52]
 1711 0978 FB6C     		ldr	r3, [r7, #76]
 1712 097a 5B6A     		ldr	r3, [r3, #36]
 1713 097c 3A6B     		ldr	r2, [r7, #48]
 1714 097e D31A     		subs	r3, r2, r3
 1715 0980 3B63     		str	r3, [r7, #48]
 1716 0982 3A6B     		ldr	r2, [r7, #48]
 1717 0984 7B6B     		ldr	r3, [r7, #52]
 1718 0986 D31A     		subs	r3, r2, r3
 1719 0988 3B63     		str	r3, [r7, #48]
 1720 098a 7B6B     		ldr	r3, [r7, #52]
 1721 098c 4FEA0323 		lsl	r3, r3, #8
 1722 0990 3A6B     		ldr	r2, [r7, #48]
 1723 0992 82EA0303 		eor	r3, r2, r3
 1724 0996 3B63     		str	r3, [r7, #48]
 1725 0998 FB6C     		ldr	r3, [r7, #76]
 1726 099a 5A6A     		ldr	r2, [r3, #36]
 1727 099c 7B6B     		ldr	r3, [r7, #52]
 1728 099e D21A     		subs	r2, r2, r3
 1729 09a0 FB6C     		ldr	r3, [r7, #76]
 1730 09a2 5A62     		str	r2, [r3, #36]
 1731 09a4 FB6C     		ldr	r3, [r7, #76]
 1732 09a6 5A6A     		ldr	r2, [r3, #36]
 1733 09a8 3B6B     		ldr	r3, [r7, #48]
 1734 09aa D21A     		subs	r2, r2, r3
 1735 09ac FB6C     		ldr	r3, [r7, #76]
 1736 09ae 5A62     		str	r2, [r3, #36]
 1737 09b0 FB6C     		ldr	r3, [r7, #76]
 1738 09b2 5A6A     		ldr	r2, [r3, #36]
 1739 09b4 3B6B     		ldr	r3, [r7, #48]
 1740 09b6 4FEA5333 		lsr	r3, r3, #13
 1741 09ba 5A40     		eors	r2, r2, r3
 1742 09bc FB6C     		ldr	r3, [r7, #76]
 1743 09be 5A62     		str	r2, [r3, #36]
 1744 09c0 7A6B     		ldr	r2, [r7, #52]
 1745 09c2 3B6B     		ldr	r3, [r7, #48]
 1746 09c4 D31A     		subs	r3, r2, r3
 1747 09c6 7B63     		str	r3, [r7, #52]
 1748 09c8 FB6C     		ldr	r3, [r7, #76]
 1749 09ca 5B6A     		ldr	r3, [r3, #36]
 1750 09cc 7A6B     		ldr	r2, [r7, #52]
 1751 09ce D31A     		subs	r3, r2, r3
 1752 09d0 7B63     		str	r3, [r7, #52]
 1753 09d2 FB6C     		ldr	r3, [r7, #76]
 1754 09d4 5B6A     		ldr	r3, [r3, #36]
 1755 09d6 4FEA1333 		lsr	r3, r3, #12
 1756 09da 7A6B     		ldr	r2, [r7, #52]
 1757 09dc 82EA0303 		eor	r3, r2, r3
 1758 09e0 7B63     		str	r3, [r7, #52]
 1759 09e2 FB6C     		ldr	r3, [r7, #76]
 1760 09e4 5B6A     		ldr	r3, [r3, #36]
 1761 09e6 3A6B     		ldr	r2, [r7, #48]
 1762 09e8 D31A     		subs	r3, r2, r3
 1763 09ea 3B63     		str	r3, [r7, #48]
 1764 09ec 3A6B     		ldr	r2, [r7, #48]
 1765 09ee 7B6B     		ldr	r3, [r7, #52]
 1766 09f0 D31A     		subs	r3, r2, r3
 1767 09f2 3B63     		str	r3, [r7, #48]
 1768 09f4 7B6B     		ldr	r3, [r7, #52]
 1769 09f6 4FEA0343 		lsl	r3, r3, #16
 1770 09fa 3A6B     		ldr	r2, [r7, #48]
 1771 09fc 82EA0303 		eor	r3, r2, r3
 1772 0a00 3B63     		str	r3, [r7, #48]
 1773 0a02 FB6C     		ldr	r3, [r7, #76]
 1774 0a04 5A6A     		ldr	r2, [r3, #36]
 1775 0a06 7B6B     		ldr	r3, [r7, #52]
 1776 0a08 D21A     		subs	r2, r2, r3
 1777 0a0a FB6C     		ldr	r3, [r7, #76]
 1778 0a0c 5A62     		str	r2, [r3, #36]
 1779 0a0e FB6C     		ldr	r3, [r7, #76]
 1780 0a10 5A6A     		ldr	r2, [r3, #36]
 1781 0a12 3B6B     		ldr	r3, [r7, #48]
 1782 0a14 D21A     		subs	r2, r2, r3
 1783 0a16 FB6C     		ldr	r3, [r7, #76]
 1784 0a18 5A62     		str	r2, [r3, #36]
 1785 0a1a FB6C     		ldr	r3, [r7, #76]
 1786 0a1c 5A6A     		ldr	r2, [r3, #36]
 1787 0a1e 3B6B     		ldr	r3, [r7, #48]
 1788 0a20 4FEA5313 		lsr	r3, r3, #5
 1789 0a24 5A40     		eors	r2, r2, r3
 1790 0a26 FB6C     		ldr	r3, [r7, #76]
 1791 0a28 5A62     		str	r2, [r3, #36]
 1792 0a2a 7A6B     		ldr	r2, [r7, #52]
 1793 0a2c 3B6B     		ldr	r3, [r7, #48]
 1794 0a2e D31A     		subs	r3, r2, r3
 1795 0a30 7B63     		str	r3, [r7, #52]
 1796 0a32 FB6C     		ldr	r3, [r7, #76]
 1797 0a34 5B6A     		ldr	r3, [r3, #36]
 1798 0a36 7A6B     		ldr	r2, [r7, #52]
 1799 0a38 D31A     		subs	r3, r2, r3
 1800 0a3a 7B63     		str	r3, [r7, #52]
 1801 0a3c FB6C     		ldr	r3, [r7, #76]
 1802 0a3e 5B6A     		ldr	r3, [r3, #36]
 1803 0a40 4FEAD303 		lsr	r3, r3, #3
 1804 0a44 7A6B     		ldr	r2, [r7, #52]
 1805 0a46 82EA0303 		eor	r3, r2, r3
 1806 0a4a 7B63     		str	r3, [r7, #52]
 1807 0a4c FB6C     		ldr	r3, [r7, #76]
 1808 0a4e 5B6A     		ldr	r3, [r3, #36]
 1809 0a50 3A6B     		ldr	r2, [r7, #48]
 1810 0a52 D31A     		subs	r3, r2, r3
 1811 0a54 3B63     		str	r3, [r7, #48]
 1812 0a56 3A6B     		ldr	r2, [r7, #48]
 1813 0a58 7B6B     		ldr	r3, [r7, #52]
 1814 0a5a D31A     		subs	r3, r2, r3
 1815 0a5c 3B63     		str	r3, [r7, #48]
 1816 0a5e 7B6B     		ldr	r3, [r7, #52]
 1817 0a60 4FEA8323 		lsl	r3, r3, #10
 1818 0a64 3A6B     		ldr	r2, [r7, #48]
 1819 0a66 82EA0303 		eor	r3, r2, r3
 1820 0a6a 3B63     		str	r3, [r7, #48]
 1821 0a6c FB6C     		ldr	r3, [r7, #76]
 1822 0a6e 5A6A     		ldr	r2, [r3, #36]
 1823 0a70 7B6B     		ldr	r3, [r7, #52]
 1824 0a72 D21A     		subs	r2, r2, r3
 1825 0a74 FB6C     		ldr	r3, [r7, #76]
 1826 0a76 5A62     		str	r2, [r3, #36]
 1827 0a78 FB6C     		ldr	r3, [r7, #76]
 1828 0a7a 5A6A     		ldr	r2, [r3, #36]
 1829 0a7c 3B6B     		ldr	r3, [r7, #48]
 1830 0a7e D21A     		subs	r2, r2, r3
 1831 0a80 FB6C     		ldr	r3, [r7, #76]
 1832 0a82 5A62     		str	r2, [r3, #36]
 1833 0a84 FB6C     		ldr	r3, [r7, #76]
 1834 0a86 5A6A     		ldr	r2, [r3, #36]
 1835 0a88 3B6B     		ldr	r3, [r7, #48]
 1836 0a8a 4FEAD333 		lsr	r3, r3, #15
 1837 0a8e 5A40     		eors	r2, r2, r3
 1838 0a90 FB6C     		ldr	r3, [r7, #76]
 1839 0a92 5A62     		str	r2, [r3, #36]
 1840 0a94 FB6C     		ldr	r3, [r7, #76]
 1841 0a96 5A6A     		ldr	r2, [r3, #36]
 1842 0a98 714B     		ldr	r3, .L60
 1843 0a9a 1B68     		ldr	r3, [r3, #0]
 1844 0a9c 9B68     		ldr	r3, [r3, #8]
 1845 0a9e 5B68     		ldr	r3, [r3, #4]
 1846 0aa0 03F1FF33 		add	r3, r3, #-1
 1847 0aa4 02EA0303 		and	r3, r2, r3
 1848 0aa8 BB61     		str	r3, [r7, #24]
 1849              	.LBE5:
 1850 0aaa 6D4B     		ldr	r3, .L60
 1851 0aac 1B68     		ldr	r3, [r3, #0]
 1852 0aae 9B68     		ldr	r3, [r3, #8]
 1853 0ab0 1968     		ldr	r1, [r3, #0]
 1854 0ab2 BA69     		ldr	r2, [r7, #24]
 1855 0ab4 1346     		mov	r3, r2
 1856 0ab6 4FEA4303 		lsl	r3, r3, #1
 1857 0aba 9B18     		adds	r3, r3, r2
 1858 0abc 4FEA8303 		lsl	r3, r3, #2
 1859 0ac0 CB18     		adds	r3, r1, r3
 1860 0ac2 5A68     		ldr	r2, [r3, #4]
 1861 0ac4 02F10102 		add	r2, r2, #1
 1862 0ac8 5A60     		str	r2, [r3, #4]
 1863 0aca 654B     		ldr	r3, .L60
 1864 0acc 1B68     		ldr	r3, [r3, #0]
 1865 0ace 9B68     		ldr	r3, [r3, #8]
 1866 0ad0 1968     		ldr	r1, [r3, #0]
 1867 0ad2 BA69     		ldr	r2, [r7, #24]
 1868 0ad4 1346     		mov	r3, r2
 1869 0ad6 4FEA4303 		lsl	r3, r3, #1
 1870 0ada 9B18     		adds	r3, r3, r2
 1871 0adc 4FEA8303 		lsl	r3, r3, #2
 1872 0ae0 CB18     		adds	r3, r1, r3
 1873 0ae2 1A68     		ldr	r2, [r3, #0]
 1874 0ae4 FB6C     		ldr	r3, [r7, #76]
 1875 0ae6 9A61     		str	r2, [r3, #24]
 1876 0ae8 FB6C     		ldr	r3, [r7, #76]
 1877 0aea 4FF00002 		mov	r2, #0
 1878 0aee 5A61     		str	r2, [r3, #20]
 1879 0af0 5B4B     		ldr	r3, .L60
 1880 0af2 1B68     		ldr	r3, [r3, #0]
 1881 0af4 9B68     		ldr	r3, [r3, #8]
 1882 0af6 1968     		ldr	r1, [r3, #0]
 1883 0af8 BA69     		ldr	r2, [r7, #24]
 1884 0afa 1346     		mov	r3, r2
 1885 0afc 4FEA4303 		lsl	r3, r3, #1
 1886 0b00 9B18     		adds	r3, r3, r2
 1887 0b02 4FEA8303 		lsl	r3, r3, #2
 1888 0b06 CB18     		adds	r3, r1, r3
 1889 0b08 1B68     		ldr	r3, [r3, #0]
 1890 0b0a 002B     		cmp	r3, #0
 1891 0b0c 10D0     		beq	.L44
 1892              		.loc 1 31 0 discriminator 23
 1893 0b0e 544B     		ldr	r3, .L60
 1894 0b10 1B68     		ldr	r3, [r3, #0]
 1895 0b12 9B68     		ldr	r3, [r3, #8]
 1896 0b14 1968     		ldr	r1, [r3, #0]
 1897 0b16 BA69     		ldr	r2, [r7, #24]
 1898 0b18 1346     		mov	r3, r2
 1899 0b1a 4FEA4303 		lsl	r3, r3, #1
 1900 0b1e 9B18     		adds	r3, r3, r2
 1901 0b20 4FEA8303 		lsl	r3, r3, #2
 1902 0b24 CB18     		adds	r3, r1, r3
 1903 0b26 1B68     		ldr	r3, [r3, #0]
 1904 0b28 FA6C     		ldr	r2, [r7, #76]
 1905 0b2a 02F10802 		add	r2, r2, #8
 1906 0b2e DA60     		str	r2, [r3, #12]
 1907              	.L44:
 1908              		.loc 1 31 0 discriminator 24
 1909 0b30 4B4B     		ldr	r3, .L60
 1910 0b32 1B68     		ldr	r3, [r3, #0]
 1911 0b34 9B68     		ldr	r3, [r3, #8]
 1912 0b36 1968     		ldr	r1, [r3, #0]
 1913 0b38 BA69     		ldr	r2, [r7, #24]
 1914 0b3a 1346     		mov	r3, r2
 1915 0b3c 4FEA4303 		lsl	r3, r3, #1
 1916 0b40 9B18     		adds	r3, r3, r2
 1917 0b42 4FEA8303 		lsl	r3, r3, #2
 1918 0b46 CB18     		adds	r3, r1, r3
 1919 0b48 FA6C     		ldr	r2, [r7, #76]
 1920 0b4a 02F10802 		add	r2, r2, #8
 1921 0b4e 1A60     		str	r2, [r3, #0]
 1922 0b50 434B     		ldr	r3, .L60
 1923 0b52 1B68     		ldr	r3, [r3, #0]
 1924 0b54 9B68     		ldr	r3, [r3, #8]
 1925 0b56 1968     		ldr	r1, [r3, #0]
 1926 0b58 BA69     		ldr	r2, [r7, #24]
 1927 0b5a 1346     		mov	r3, r2
 1928 0b5c 4FEA4303 		lsl	r3, r3, #1
 1929 0b60 9B18     		adds	r3, r3, r2
 1930 0b62 4FEA8303 		lsl	r3, r3, #2
 1931 0b66 CB18     		adds	r3, r1, r3
 1932 0b68 5968     		ldr	r1, [r3, #4]
 1933 0b6a 3D4B     		ldr	r3, .L60
 1934 0b6c 1B68     		ldr	r3, [r3, #0]
 1935 0b6e 9B68     		ldr	r3, [r3, #8]
 1936 0b70 1868     		ldr	r0, [r3, #0]
 1937 0b72 BA69     		ldr	r2, [r7, #24]
 1938 0b74 1346     		mov	r3, r2
 1939 0b76 4FEA4303 		lsl	r3, r3, #1
 1940 0b7a 9B18     		adds	r3, r3, r2
 1941 0b7c 4FEA8303 		lsl	r3, r3, #2
 1942 0b80 C318     		adds	r3, r0, r3
 1943 0b82 9B68     		ldr	r3, [r3, #8]
 1944 0b84 03F10102 		add	r2, r3, #1
 1945 0b88 1346     		mov	r3, r2
 1946 0b8a 4FEA8303 		lsl	r3, r3, #2
 1947 0b8e 9B18     		adds	r3, r3, r2
 1948 0b90 4FEA4303 		lsl	r3, r3, #1
 1949 0b94 9942     		cmp	r1, r3
 1950 0b96 C0F0F380 		bcc	.L24
 1951              		.loc 1 31 0 discriminator 25
 1952 0b9a FB6C     		ldr	r3, [r7, #76]
 1953 0b9c 9B68     		ldr	r3, [r3, #8]
 1954 0b9e 5B6A     		ldr	r3, [r3, #36]
 1955 0ba0 012B     		cmp	r3, #1
 1956 0ba2 00F0ED80 		beq	.L24
 1957              	.LBB6:
 1958              		.loc 1 31 0 discriminator 26
 1959 0ba6 FB6C     		ldr	r3, [r7, #76]
 1960 0ba8 9B68     		ldr	r3, [r3, #8]
 1961 0baa 5A68     		ldr	r2, [r3, #4]
 1962 0bac 1346     		mov	r3, r2
 1963 0bae 4FEA4303 		lsl	r3, r3, #1
 1964 0bb2 9B18     		adds	r3, r3, r2
 1965 0bb4 4FEAC303 		lsl	r3, r3, #3
 1966 0bb8 1846     		mov	r0, r3
 1967 0bba FFF7FEFF 		bl	malloc
 1968 0bbe 0346     		mov	r3, r0
 1969 0bc0 7B61     		str	r3, [r7, #20]
 1970 0bc2 7B69     		ldr	r3, [r7, #20]
 1971 0bc4 002B     		cmp	r3, #0
 1972 0bc6 03D1     		bne	.L45
 1973              		.loc 1 31 0 discriminator 27
 1974 0bc8 4FF0FF30 		mov	r0, #-1
 1975 0bcc FFF7FEFF 		bl	exit
 1976              	.L45:
 1977              		.loc 1 31 0 discriminator 28
 1978 0bd0 FB6C     		ldr	r3, [r7, #76]
 1979 0bd2 9B68     		ldr	r3, [r3, #8]
 1980 0bd4 5A68     		ldr	r2, [r3, #4]
 1981 0bd6 1346     		mov	r3, r2
 1982 0bd8 4FEA4303 		lsl	r3, r3, #1
 1983 0bdc 9B18     		adds	r3, r3, r2
 1984 0bde 4FEAC303 		lsl	r3, r3, #3
 1985 0be2 7869     		ldr	r0, [r7, #20]
 1986 0be4 4FF00001 		mov	r1, #0
 1987 0be8 1A46     		mov	r2, r3
 1988 0bea FFF7FEFF 		bl	memset
 1989 0bee FB6C     		ldr	r3, [r7, #76]
 1990 0bf0 9A68     		ldr	r2, [r3, #8]
 1991 0bf2 FB6C     		ldr	r3, [r7, #76]
 1992 0bf4 9B68     		ldr	r3, [r3, #8]
 1993 0bf6 D968     		ldr	r1, [r3, #12]
 1994 0bf8 FB6C     		ldr	r3, [r7, #76]
 1995 0bfa 9B68     		ldr	r3, [r3, #8]
 1996 0bfc 9B68     		ldr	r3, [r3, #8]
 1997 0bfe 03F10103 		add	r3, r3, #1
 1998 0c02 21FA03F1 		lsr	r1, r1, r3
 1999 0c06 FB6C     		ldr	r3, [r7, #76]
 2000 0c08 9B68     		ldr	r3, [r3, #8]
 2001 0c0a D868     		ldr	r0, [r3, #12]
 2002 0c0c FB6C     		ldr	r3, [r7, #76]
 2003 0c0e 9B68     		ldr	r3, [r3, #8]
 2004 0c10 5B68     		ldr	r3, [r3, #4]
 2005 0c12 4FEA4303 		lsl	r3, r3, #1
 2006 0c16 03F1FF33 		add	r3, r3, #-1
 2007 0c1a 00EA0303 		and	r3, r0, r3
 2008 0c1e 002B     		cmp	r3, #0
 2009 0c20 02D0     		beq	.L46
 2010              		.loc 1 31 0 discriminator 29
 2011 0c22 4FF00103 		mov	r3, #1
 2012 0c26 01E0     		b	.L47
 2013              	.L46:
 2014              		.loc 1 31 0 discriminator 30
 2015 0c28 4FF00003 		mov	r3, #0
 2016              	.L47:
 2017              		.loc 1 31 0 discriminator 31
 2018 0c2c CB18     		adds	r3, r1, r3
 2019 0c2e 9361     		str	r3, [r2, #24]
 2020 0c30 FB6C     		ldr	r3, [r7, #76]
 2021 0c32 9B68     		ldr	r3, [r3, #8]
 2022 0c34 4FF00002 		mov	r2, #0
 2023 0c38 DA61     		str	r2, [r3, #28]
 2024 0c3a 4FF00003 		mov	r3, #0
 2025 0c3e 7B62     		str	r3, [r7, #36]
 2026 0c40 61E0     		b	.L48
 2027              	.L53:
 2028              		.loc 1 31 0 discriminator 40
 2029 0c42 FB6C     		ldr	r3, [r7, #76]
 2030 0c44 9B68     		ldr	r3, [r3, #8]
 2031 0c46 1968     		ldr	r1, [r3, #0]
 2032 0c48 7A6A     		ldr	r2, [r7, #36]
 2033 0c4a 1346     		mov	r3, r2
 2034 0c4c 4FEA4303 		lsl	r3, r3, #1
 2035 0c50 9B18     		adds	r3, r3, r2
 2036 0c52 4FEA8303 		lsl	r3, r3, #2
 2037 0c56 CB18     		adds	r3, r1, r3
 2038 0c58 1B68     		ldr	r3, [r3, #0]
 2039 0c5a 3B62     		str	r3, [r7, #32]
 2040 0c5c 4CE0     		b	.L49
 2041              	.L61:
 2042 0c5e 00BF     		.align	2
 2043              	.L60:
 2044 0c60 00000000 		.word	users
 2045              	.L52:
 2046              		.loc 1 31 0 discriminator 38
 2047 0c64 3B6A     		ldr	r3, [r7, #32]
 2048 0c66 1B69     		ldr	r3, [r3, #16]
 2049 0c68 3B61     		str	r3, [r7, #16]
 2050 0c6a 3B6A     		ldr	r3, [r7, #32]
 2051 0c6c DA69     		ldr	r2, [r3, #28]
 2052 0c6e FB6C     		ldr	r3, [r7, #76]
 2053 0c70 9B68     		ldr	r3, [r3, #8]
 2054 0c72 5B68     		ldr	r3, [r3, #4]
 2055 0c74 4FEA4303 		lsl	r3, r3, #1
 2056 0c78 03F1FF33 		add	r3, r3, #-1
 2057 0c7c 02EA0303 		and	r3, r2, r3
 2058 0c80 FB60     		str	r3, [r7, #12]
 2059 0c82 FA68     		ldr	r2, [r7, #12]
 2060 0c84 1346     		mov	r3, r2
 2061 0c86 4FEA4303 		lsl	r3, r3, #1
 2062 0c8a 9B18     		adds	r3, r3, r2
 2063 0c8c 4FEA8303 		lsl	r3, r3, #2
 2064 0c90 7A69     		ldr	r2, [r7, #20]
 2065 0c92 D318     		adds	r3, r2, r3
 2066 0c94 BB60     		str	r3, [r7, #8]
 2067 0c96 BB68     		ldr	r3, [r7, #8]
 2068 0c98 5B68     		ldr	r3, [r3, #4]
 2069 0c9a 03F10102 		add	r2, r3, #1
 2070 0c9e BB68     		ldr	r3, [r7, #8]
 2071 0ca0 5A60     		str	r2, [r3, #4]
 2072 0ca2 BB68     		ldr	r3, [r7, #8]
 2073 0ca4 5A68     		ldr	r2, [r3, #4]
 2074 0ca6 FB6C     		ldr	r3, [r7, #76]
 2075 0ca8 9B68     		ldr	r3, [r3, #8]
 2076 0caa 9B69     		ldr	r3, [r3, #24]
 2077 0cac 9A42     		cmp	r2, r3
 2078 0cae 0ED9     		bls	.L50
 2079              		.loc 1 31 0 discriminator 34
 2080 0cb0 FB6C     		ldr	r3, [r7, #76]
 2081 0cb2 9B68     		ldr	r3, [r3, #8]
 2082 0cb4 DA69     		ldr	r2, [r3, #28]
 2083 0cb6 02F10102 		add	r2, r2, #1
 2084 0cba DA61     		str	r2, [r3, #28]
 2085 0cbc BB68     		ldr	r3, [r7, #8]
 2086 0cbe 5A68     		ldr	r2, [r3, #4]
 2087 0cc0 FB6C     		ldr	r3, [r7, #76]
 2088 0cc2 9B68     		ldr	r3, [r3, #8]
 2089 0cc4 9B69     		ldr	r3, [r3, #24]
 2090 0cc6 B2FBF3F2 		udiv	r2, r2, r3
 2091 0cca BB68     		ldr	r3, [r7, #8]
 2092 0ccc 9A60     		str	r2, [r3, #8]
 2093              	.L50:
 2094              		.loc 1 31 0 discriminator 35
 2095 0cce 3B6A     		ldr	r3, [r7, #32]
 2096 0cd0 4FF00002 		mov	r2, #0
 2097 0cd4 DA60     		str	r2, [r3, #12]
 2098 0cd6 BB68     		ldr	r3, [r7, #8]
 2099 0cd8 1A68     		ldr	r2, [r3, #0]
 2100 0cda 3B6A     		ldr	r3, [r7, #32]
 2101 0cdc 1A61     		str	r2, [r3, #16]
 2102 0cde BB68     		ldr	r3, [r7, #8]
 2103 0ce0 1B68     		ldr	r3, [r3, #0]
 2104 0ce2 002B     		cmp	r3, #0
 2105 0ce4 03D0     		beq	.L51
 2106              		.loc 1 31 0 discriminator 36
 2107 0ce6 BB68     		ldr	r3, [r7, #8]
 2108 0ce8 1B68     		ldr	r3, [r3, #0]
 2109 0cea 3A6A     		ldr	r2, [r7, #32]
 2110 0cec DA60     		str	r2, [r3, #12]
 2111              	.L51:
 2112              		.loc 1 31 0 discriminator 37
 2113 0cee BB68     		ldr	r3, [r7, #8]
 2114 0cf0 3A6A     		ldr	r2, [r7, #32]
 2115 0cf2 1A60     		str	r2, [r3, #0]
 2116 0cf4 3B69     		ldr	r3, [r7, #16]
 2117 0cf6 3B62     		str	r3, [r7, #32]
 2118              	.L49:
 2119              		.loc 1 31 0 discriminator 33
 2120 0cf8 3B6A     		ldr	r3, [r7, #32]
 2121 0cfa 002B     		cmp	r3, #0
 2122 0cfc B2D1     		bne	.L52
 2123              		.loc 1 31 0 discriminator 39
 2124 0cfe 7B6A     		ldr	r3, [r7, #36]
 2125 0d00 03F10103 		add	r3, r3, #1
 2126 0d04 7B62     		str	r3, [r7, #36]
 2127              	.L48:
 2128              		.loc 1 31 0 discriminator 32
 2129 0d06 FB6C     		ldr	r3, [r7, #76]
 2130 0d08 9B68     		ldr	r3, [r3, #8]
 2131 0d0a 5A68     		ldr	r2, [r3, #4]
 2132 0d0c 7B6A     		ldr	r3, [r7, #36]
 2133 0d0e 9A42     		cmp	r2, r3
 2134 0d10 97D8     		bhi	.L53
 2135              		.loc 1 31 0 discriminator 41
 2136 0d12 FB6C     		ldr	r3, [r7, #76]
 2137 0d14 9B68     		ldr	r3, [r3, #8]
 2138 0d16 1B68     		ldr	r3, [r3, #0]
 2139 0d18 1846     		mov	r0, r3
 2140 0d1a FFF7FEFF 		bl	free
 2141 0d1e FB6C     		ldr	r3, [r7, #76]
 2142 0d20 9B68     		ldr	r3, [r3, #8]
 2143 0d22 FA6C     		ldr	r2, [r7, #76]
 2144 0d24 9268     		ldr	r2, [r2, #8]
 2145 0d26 5268     		ldr	r2, [r2, #4]
 2146 0d28 4FEA4202 		lsl	r2, r2, #1
 2147 0d2c 5A60     		str	r2, [r3, #4]
 2148 0d2e FB6C     		ldr	r3, [r7, #76]
 2149 0d30 9B68     		ldr	r3, [r3, #8]
 2150 0d32 9A68     		ldr	r2, [r3, #8]
 2151 0d34 02F10102 		add	r2, r2, #1
 2152 0d38 9A60     		str	r2, [r3, #8]
 2153 0d3a FB6C     		ldr	r3, [r7, #76]
 2154 0d3c 9B68     		ldr	r3, [r3, #8]
 2155 0d3e 7A69     		ldr	r2, [r7, #20]
 2156 0d40 1A60     		str	r2, [r3, #0]
 2157 0d42 FB6C     		ldr	r3, [r7, #76]
 2158 0d44 9A68     		ldr	r2, [r3, #8]
 2159 0d46 FB6C     		ldr	r3, [r7, #76]
 2160 0d48 9B68     		ldr	r3, [r3, #8]
 2161 0d4a D969     		ldr	r1, [r3, #28]
 2162 0d4c FB6C     		ldr	r3, [r7, #76]
 2163 0d4e 9B68     		ldr	r3, [r3, #8]
 2164 0d50 DB68     		ldr	r3, [r3, #12]
 2165 0d52 4FEA5303 		lsr	r3, r3, #1
 2166 0d56 9942     		cmp	r1, r3
 2167 0d58 05D9     		bls	.L54
 2168              		.loc 1 31 0 discriminator 42
 2169 0d5a FB6C     		ldr	r3, [r7, #76]
 2170 0d5c 9B68     		ldr	r3, [r3, #8]
 2171 0d5e 1B6A     		ldr	r3, [r3, #32]
 2172 0d60 03F10103 		add	r3, r3, #1
 2173 0d64 01E0     		b	.L55
 2174              	.L54:
 2175              		.loc 1 31 0 discriminator 43
 2176 0d66 4FF00003 		mov	r3, #0
 2177              	.L55:
 2178              		.loc 1 31 0 discriminator 44
 2179 0d6a 1362     		str	r3, [r2, #32]
 2180 0d6c FB6C     		ldr	r3, [r7, #76]
 2181 0d6e 9B68     		ldr	r3, [r3, #8]
 2182 0d70 1B6A     		ldr	r3, [r3, #32]
 2183 0d72 012B     		cmp	r3, #1
 2184 0d74 04D9     		bls	.L24
 2185              		.loc 1 31 0 discriminator 45
 2186 0d76 FB6C     		ldr	r3, [r7, #76]
 2187 0d78 9B68     		ldr	r3, [r3, #8]
 2188 0d7a 4FF00102 		mov	r2, #1
 2189 0d7e 5A62     		str	r2, [r3, #36]
 2190              	.L24:
 2191              	.LBE6:
 2192              	.LBE4:
  32:src/modbus.c  **** 		// id: name of key field
  33:src/modbus.c  **** 	}
  34:src/modbus.c  **** 
  35:src/modbus.c  **** 	s->value = (int) keyValue;
 2193              		.loc 1 35 0 is_stmt 1
 2194 0d80 3A68     		ldr	r2, [r7, #0]
 2195 0d82 FB6C     		ldr	r3, [r7, #76]
 2196 0d84 5A60     		str	r2, [r3, #4]
  36:src/modbus.c  **** }
 2197              		.loc 1 36 0
 2198 0d86 07F15407 		add	r7, r7, #84
 2199 0d8a BD46     		mov	sp, r7
 2200 0d8c 90BD     		pop	{r4, r7, pc}
 2201              		.cfi_endproc
 2202              	.LFE0:
 2204 0d8e 00BF     		.section	.rodata
 2205              		.align	2
 2206              	.LC0:
 2207 0000 4B657920 		.ascii	"Key 0x%x --> Data 0x%x\012\000"
 2207      30782578 
 2207      202D2D3E 
 2207      20446174 
 2207      61203078 
 2208              		.section	.text.putData,"ax",%progbits
 2209              		.align	2
 2210              		.global	putData
 2211              		.thumb
 2212              		.thumb_func
 2214              	putData:
 2215              	.LFB1:
  37:src/modbus.c  **** 
  38:src/modbus.c  **** //Print the data from HASH MAP
  39:src/modbus.c  **** void putData() {
 2216              		.loc 1 39 0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 8
 2219              		@ frame_needed = 1, uses_anonymous_args = 0
 2220 0000 80B5     		push	{r7, lr}
 2221              	.LCFI3:
 2222              		.cfi_def_cfa_offset 8
 2223 0002 82B0     		sub	sp, sp, #8
 2224              	.LCFI4:
 2225              		.cfi_def_cfa_offset 16
 2226 0004 00AF     		add	r7, sp, #0
 2227              		.cfi_offset 14, -4
 2228              		.cfi_offset 7, -8
 2229              	.LCFI5:
 2230              		.cfi_def_cfa_register 7
  40:src/modbus.c  **** 	struct heapStruct *s;
  41:src/modbus.c  **** 
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2231              		.loc 1 42 0
 2232 0006 0B4B     		ldr	r3, .L65
 2233 0008 1B68     		ldr	r3, [r3, #0]
 2234 000a 7B60     		str	r3, [r7, #4]
 2235 000c 0BE0     		b	.L63
 2236              	.L64:
  43:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2237              		.loc 1 43 0 discriminator 2
 2238 000e 7B68     		ldr	r3, [r7, #4]
 2239 0010 1A68     		ldr	r2, [r3, #0]
 2240 0012 7B68     		ldr	r3, [r7, #4]
 2241 0014 5B68     		ldr	r3, [r3, #4]
 2242 0016 0848     		ldr	r0, .L65+4
 2243 0018 1146     		mov	r1, r2
 2244 001a 1A46     		mov	r2, r3
 2245 001c FFF7FEFF 		bl	printf
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2246              		.loc 1 42 0 discriminator 2
 2247 0020 7B68     		ldr	r3, [r7, #4]
 2248 0022 1B69     		ldr	r3, [r3, #16]
 2249 0024 7B60     		str	r3, [r7, #4]
 2250              	.L63:
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2251              		.loc 1 42 0 is_stmt 0 discriminator 1
 2252 0026 7B68     		ldr	r3, [r7, #4]
 2253 0028 002B     		cmp	r3, #0
 2254 002a F0D1     		bne	.L64
  44:src/modbus.c  **** 	}
  45:src/modbus.c  **** }
 2255              		.loc 1 45 0 is_stmt 1
 2256 002c 07F10807 		add	r7, r7, #8
 2257 0030 BD46     		mov	sp, r7
 2258 0032 80BD     		pop	{r7, pc}
 2259              	.L66:
 2260              		.align	2
 2261              	.L65:
 2262 0034 00000000 		.word	users
 2263 0038 00000000 		.word	.LC0
 2264              		.cfi_endproc
 2265              	.LFE1:
 2267              		.section	.text.getData,"ax",%progbits
 2268              		.align	2
 2269              		.global	getData
 2270              		.thumb
 2271              		.thumb_func
 2273              	getData:
 2274              	.LFB2:
  46:src/modbus.c  **** 
  47:src/modbus.c  **** //Fetch the data from HASH MAP
  48:src/modbus.c  **** struct heapStruct *getData(int key) {
 2275              		.loc 1 48 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 40
 2278              		@ frame_needed = 1, uses_anonymous_args = 0
 2279 0000 80B5     		push	{r7, lr}
 2280              	.LCFI6:
 2281              		.cfi_def_cfa_offset 8
 2282 0002 8AB0     		sub	sp, sp, #40
 2283              	.LCFI7:
 2284              		.cfi_def_cfa_offset 48
 2285 0004 00AF     		add	r7, sp, #0
 2286              		.cfi_offset 14, -4
 2287              		.cfi_offset 7, -8
 2288              	.LCFI8:
 2289              		.cfi_def_cfa_register 7
 2290 0006 7860     		str	r0, [r7, #4]
 2291              	.LBB7:
  49:src/modbus.c  **** 	struct heapStruct *s;
  50:src/modbus.c  **** 	HASH_FIND_INT( users, &key, s);
 2292              		.loc 1 50 0
 2293 0008 4FF00003 		mov	r3, #0
 2294 000c 7B62     		str	r3, [r7, #36]
 2295 000e 8E4B     		ldr	r3, .L90
 2296 0010 1B68     		ldr	r3, [r3, #0]
 2297 0012 002B     		cmp	r3, #0
 2298 0014 00F05D82 		beq	.L68
 2299              	.LBB8:
 2300              		.loc 1 50 0 is_stmt 0 discriminator 1
 2301 0018 07F10403 		add	r3, r7, #4
 2302 001c 3B61     		str	r3, [r7, #16]
 2303 001e 8B4B     		ldr	r3, .L90+4
 2304 0020 3B62     		str	r3, [r7, #32]
 2305 0022 8B4B     		ldr	r3, .L90+8
 2306 0024 BB61     		str	r3, [r7, #24]
 2307 0026 BB69     		ldr	r3, [r7, #24]
 2308 0028 FB61     		str	r3, [r7, #28]
 2309 002a 4FF00403 		mov	r3, #4
 2310 002e 7B61     		str	r3, [r7, #20]
 2311 0030 E3E0     		b	.L69
 2312              	.L70:
 2313              		.loc 1 50 0 discriminator 3
 2314 0032 3B69     		ldr	r3, [r7, #16]
 2315 0034 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2316 0036 1A46     		mov	r2, r3
 2317 0038 3B69     		ldr	r3, [r7, #16]
 2318 003a 03F10103 		add	r3, r3, #1
 2319 003e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2320 0040 4FEA0323 		lsl	r3, r3, #8
 2321 0044 D218     		adds	r2, r2, r3
 2322 0046 3B69     		ldr	r3, [r7, #16]
 2323 0048 03F10203 		add	r3, r3, #2
 2324 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2325 004e 4FEA0343 		lsl	r3, r3, #16
 2326 0052 D218     		adds	r2, r2, r3
 2327 0054 3B69     		ldr	r3, [r7, #16]
 2328 0056 03F10303 		add	r3, r3, #3
 2329 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2330 005c 4FEA0363 		lsl	r3, r3, #24
 2331 0060 D318     		adds	r3, r2, r3
 2332 0062 FA69     		ldr	r2, [r7, #28]
 2333 0064 D318     		adds	r3, r2, r3
 2334 0066 FB61     		str	r3, [r7, #28]
 2335 0068 3B69     		ldr	r3, [r7, #16]
 2336 006a 03F10403 		add	r3, r3, #4
 2337 006e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2338 0070 1A46     		mov	r2, r3
 2339 0072 3B69     		ldr	r3, [r7, #16]
 2340 0074 03F10503 		add	r3, r3, #5
 2341 0078 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2342 007a 4FEA0323 		lsl	r3, r3, #8
 2343 007e D218     		adds	r2, r2, r3
 2344 0080 3B69     		ldr	r3, [r7, #16]
 2345 0082 03F10603 		add	r3, r3, #6
 2346 0086 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2347 0088 4FEA0343 		lsl	r3, r3, #16
 2348 008c D218     		adds	r2, r2, r3
 2349 008e 3B69     		ldr	r3, [r7, #16]
 2350 0090 03F10703 		add	r3, r3, #7
 2351 0094 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2352 0096 4FEA0363 		lsl	r3, r3, #24
 2353 009a D318     		adds	r3, r2, r3
 2354 009c BA69     		ldr	r2, [r7, #24]
 2355 009e D318     		adds	r3, r2, r3
 2356 00a0 BB61     		str	r3, [r7, #24]
 2357 00a2 3B69     		ldr	r3, [r7, #16]
 2358 00a4 03F10803 		add	r3, r3, #8
 2359 00a8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2360 00aa 1A46     		mov	r2, r3
 2361 00ac 3B69     		ldr	r3, [r7, #16]
 2362 00ae 03F10903 		add	r3, r3, #9
 2363 00b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2364 00b4 4FEA0323 		lsl	r3, r3, #8
 2365 00b8 D218     		adds	r2, r2, r3
 2366 00ba 3B69     		ldr	r3, [r7, #16]
 2367 00bc 03F10A03 		add	r3, r3, #10
 2368 00c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2369 00c2 4FEA0343 		lsl	r3, r3, #16
 2370 00c6 D218     		adds	r2, r2, r3
 2371 00c8 3B69     		ldr	r3, [r7, #16]
 2372 00ca 03F10B03 		add	r3, r3, #11
 2373 00ce 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2374 00d0 4FEA0363 		lsl	r3, r3, #24
 2375 00d4 D318     		adds	r3, r2, r3
 2376 00d6 3A6A     		ldr	r2, [r7, #32]
 2377 00d8 D318     		adds	r3, r2, r3
 2378 00da 3B62     		str	r3, [r7, #32]
 2379 00dc FA69     		ldr	r2, [r7, #28]
 2380 00de BB69     		ldr	r3, [r7, #24]
 2381 00e0 D31A     		subs	r3, r2, r3
 2382 00e2 FB61     		str	r3, [r7, #28]
 2383 00e4 FA69     		ldr	r2, [r7, #28]
 2384 00e6 3B6A     		ldr	r3, [r7, #32]
 2385 00e8 D31A     		subs	r3, r2, r3
 2386 00ea FB61     		str	r3, [r7, #28]
 2387 00ec 3B6A     		ldr	r3, [r7, #32]
 2388 00ee 4FEA5333 		lsr	r3, r3, #13
 2389 00f2 FA69     		ldr	r2, [r7, #28]
 2390 00f4 82EA0303 		eor	r3, r2, r3
 2391 00f8 FB61     		str	r3, [r7, #28]
 2392 00fa BA69     		ldr	r2, [r7, #24]
 2393 00fc 3B6A     		ldr	r3, [r7, #32]
 2394 00fe D31A     		subs	r3, r2, r3
 2395 0100 BB61     		str	r3, [r7, #24]
 2396 0102 BA69     		ldr	r2, [r7, #24]
 2397 0104 FB69     		ldr	r3, [r7, #28]
 2398 0106 D31A     		subs	r3, r2, r3
 2399 0108 BB61     		str	r3, [r7, #24]
 2400 010a FB69     		ldr	r3, [r7, #28]
 2401 010c 4FEA0323 		lsl	r3, r3, #8
 2402 0110 BA69     		ldr	r2, [r7, #24]
 2403 0112 82EA0303 		eor	r3, r2, r3
 2404 0116 BB61     		str	r3, [r7, #24]
 2405 0118 3A6A     		ldr	r2, [r7, #32]
 2406 011a FB69     		ldr	r3, [r7, #28]
 2407 011c D31A     		subs	r3, r2, r3
 2408 011e 3B62     		str	r3, [r7, #32]
 2409 0120 3A6A     		ldr	r2, [r7, #32]
 2410 0122 BB69     		ldr	r3, [r7, #24]
 2411 0124 D31A     		subs	r3, r2, r3
 2412 0126 3B62     		str	r3, [r7, #32]
 2413 0128 BB69     		ldr	r3, [r7, #24]
 2414 012a 4FEA5333 		lsr	r3, r3, #13
 2415 012e 3A6A     		ldr	r2, [r7, #32]
 2416 0130 82EA0303 		eor	r3, r2, r3
 2417 0134 3B62     		str	r3, [r7, #32]
 2418 0136 FA69     		ldr	r2, [r7, #28]
 2419 0138 BB69     		ldr	r3, [r7, #24]
 2420 013a D31A     		subs	r3, r2, r3
 2421 013c FB61     		str	r3, [r7, #28]
 2422 013e FA69     		ldr	r2, [r7, #28]
 2423 0140 3B6A     		ldr	r3, [r7, #32]
 2424 0142 D31A     		subs	r3, r2, r3
 2425 0144 FB61     		str	r3, [r7, #28]
 2426 0146 3B6A     		ldr	r3, [r7, #32]
 2427 0148 4FEA1333 		lsr	r3, r3, #12
 2428 014c FA69     		ldr	r2, [r7, #28]
 2429 014e 82EA0303 		eor	r3, r2, r3
 2430 0152 FB61     		str	r3, [r7, #28]
 2431 0154 BA69     		ldr	r2, [r7, #24]
 2432 0156 3B6A     		ldr	r3, [r7, #32]
 2433 0158 D31A     		subs	r3, r2, r3
 2434 015a BB61     		str	r3, [r7, #24]
 2435 015c BA69     		ldr	r2, [r7, #24]
 2436 015e FB69     		ldr	r3, [r7, #28]
 2437 0160 D31A     		subs	r3, r2, r3
 2438 0162 BB61     		str	r3, [r7, #24]
 2439 0164 FB69     		ldr	r3, [r7, #28]
 2440 0166 4FEA0343 		lsl	r3, r3, #16
 2441 016a BA69     		ldr	r2, [r7, #24]
 2442 016c 82EA0303 		eor	r3, r2, r3
 2443 0170 BB61     		str	r3, [r7, #24]
 2444 0172 3A6A     		ldr	r2, [r7, #32]
 2445 0174 FB69     		ldr	r3, [r7, #28]
 2446 0176 D31A     		subs	r3, r2, r3
 2447 0178 3B62     		str	r3, [r7, #32]
 2448 017a 3A6A     		ldr	r2, [r7, #32]
 2449 017c BB69     		ldr	r3, [r7, #24]
 2450 017e D31A     		subs	r3, r2, r3
 2451 0180 3B62     		str	r3, [r7, #32]
 2452 0182 BB69     		ldr	r3, [r7, #24]
 2453 0184 4FEA5313 		lsr	r3, r3, #5
 2454 0188 3A6A     		ldr	r2, [r7, #32]
 2455 018a 82EA0303 		eor	r3, r2, r3
 2456 018e 3B62     		str	r3, [r7, #32]
 2457 0190 FA69     		ldr	r2, [r7, #28]
 2458 0192 BB69     		ldr	r3, [r7, #24]
 2459 0194 D31A     		subs	r3, r2, r3
 2460 0196 FB61     		str	r3, [r7, #28]
 2461 0198 FA69     		ldr	r2, [r7, #28]
 2462 019a 3B6A     		ldr	r3, [r7, #32]
 2463 019c D31A     		subs	r3, r2, r3
 2464 019e FB61     		str	r3, [r7, #28]
 2465 01a0 3B6A     		ldr	r3, [r7, #32]
 2466 01a2 4FEAD303 		lsr	r3, r3, #3
 2467 01a6 FA69     		ldr	r2, [r7, #28]
 2468 01a8 82EA0303 		eor	r3, r2, r3
 2469 01ac FB61     		str	r3, [r7, #28]
 2470 01ae BA69     		ldr	r2, [r7, #24]
 2471 01b0 3B6A     		ldr	r3, [r7, #32]
 2472 01b2 D31A     		subs	r3, r2, r3
 2473 01b4 BB61     		str	r3, [r7, #24]
 2474 01b6 BA69     		ldr	r2, [r7, #24]
 2475 01b8 FB69     		ldr	r3, [r7, #28]
 2476 01ba D31A     		subs	r3, r2, r3
 2477 01bc BB61     		str	r3, [r7, #24]
 2478 01be FB69     		ldr	r3, [r7, #28]
 2479 01c0 4FEA8323 		lsl	r3, r3, #10
 2480 01c4 BA69     		ldr	r2, [r7, #24]
 2481 01c6 82EA0303 		eor	r3, r2, r3
 2482 01ca BB61     		str	r3, [r7, #24]
 2483 01cc 3A6A     		ldr	r2, [r7, #32]
 2484 01ce FB69     		ldr	r3, [r7, #28]
 2485 01d0 D31A     		subs	r3, r2, r3
 2486 01d2 3B62     		str	r3, [r7, #32]
 2487 01d4 3A6A     		ldr	r2, [r7, #32]
 2488 01d6 BB69     		ldr	r3, [r7, #24]
 2489 01d8 D31A     		subs	r3, r2, r3
 2490 01da 3B62     		str	r3, [r7, #32]
 2491 01dc BB69     		ldr	r3, [r7, #24]
 2492 01de 4FEAD333 		lsr	r3, r3, #15
 2493 01e2 3A6A     		ldr	r2, [r7, #32]
 2494 01e4 82EA0303 		eor	r3, r2, r3
 2495 01e8 3B62     		str	r3, [r7, #32]
 2496 01ea 3B69     		ldr	r3, [r7, #16]
 2497 01ec 03F10C03 		add	r3, r3, #12
 2498 01f0 3B61     		str	r3, [r7, #16]
 2499 01f2 7B69     		ldr	r3, [r7, #20]
 2500 01f4 A3F10C03 		sub	r3, r3, #12
 2501 01f8 7B61     		str	r3, [r7, #20]
 2502              	.L69:
 2503              		.loc 1 50 0 discriminator 2
 2504 01fa 7B69     		ldr	r3, [r7, #20]
 2505 01fc 0B2B     		cmp	r3, #11
 2506 01fe 3FF618AF 		bhi	.L70
 2507              		.loc 1 50 0 discriminator 4
 2508 0202 3B6A     		ldr	r3, [r7, #32]
 2509 0204 03F10403 		add	r3, r3, #4
 2510 0208 3B62     		str	r3, [r7, #32]
 2511 020a 7B69     		ldr	r3, [r7, #20]
 2512 020c 03F1FF33 		add	r3, r3, #-1
 2513 0210 0A2B     		cmp	r3, #10
 2514 0212 7CD8     		bhi	.L71
 2515 0214 01A2     		adr	r2, .L83
 2516 0216 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2517 021a 00BF     		.align	2
 2518              	.L83:
 2519 021c 05030000 		.word	.L72+1
 2520 0220 F3020000 		.word	.L73+1
 2521 0224 E1020000 		.word	.L74+1
 2522 0228 CF020000 		.word	.L75+1
 2523 022c C1020000 		.word	.L76+1
 2524 0230 AF020000 		.word	.L77+1
 2525 0234 9D020000 		.word	.L78+1
 2526 0238 8B020000 		.word	.L79+1
 2527 023c 79020000 		.word	.L80+1
 2528 0240 67020000 		.word	.L81+1
 2529 0244 55020000 		.word	.L82+1
 2530              	.L91:
 2531              		.align	2
 2532              	.L90:
 2533 0248 00000000 		.word	users
 2534 024c EFBEEDFE 		.word	-17973521
 2535 0250 B979379E 		.word	-1640531527
 2536              	.L82:
 2537              		.loc 1 50 0 discriminator 16
 2538 0254 3B69     		ldr	r3, [r7, #16]
 2539 0256 03F10A03 		add	r3, r3, #10
 2540 025a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2541 025c 4FEA0363 		lsl	r3, r3, #24
 2542 0260 3A6A     		ldr	r2, [r7, #32]
 2543 0262 D318     		adds	r3, r2, r3
 2544 0264 3B62     		str	r3, [r7, #32]
 2545              	.L81:
 2546              		.loc 1 50 0 discriminator 15
 2547 0266 3B69     		ldr	r3, [r7, #16]
 2548 0268 03F10903 		add	r3, r3, #9
 2549 026c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2550 026e 4FEA0343 		lsl	r3, r3, #16
 2551 0272 3A6A     		ldr	r2, [r7, #32]
 2552 0274 D318     		adds	r3, r2, r3
 2553 0276 3B62     		str	r3, [r7, #32]
 2554              	.L80:
 2555              		.loc 1 50 0 discriminator 14
 2556 0278 3B69     		ldr	r3, [r7, #16]
 2557 027a 03F10803 		add	r3, r3, #8
 2558 027e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2559 0280 4FEA0323 		lsl	r3, r3, #8
 2560 0284 3A6A     		ldr	r2, [r7, #32]
 2561 0286 D318     		adds	r3, r2, r3
 2562 0288 3B62     		str	r3, [r7, #32]
 2563              	.L79:
 2564              		.loc 1 50 0 discriminator 13
 2565 028a 3B69     		ldr	r3, [r7, #16]
 2566 028c 03F10703 		add	r3, r3, #7
 2567 0290 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2568 0292 4FEA0363 		lsl	r3, r3, #24
 2569 0296 BA69     		ldr	r2, [r7, #24]
 2570 0298 D318     		adds	r3, r2, r3
 2571 029a BB61     		str	r3, [r7, #24]
 2572              	.L78:
 2573              		.loc 1 50 0 discriminator 12
 2574 029c 3B69     		ldr	r3, [r7, #16]
 2575 029e 03F10603 		add	r3, r3, #6
 2576 02a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2577 02a4 4FEA0343 		lsl	r3, r3, #16
 2578 02a8 BA69     		ldr	r2, [r7, #24]
 2579 02aa D318     		adds	r3, r2, r3
 2580 02ac BB61     		str	r3, [r7, #24]
 2581              	.L77:
 2582              		.loc 1 50 0 discriminator 11
 2583 02ae 3B69     		ldr	r3, [r7, #16]
 2584 02b0 03F10503 		add	r3, r3, #5
 2585 02b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2586 02b6 4FEA0323 		lsl	r3, r3, #8
 2587 02ba BA69     		ldr	r2, [r7, #24]
 2588 02bc D318     		adds	r3, r2, r3
 2589 02be BB61     		str	r3, [r7, #24]
 2590              	.L76:
 2591              		.loc 1 50 0 discriminator 10
 2592 02c0 3B69     		ldr	r3, [r7, #16]
 2593 02c2 03F10403 		add	r3, r3, #4
 2594 02c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2595 02c8 BA69     		ldr	r2, [r7, #24]
 2596 02ca D318     		adds	r3, r2, r3
 2597 02cc BB61     		str	r3, [r7, #24]
 2598              	.L75:
 2599              		.loc 1 50 0 discriminator 9
 2600 02ce 3B69     		ldr	r3, [r7, #16]
 2601 02d0 03F10303 		add	r3, r3, #3
 2602 02d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2603 02d6 4FEA0363 		lsl	r3, r3, #24
 2604 02da FA69     		ldr	r2, [r7, #28]
 2605 02dc D318     		adds	r3, r2, r3
 2606 02de FB61     		str	r3, [r7, #28]
 2607              	.L74:
 2608              		.loc 1 50 0 discriminator 8
 2609 02e0 3B69     		ldr	r3, [r7, #16]
 2610 02e2 03F10203 		add	r3, r3, #2
 2611 02e6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2612 02e8 4FEA0343 		lsl	r3, r3, #16
 2613 02ec FA69     		ldr	r2, [r7, #28]
 2614 02ee D318     		adds	r3, r2, r3
 2615 02f0 FB61     		str	r3, [r7, #28]
 2616              	.L73:
 2617              		.loc 1 50 0 discriminator 7
 2618 02f2 3B69     		ldr	r3, [r7, #16]
 2619 02f4 03F10103 		add	r3, r3, #1
 2620 02f8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2621 02fa 4FEA0323 		lsl	r3, r3, #8
 2622 02fe FA69     		ldr	r2, [r7, #28]
 2623 0300 D318     		adds	r3, r2, r3
 2624 0302 FB61     		str	r3, [r7, #28]
 2625              	.L72:
 2626              		.loc 1 50 0 discriminator 6
 2627 0304 3B69     		ldr	r3, [r7, #16]
 2628 0306 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2629 0308 FA69     		ldr	r2, [r7, #28]
 2630 030a D318     		adds	r3, r2, r3
 2631 030c FB61     		str	r3, [r7, #28]
 2632              	.L71:
 2633              		.loc 1 50 0 discriminator 5
 2634 030e FA69     		ldr	r2, [r7, #28]
 2635 0310 BB69     		ldr	r3, [r7, #24]
 2636 0312 D31A     		subs	r3, r2, r3
 2637 0314 FB61     		str	r3, [r7, #28]
 2638 0316 FA69     		ldr	r2, [r7, #28]
 2639 0318 3B6A     		ldr	r3, [r7, #32]
 2640 031a D31A     		subs	r3, r2, r3
 2641 031c FB61     		str	r3, [r7, #28]
 2642 031e 3B6A     		ldr	r3, [r7, #32]
 2643 0320 4FEA5333 		lsr	r3, r3, #13
 2644 0324 FA69     		ldr	r2, [r7, #28]
 2645 0326 82EA0303 		eor	r3, r2, r3
 2646 032a FB61     		str	r3, [r7, #28]
 2647 032c BA69     		ldr	r2, [r7, #24]
 2648 032e 3B6A     		ldr	r3, [r7, #32]
 2649 0330 D31A     		subs	r3, r2, r3
 2650 0332 BB61     		str	r3, [r7, #24]
 2651 0334 BA69     		ldr	r2, [r7, #24]
 2652 0336 FB69     		ldr	r3, [r7, #28]
 2653 0338 D31A     		subs	r3, r2, r3
 2654 033a BB61     		str	r3, [r7, #24]
 2655 033c FB69     		ldr	r3, [r7, #28]
 2656 033e 4FEA0323 		lsl	r3, r3, #8
 2657 0342 BA69     		ldr	r2, [r7, #24]
 2658 0344 82EA0303 		eor	r3, r2, r3
 2659 0348 BB61     		str	r3, [r7, #24]
 2660 034a 3A6A     		ldr	r2, [r7, #32]
 2661 034c FB69     		ldr	r3, [r7, #28]
 2662 034e D31A     		subs	r3, r2, r3
 2663 0350 3B62     		str	r3, [r7, #32]
 2664 0352 3A6A     		ldr	r2, [r7, #32]
 2665 0354 BB69     		ldr	r3, [r7, #24]
 2666 0356 D31A     		subs	r3, r2, r3
 2667 0358 3B62     		str	r3, [r7, #32]
 2668 035a BB69     		ldr	r3, [r7, #24]
 2669 035c 4FEA5333 		lsr	r3, r3, #13
 2670 0360 3A6A     		ldr	r2, [r7, #32]
 2671 0362 82EA0303 		eor	r3, r2, r3
 2672 0366 3B62     		str	r3, [r7, #32]
 2673 0368 FA69     		ldr	r2, [r7, #28]
 2674 036a BB69     		ldr	r3, [r7, #24]
 2675 036c D31A     		subs	r3, r2, r3
 2676 036e FB61     		str	r3, [r7, #28]
 2677 0370 FA69     		ldr	r2, [r7, #28]
 2678 0372 3B6A     		ldr	r3, [r7, #32]
 2679 0374 D31A     		subs	r3, r2, r3
 2680 0376 FB61     		str	r3, [r7, #28]
 2681 0378 3B6A     		ldr	r3, [r7, #32]
 2682 037a 4FEA1333 		lsr	r3, r3, #12
 2683 037e FA69     		ldr	r2, [r7, #28]
 2684 0380 82EA0303 		eor	r3, r2, r3
 2685 0384 FB61     		str	r3, [r7, #28]
 2686 0386 BA69     		ldr	r2, [r7, #24]
 2687 0388 3B6A     		ldr	r3, [r7, #32]
 2688 038a D31A     		subs	r3, r2, r3
 2689 038c BB61     		str	r3, [r7, #24]
 2690 038e BA69     		ldr	r2, [r7, #24]
 2691 0390 FB69     		ldr	r3, [r7, #28]
 2692 0392 D31A     		subs	r3, r2, r3
 2693 0394 BB61     		str	r3, [r7, #24]
 2694 0396 FB69     		ldr	r3, [r7, #28]
 2695 0398 4FEA0343 		lsl	r3, r3, #16
 2696 039c BA69     		ldr	r2, [r7, #24]
 2697 039e 82EA0303 		eor	r3, r2, r3
 2698 03a2 BB61     		str	r3, [r7, #24]
 2699 03a4 3A6A     		ldr	r2, [r7, #32]
 2700 03a6 FB69     		ldr	r3, [r7, #28]
 2701 03a8 D31A     		subs	r3, r2, r3
 2702 03aa 3B62     		str	r3, [r7, #32]
 2703 03ac 3A6A     		ldr	r2, [r7, #32]
 2704 03ae BB69     		ldr	r3, [r7, #24]
 2705 03b0 D31A     		subs	r3, r2, r3
 2706 03b2 3B62     		str	r3, [r7, #32]
 2707 03b4 BB69     		ldr	r3, [r7, #24]
 2708 03b6 4FEA5313 		lsr	r3, r3, #5
 2709 03ba 3A6A     		ldr	r2, [r7, #32]
 2710 03bc 82EA0303 		eor	r3, r2, r3
 2711 03c0 3B62     		str	r3, [r7, #32]
 2712 03c2 FA69     		ldr	r2, [r7, #28]
 2713 03c4 BB69     		ldr	r3, [r7, #24]
 2714 03c6 D31A     		subs	r3, r2, r3
 2715 03c8 FB61     		str	r3, [r7, #28]
 2716 03ca FA69     		ldr	r2, [r7, #28]
 2717 03cc 3B6A     		ldr	r3, [r7, #32]
 2718 03ce D31A     		subs	r3, r2, r3
 2719 03d0 FB61     		str	r3, [r7, #28]
 2720 03d2 3B6A     		ldr	r3, [r7, #32]
 2721 03d4 4FEAD303 		lsr	r3, r3, #3
 2722 03d8 FA69     		ldr	r2, [r7, #28]
 2723 03da 82EA0303 		eor	r3, r2, r3
 2724 03de FB61     		str	r3, [r7, #28]
 2725 03e0 BA69     		ldr	r2, [r7, #24]
 2726 03e2 3B6A     		ldr	r3, [r7, #32]
 2727 03e4 D31A     		subs	r3, r2, r3
 2728 03e6 BB61     		str	r3, [r7, #24]
 2729 03e8 BA69     		ldr	r2, [r7, #24]
 2730 03ea FB69     		ldr	r3, [r7, #28]
 2731 03ec D31A     		subs	r3, r2, r3
 2732 03ee BB61     		str	r3, [r7, #24]
 2733 03f0 FB69     		ldr	r3, [r7, #28]
 2734 03f2 4FEA8323 		lsl	r3, r3, #10
 2735 03f6 BA69     		ldr	r2, [r7, #24]
 2736 03f8 82EA0303 		eor	r3, r2, r3
 2737 03fc BB61     		str	r3, [r7, #24]
 2738 03fe 3A6A     		ldr	r2, [r7, #32]
 2739 0400 FB69     		ldr	r3, [r7, #28]
 2740 0402 D31A     		subs	r3, r2, r3
 2741 0404 3B62     		str	r3, [r7, #32]
 2742 0406 3A6A     		ldr	r2, [r7, #32]
 2743 0408 BB69     		ldr	r3, [r7, #24]
 2744 040a D31A     		subs	r3, r2, r3
 2745 040c 3B62     		str	r3, [r7, #32]
 2746 040e BB69     		ldr	r3, [r7, #24]
 2747 0410 4FEAD333 		lsr	r3, r3, #15
 2748 0414 3A6A     		ldr	r2, [r7, #32]
 2749 0416 82EA0303 		eor	r3, r2, r3
 2750 041a 3B62     		str	r3, [r7, #32]
 2751 041c 304B     		ldr	r3, .L92
 2752 041e 1B68     		ldr	r3, [r3, #0]
 2753 0420 9B68     		ldr	r3, [r3, #8]
 2754 0422 5B68     		ldr	r3, [r3, #4]
 2755 0424 03F1FF32 		add	r2, r3, #-1
 2756 0428 3B6A     		ldr	r3, [r7, #32]
 2757 042a 02EA0303 		and	r3, r2, r3
 2758 042e FB60     		str	r3, [r7, #12]
 2759              	.LBE8:
 2760 0430 2B4B     		ldr	r3, .L92
 2761 0432 1B68     		ldr	r3, [r3, #0]
 2762 0434 9B68     		ldr	r3, [r3, #8]
 2763 0436 1968     		ldr	r1, [r3, #0]
 2764 0438 FA68     		ldr	r2, [r7, #12]
 2765 043a 1346     		mov	r3, r2
 2766 043c 4FEA4303 		lsl	r3, r3, #1
 2767 0440 9B18     		adds	r3, r3, r2
 2768 0442 4FEA8303 		lsl	r3, r3, #2
 2769 0446 CB18     		adds	r3, r1, r3
 2770 0448 1B68     		ldr	r3, [r3, #0]
 2771 044a 002B     		cmp	r3, #0
 2772 044c 16D0     		beq	.L84
 2773              		.loc 1 50 0 discriminator 18
 2774 044e 244B     		ldr	r3, .L92
 2775 0450 1B68     		ldr	r3, [r3, #0]
 2776 0452 9B68     		ldr	r3, [r3, #8]
 2777 0454 1968     		ldr	r1, [r3, #0]
 2778 0456 FA68     		ldr	r2, [r7, #12]
 2779 0458 1346     		mov	r3, r2
 2780 045a 4FEA4303 		lsl	r3, r3, #1
 2781 045e 9B18     		adds	r3, r3, r2
 2782 0460 4FEA8303 		lsl	r3, r3, #2
 2783 0464 CB18     		adds	r3, r1, r3
 2784 0466 1B68     		ldr	r3, [r3, #0]
 2785 0468 1A46     		mov	r2, r3
 2786 046a 1D4B     		ldr	r3, .L92
 2787 046c 1B68     		ldr	r3, [r3, #0]
 2788 046e 9B68     		ldr	r3, [r3, #8]
 2789 0470 5B69     		ldr	r3, [r3, #20]
 2790 0472 C3F10003 		rsb	r3, r3, #0
 2791 0476 D318     		adds	r3, r2, r3
 2792 0478 7B62     		str	r3, [r7, #36]
 2793 047a 27E0     		b	.L86
 2794              	.L84:
 2795              		.loc 1 50 0 discriminator 19
 2796 047c 4FF00003 		mov	r3, #0
 2797 0480 7B62     		str	r3, [r7, #36]
 2798 0482 23E0     		b	.L86
 2799              	.L89:
 2800              		.loc 1 50 0 discriminator 26
 2801 0484 7B6A     		ldr	r3, [r7, #36]
 2802 0486 1B6A     		ldr	r3, [r3, #32]
 2803 0488 042B     		cmp	r3, #4
 2804 048a 0CD1     		bne	.L87
 2805              		.loc 1 50 0 discriminator 22
 2806 048c 7B6A     		ldr	r3, [r7, #36]
 2807 048e DA69     		ldr	r2, [r3, #28]
 2808 0490 07F10403 		add	r3, r7, #4
 2809 0494 1046     		mov	r0, r2
 2810 0496 1946     		mov	r1, r3
 2811 0498 4FF00402 		mov	r2, #4
 2812 049c FFF7FEFF 		bl	memcmp
 2813 04a0 0346     		mov	r3, r0
 2814 04a2 002B     		cmp	r3, #0
 2815 04a4 15D0     		beq	.L68
 2816              	.L87:
 2817              		.loc 1 50 0 discriminator 23
 2818 04a6 7B6A     		ldr	r3, [r7, #36]
 2819 04a8 9B69     		ldr	r3, [r3, #24]
 2820 04aa 002B     		cmp	r3, #0
 2821 04ac 0BD0     		beq	.L88
 2822              		.loc 1 50 0 discriminator 24
 2823 04ae 7B6A     		ldr	r3, [r7, #36]
 2824 04b0 9B69     		ldr	r3, [r3, #24]
 2825 04b2 1A46     		mov	r2, r3
 2826 04b4 0A4B     		ldr	r3, .L92
 2827 04b6 1B68     		ldr	r3, [r3, #0]
 2828 04b8 9B68     		ldr	r3, [r3, #8]
 2829 04ba 5B69     		ldr	r3, [r3, #20]
 2830 04bc C3F10003 		rsb	r3, r3, #0
 2831 04c0 D318     		adds	r3, r2, r3
 2832 04c2 7B62     		str	r3, [r7, #36]
 2833 04c4 02E0     		b	.L86
 2834              	.L88:
 2835              		.loc 1 50 0 discriminator 25
 2836 04c6 4FF00003 		mov	r3, #0
 2837 04ca 7B62     		str	r3, [r7, #36]
 2838              	.L86:
 2839              		.loc 1 50 0 discriminator 21
 2840 04cc 7B6A     		ldr	r3, [r7, #36]
 2841 04ce 002B     		cmp	r3, #0
 2842 04d0 D8D1     		bne	.L89
 2843              	.L68:
 2844              	.LBE7:
  51:src/modbus.c  **** 	//s: output pointer
  52:src/modbus.c  **** 	//printf("Data: 0x%x\n", s ? s->name : "unknown");
  53:src/modbus.c  **** 	return s;
 2845              		.loc 1 53 0 is_stmt 1
 2846 04d2 7B6A     		ldr	r3, [r7, #36]
  54:src/modbus.c  **** }
 2847              		.loc 1 54 0
 2848 04d4 1846     		mov	r0, r3
 2849 04d6 07F12807 		add	r7, r7, #40
 2850 04da BD46     		mov	sp, r7
 2851 04dc 80BD     		pop	{r7, pc}
 2852              	.L93:
 2853 04de 00BF     		.align	2
 2854              	.L92:
 2855 04e0 00000000 		.word	users
 2856              		.cfi_endproc
 2857              	.LFE2:
 2859              		.section	.text.validateSlaveID,"ax",%progbits
 2860              		.align	2
 2861              		.global	validateSlaveID
 2862              		.thumb
 2863              		.thumb_func
 2865              	validateSlaveID:
 2866              	.LFB3:
  55:src/modbus.c  **** 
  56:src/modbus.c  **** // MODBUS :
  57:src/modbus.c  **** 
  58:src/modbus.c  **** //Validating the slaveID
  59:src/modbus.c  **** uint32_t validateSlaveID(uint32_t *qPacket, uint32_t deviceID) {
 2867              		.loc 1 59 0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 8
 2870              		@ frame_needed = 1, uses_anonymous_args = 0
 2871              		@ link register save eliminated.
 2872 0000 80B4     		push	{r7}
 2873              	.LCFI9:
 2874              		.cfi_def_cfa_offset 4
 2875 0002 83B0     		sub	sp, sp, #12
 2876              	.LCFI10:
 2877              		.cfi_def_cfa_offset 16
 2878 0004 00AF     		add	r7, sp, #0
 2879              		.cfi_offset 7, -4
 2880              	.LCFI11:
 2881              		.cfi_def_cfa_register 7
 2882 0006 7860     		str	r0, [r7, #4]
 2883 0008 3960     		str	r1, [r7, #0]
  60:src/modbus.c  **** 	if (*qPacket == deviceID) {
 2884              		.loc 1 60 0
 2885 000a 7B68     		ldr	r3, [r7, #4]
 2886 000c 1A68     		ldr	r2, [r3, #0]
 2887 000e 3B68     		ldr	r3, [r7, #0]
 2888 0010 9A42     		cmp	r2, r3
 2889 0012 0DD1     		bne	.L95
  61:src/modbus.c  **** 
  62:src/modbus.c  **** 		//Copy deviceID into repose packet
  63:src/modbus.c  **** 		*rPacket = *qPacket;
 2890              		.loc 1 63 0
 2891 0014 0A4B     		ldr	r3, .L97
 2892 0016 1B68     		ldr	r3, [r3, #0]
 2893 0018 7A68     		ldr	r2, [r7, #4]
 2894 001a 1268     		ldr	r2, [r2, #0]
 2895 001c 1A60     		str	r2, [r3, #0]
  64:src/modbus.c  **** 		//printf("%d\n",*rPacket);
  65:src/modbus.c  **** 		rPacket++;
 2896              		.loc 1 65 0
 2897 001e 084B     		ldr	r3, .L97
 2898 0020 1B68     		ldr	r3, [r3, #0]
 2899 0022 03F10402 		add	r2, r3, #4
 2900 0026 064B     		ldr	r3, .L97
 2901 0028 1A60     		str	r2, [r3, #0]
  66:src/modbus.c  **** 		return 1;
 2902              		.loc 1 66 0
 2903 002a 4FF00103 		mov	r3, #1
 2904 002e 01E0     		b	.L96
 2905              	.L95:
  67:src/modbus.c  **** 	} else {
  68:src/modbus.c  **** 		return 0;
 2906              		.loc 1 68 0
 2907 0030 4FF00003 		mov	r3, #0
 2908              	.L96:
  69:src/modbus.c  **** 	}
  70:src/modbus.c  **** }
 2909              		.loc 1 70 0
 2910 0034 1846     		mov	r0, r3
 2911 0036 07F10C07 		add	r7, r7, #12
 2912 003a BD46     		mov	sp, r7
 2913 003c 80BC     		pop	{r7}
 2914 003e 7047     		bx	lr
 2915              	.L98:
 2916              		.align	2
 2917              	.L97:
 2918 0040 00000000 		.word	rPacket
 2919              		.cfi_endproc
 2920              	.LFE3:
 2922              		.section	.text.validateCrc,"ax",%progbits
 2923              		.align	2
 2924              		.global	validateCrc
 2925              		.thumb
 2926              		.thumb_func
 2928              	validateCrc:
 2929              	.LFB4:
  71:src/modbus.c  **** 
  72:src/modbus.c  **** uint32_t validateCrc(uint32_t *qPacket,uint32_t usDataLen,uint32_t *tempCRC){
 2930              		.loc 1 72 0
 2931              		.cfi_startproc
 2932              		@ args = 0, pretend = 0, frame = 32
 2933              		@ frame_needed = 1, uses_anonymous_args = 0
 2934              		@ link register save eliminated.
 2935 0000 80B4     		push	{r7}
 2936              	.LCFI12:
 2937              		.cfi_def_cfa_offset 4
 2938 0002 89B0     		sub	sp, sp, #36
 2939              	.LCFI13:
 2940              		.cfi_def_cfa_offset 40
 2941 0004 00AF     		add	r7, sp, #0
 2942              		.cfi_offset 7, -4
 2943              	.LCFI14:
 2944              		.cfi_def_cfa_register 7
 2945 0006 F860     		str	r0, [r7, #12]
 2946 0008 B960     		str	r1, [r7, #8]
 2947 000a 7A60     		str	r2, [r7, #4]
  73:src/modbus.c  **** 
  74:src/modbus.c  **** 	/*//CRC 16
  75:src/modbus.c  **** 	uint32_t CRC16(uint32_t *qPacket, uint32_t usDataLen) {*/
  76:src/modbus.c  **** 
  77:src/modbus.c  **** 		uint32_t ucrcHi = 0xFF;
 2948              		.loc 1 77 0
 2949 000c 4FF0FF03 		mov	r3, #255
 2950 0010 FB61     		str	r3, [r7, #28]
  78:src/modbus.c  **** 		uint32_t ucrcLo = 0xFF;
 2951              		.loc 1 78 0
 2952 0012 4FF0FF03 		mov	r3, #255
 2953 0016 BB61     		str	r3, [r7, #24]
  79:src/modbus.c  **** 		uint32_t iIndex;
  80:src/modbus.c  **** 
  81:src/modbus.c  **** 		while(usDataLen--){
 2954              		.loc 1 81 0
 2955 0018 16E0     		b	.L100
 2956              	.L101:
  82:src/modbus.c  **** 			iIndex = ucrcLo ^ *(qPacket++);
 2957              		.loc 1 82 0
 2958 001a FB68     		ldr	r3, [r7, #12]
 2959 001c 1A68     		ldr	r2, [r3, #0]
 2960 001e BB69     		ldr	r3, [r7, #24]
 2961 0020 82EA0303 		eor	r3, r2, r3
 2962 0024 7B61     		str	r3, [r7, #20]
 2963 0026 FB68     		ldr	r3, [r7, #12]
 2964 0028 03F10403 		add	r3, r3, #4
 2965 002c FB60     		str	r3, [r7, #12]
  83:src/modbus.c  **** 			ucrcLo = ucrcHi ^ crcHi[iIndex];
 2966              		.loc 1 83 0
 2967 002e 1B4B     		ldr	r3, .L104
 2968 0030 7A69     		ldr	r2, [r7, #20]
 2969 0032 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2970 0036 FB69     		ldr	r3, [r7, #28]
 2971 0038 82EA0303 		eor	r3, r2, r3
 2972 003c BB61     		str	r3, [r7, #24]
  84:src/modbus.c  **** 			ucrcHi = crcLo[iIndex];
 2973              		.loc 1 84 0
 2974 003e 184B     		ldr	r3, .L104+4
 2975 0040 7A69     		ldr	r2, [r7, #20]
 2976 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2977 0046 FB61     		str	r3, [r7, #28]
 2978              	.L100:
  81:src/modbus.c  **** 		while(usDataLen--){
 2979              		.loc 1 81 0 discriminator 1
 2980 0048 BB68     		ldr	r3, [r7, #8]
 2981 004a 002B     		cmp	r3, #0
 2982 004c 0CBF     		ite	eq
 2983 004e 0023     		moveq	r3, #0
 2984 0050 0123     		movne	r3, #1
 2985 0052 DBB2     		uxtb	r3, r3
 2986 0054 BA68     		ldr	r2, [r7, #8]
 2987 0056 02F1FF32 		add	r2, r2, #-1
 2988 005a BA60     		str	r2, [r7, #8]
 2989 005c 002B     		cmp	r3, #0
 2990 005e DCD1     		bne	.L101
  85:src/modbus.c  **** 		}
  86:src/modbus.c  **** 		//ucrcHi = ucrcHi << 8 | ucrcLo;
  87:src/modbus.c  **** 
  88:src/modbus.c  **** 		if (ucrcLo == *tempCRC++){
 2991              		.loc 1 88 0
 2992 0060 7B68     		ldr	r3, [r7, #4]
 2993 0062 1A68     		ldr	r2, [r3, #0]
 2994 0064 BB69     		ldr	r3, [r7, #24]
 2995 0066 9A42     		cmp	r2, r3
 2996 0068 14BF     		ite	ne
 2997 006a 0023     		movne	r3, #0
 2998 006c 0123     		moveq	r3, #1
 2999 006e DBB2     		uxtb	r3, r3
 3000 0070 7A68     		ldr	r2, [r7, #4]
 3001 0072 02F10402 		add	r2, r2, #4
 3002 0076 7A60     		str	r2, [r7, #4]
 3003 0078 002B     		cmp	r3, #0
 3004 007a 07D0     		beq	.L102
  89:src/modbus.c  **** 			if(ucrcHi ==*tempCRC){
 3005              		.loc 1 89 0
 3006 007c 7B68     		ldr	r3, [r7, #4]
 3007 007e 1A68     		ldr	r2, [r3, #0]
 3008 0080 FB69     		ldr	r3, [r7, #28]
 3009 0082 9A42     		cmp	r2, r3
 3010 0084 02D1     		bne	.L102
  90:src/modbus.c  **** 				return 1;
 3011              		.loc 1 90 0
 3012 0086 4FF00103 		mov	r3, #1
 3013 008a 01E0     		b	.L103
 3014              	.L102:
  91:src/modbus.c  **** 			}
  92:src/modbus.c  **** 		}
  93:src/modbus.c  **** 		return 0;
 3015              		.loc 1 93 0
 3016 008c 4FF00003 		mov	r3, #0
 3017              	.L103:
  94:src/modbus.c  **** }
 3018              		.loc 1 94 0
 3019 0090 1846     		mov	r0, r3
 3020 0092 07F12407 		add	r7, r7, #36
 3021 0096 BD46     		mov	sp, r7
 3022 0098 80BC     		pop	{r7}
 3023 009a 7047     		bx	lr
 3024              	.L105:
 3025              		.align	2
 3026              	.L104:
 3027 009c 00000000 		.word	crcHi
 3028 00a0 00000000 		.word	crcLo
 3029              		.cfi_endproc
 3030              	.LFE4:
 3032              		.section	.text.calculateOutputCrc,"ax",%progbits
 3033              		.align	2
 3034              		.global	calculateOutputCrc
 3035              		.thumb
 3036              		.thumb_func
 3038              	calculateOutputCrc:
 3039              	.LFB5:
  95:src/modbus.c  **** 
  96:src/modbus.c  **** uint32_t calculateOutputCrc(uint32_t *tempRpacket,uint32_t rPacketLen){
 3040              		.loc 1 96 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 24
 3043              		@ frame_needed = 1, uses_anonymous_args = 0
 3044              		@ link register save eliminated.
 3045 0000 80B4     		push	{r7}
 3046              	.LCFI15:
 3047              		.cfi_def_cfa_offset 4
 3048 0002 87B0     		sub	sp, sp, #28
 3049              	.LCFI16:
 3050              		.cfi_def_cfa_offset 32
 3051 0004 00AF     		add	r7, sp, #0
 3052              		.cfi_offset 7, -4
 3053              	.LCFI17:
 3054              		.cfi_def_cfa_register 7
 3055 0006 7860     		str	r0, [r7, #4]
 3056 0008 3960     		str	r1, [r7, #0]
  97:src/modbus.c  **** 	
  98:src/modbus.c  **** 	uint32_t ucrcHi = 0xFF;
 3057              		.loc 1 98 0
 3058 000a 4FF0FF03 		mov	r3, #255
 3059 000e 7B61     		str	r3, [r7, #20]
  99:src/modbus.c  **** 	uint32_t ucrcLo = 0xFF;
 3060              		.loc 1 99 0
 3061 0010 4FF0FF03 		mov	r3, #255
 3062 0014 3B61     		str	r3, [r7, #16]
 100:src/modbus.c  **** 	uint32_t iIndex;
 101:src/modbus.c  **** 
 102:src/modbus.c  **** 	while(rPacketLen--){
 3063              		.loc 1 102 0
 3064 0016 16E0     		b	.L107
 3065              	.L108:
 103:src/modbus.c  **** 		iIndex = ucrcLo ^ *(tempRpacket++);
 3066              		.loc 1 103 0
 3067 0018 7B68     		ldr	r3, [r7, #4]
 3068 001a 1A68     		ldr	r2, [r3, #0]
 3069 001c 3B69     		ldr	r3, [r7, #16]
 3070 001e 82EA0303 		eor	r3, r2, r3
 3071 0022 FB60     		str	r3, [r7, #12]
 3072 0024 7B68     		ldr	r3, [r7, #4]
 3073 0026 03F10403 		add	r3, r3, #4
 3074 002a 7B60     		str	r3, [r7, #4]
 104:src/modbus.c  **** 		ucrcLo = ucrcHi ^ crcHi[iIndex];
 3075              		.loc 1 104 0
 3076 002c 184B     		ldr	r3, .L109
 3077 002e FA68     		ldr	r2, [r7, #12]
 3078 0030 53F82220 		ldr	r2, [r3, r2, lsl #2]
 3079 0034 7B69     		ldr	r3, [r7, #20]
 3080 0036 82EA0303 		eor	r3, r2, r3
 3081 003a 3B61     		str	r3, [r7, #16]
 105:src/modbus.c  **** 		ucrcHi = crcLo[iIndex];
 3082              		.loc 1 105 0
 3083 003c 154B     		ldr	r3, .L109+4
 3084 003e FA68     		ldr	r2, [r7, #12]
 3085 0040 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3086 0044 7B61     		str	r3, [r7, #20]
 3087              	.L107:
 102:src/modbus.c  **** 	while(rPacketLen--){
 3088              		.loc 1 102 0 discriminator 1
 3089 0046 3B68     		ldr	r3, [r7, #0]
 3090 0048 002B     		cmp	r3, #0
 3091 004a 0CBF     		ite	eq
 3092 004c 0023     		moveq	r3, #0
 3093 004e 0123     		movne	r3, #1
 3094 0050 DBB2     		uxtb	r3, r3
 3095 0052 3A68     		ldr	r2, [r7, #0]
 3096 0054 02F1FF32 		add	r2, r2, #-1
 3097 0058 3A60     		str	r2, [r7, #0]
 3098 005a 002B     		cmp	r3, #0
 3099 005c DCD1     		bne	.L108
 106:src/modbus.c  **** 	}
 107:src/modbus.c  **** 	*rPacket++ = ucrcHi;
 3100              		.loc 1 107 0
 3101 005e 0E4B     		ldr	r3, .L109+8
 3102 0060 1B68     		ldr	r3, [r3, #0]
 3103 0062 7A69     		ldr	r2, [r7, #20]
 3104 0064 1A60     		str	r2, [r3, #0]
 3105 0066 03F10402 		add	r2, r3, #4
 3106 006a 0B4B     		ldr	r3, .L109+8
 3107 006c 1A60     		str	r2, [r3, #0]
 108:src/modbus.c  **** 	*rPacket++ = ucrcLo;
 3108              		.loc 1 108 0
 3109 006e 0A4B     		ldr	r3, .L109+8
 3110 0070 1B68     		ldr	r3, [r3, #0]
 3111 0072 3A69     		ldr	r2, [r7, #16]
 3112 0074 1A60     		str	r2, [r3, #0]
 3113 0076 03F10402 		add	r2, r3, #4
 3114 007a 074B     		ldr	r3, .L109+8
 3115 007c 1A60     		str	r2, [r3, #0]
 109:src/modbus.c  **** 	return 0;		
 3116              		.loc 1 109 0
 3117 007e 4FF00003 		mov	r3, #0
 110:src/modbus.c  **** }
 3118              		.loc 1 110 0
 3119 0082 1846     		mov	r0, r3
 3120 0084 07F11C07 		add	r7, r7, #28
 3121 0088 BD46     		mov	sp, r7
 3122 008a 80BC     		pop	{r7}
 3123 008c 7047     		bx	lr
 3124              	.L110:
 3125 008e 00BF     		.align	2
 3126              	.L109:
 3127 0090 00000000 		.word	crcHi
 3128 0094 00000000 		.word	crcLo
 3129 0098 00000000 		.word	rPacket
 3130              		.cfi_endproc
 3131              	.LFE5:
 3133              		.section	.text.validateFunction,"ax",%progbits
 3134              		.align	2
 3135              		.global	validateFunction
 3136              		.thumb
 3137              		.thumb_func
 3139              	validateFunction:
 3140              	.LFB6:
 111:src/modbus.c  **** 
 112:src/modbus.c  **** //Validate the function
 113:src/modbus.c  **** uint32_t validateFunction(uint32_t *qPacket) {
 3141              		.loc 1 113 0
 3142              		.cfi_startproc
 3143              		@ args = 0, pretend = 0, frame = 8
 3144              		@ frame_needed = 1, uses_anonymous_args = 0
 3145 0000 80B5     		push	{r7, lr}
 3146              	.LCFI18:
 3147              		.cfi_def_cfa_offset 8
 3148 0002 82B0     		sub	sp, sp, #8
 3149              	.LCFI19:
 3150              		.cfi_def_cfa_offset 16
 3151 0004 00AF     		add	r7, sp, #0
 3152              		.cfi_offset 14, -4
 3153              		.cfi_offset 7, -8
 3154              	.LCFI20:
 3155              		.cfi_def_cfa_register 7
 3156 0006 7860     		str	r0, [r7, #4]
 114:src/modbus.c  **** 
 115:src/modbus.c  **** 	qPacket++;
 3157              		.loc 1 115 0
 3158 0008 7B68     		ldr	r3, [r7, #4]
 3159 000a 03F10403 		add	r3, r3, #4
 3160 000e 7B60     		str	r3, [r7, #4]
 116:src/modbus.c  **** 
 117:src/modbus.c  **** 	//Copy function address in to respose packet
 118:src/modbus.c  **** 	*rPacket = *qPacket;
 3161              		.loc 1 118 0
 3162 0010 384B     		ldr	r3, .L124
 3163 0012 1B68     		ldr	r3, [r3, #0]
 3164 0014 7A68     		ldr	r2, [r7, #4]
 3165 0016 1268     		ldr	r2, [r2, #0]
 3166 0018 1A60     		str	r2, [r3, #0]
 119:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 120:src/modbus.c  **** 	rPacket++;
 3167              		.loc 1 120 0
 3168 001a 364B     		ldr	r3, .L124
 3169 001c 1B68     		ldr	r3, [r3, #0]
 3170 001e 03F10402 		add	r2, r3, #4
 3171 0022 344B     		ldr	r3, .L124
 3172 0024 1A60     		str	r2, [r3, #0]
 121:src/modbus.c  **** 
 122:src/modbus.c  **** 	switch (*qPacket) {
 3173              		.loc 1 122 0
 3174 0026 7B68     		ldr	r3, [r7, #4]
 3175 0028 1B68     		ldr	r3, [r3, #0]
 3176 002a 03F1FF33 		add	r3, r3, #-1
 3177 002e 0F2B     		cmp	r3, #15
 3178 0030 58D8     		bhi	.L112
 3179 0032 01A2     		adr	r2, .L122
 3180 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3181              		.align	2
 3182              	.L122:
 3183 0038 79000000 		.word	.L113+1
 3184 003c 85000000 		.word	.L114+1
 3185 0040 91000000 		.word	.L115+1
 3186 0044 9D000000 		.word	.L116+1
 3187 0048 A9000000 		.word	.L117+1
 3188 004c B5000000 		.word	.L118+1
 3189 0050 D9000000 		.word	.L119+1
 3190 0054 E5000000 		.word	.L112+1
 3191 0058 E5000000 		.word	.L112+1
 3192 005c E5000000 		.word	.L112+1
 3193 0060 E5000000 		.word	.L112+1
 3194 0064 E5000000 		.word	.L112+1
 3195 0068 E5000000 		.word	.L112+1
 3196 006c E5000000 		.word	.L112+1
 3197 0070 C1000000 		.word	.L120+1
 3198 0074 CD000000 		.word	.L121+1
 3199              	.L113:
 123:src/modbus.c  **** 	case READ_COIL:
 124:src/modbus.c  **** 		readCoil(qPacket);
 3200              		.loc 1 124 0
 3201 0078 7868     		ldr	r0, [r7, #4]
 3202 007a FFF7FEFF 		bl	readCoil
 125:src/modbus.c  **** 		return 1;
 3203              		.loc 1 125 0
 3204 007e 4FF00103 		mov	r3, #1
 3205 0082 31E0     		b	.L123
 3206              	.L114:
 126:src/modbus.c  **** 		break;
 127:src/modbus.c  **** 	case READ_DISCRETE_INPUTS:
 128:src/modbus.c  **** 		readDiscreteInputs(qPacket);
 3207              		.loc 1 128 0
 3208 0084 7868     		ldr	r0, [r7, #4]
 3209 0086 FFF7FEFF 		bl	readDiscreteInputs
 129:src/modbus.c  **** 		return 1;
 3210              		.loc 1 129 0
 3211 008a 4FF00103 		mov	r3, #1
 3212 008e 2BE0     		b	.L123
 3213              	.L115:
 130:src/modbus.c  **** 		break;
 131:src/modbus.c  **** 	case READ_HOLDING_REGISTERS:
 132:src/modbus.c  **** 		readHoldingRegisters(qPacket);
 3214              		.loc 1 132 0
 3215 0090 7868     		ldr	r0, [r7, #4]
 3216 0092 FFF7FEFF 		bl	readHoldingRegisters
 133:src/modbus.c  **** 		return 1;
 3217              		.loc 1 133 0
 3218 0096 4FF00103 		mov	r3, #1
 3219 009a 25E0     		b	.L123
 3220              	.L116:
 134:src/modbus.c  **** 		break;
 135:src/modbus.c  **** 	case READ_INPUT_REGISTERS:
 136:src/modbus.c  **** 		readInputRegisters(qPacket);
 3221              		.loc 1 136 0
 3222 009c 7868     		ldr	r0, [r7, #4]
 3223 009e FFF7FEFF 		bl	readInputRegisters
 137:src/modbus.c  **** 		return 1;
 3224              		.loc 1 137 0
 3225 00a2 4FF00103 		mov	r3, #1
 3226 00a6 1FE0     		b	.L123
 3227              	.L117:
 138:src/modbus.c  **** 		break;
 139:src/modbus.c  **** 	case WRITE_SINGLE_COIL:
 140:src/modbus.c  **** 		writeSingleCoil(qPacket);
 3228              		.loc 1 140 0
 3229 00a8 7868     		ldr	r0, [r7, #4]
 3230 00aa FFF7FEFF 		bl	writeSingleCoil
 141:src/modbus.c  **** 		return 1;
 3231              		.loc 1 141 0
 3232 00ae 4FF00103 		mov	r3, #1
 3233 00b2 19E0     		b	.L123
 3234              	.L118:
 142:src/modbus.c  **** 		break;
 143:src/modbus.c  **** 	case WRITE_SINGLE_REGISTER:
 144:src/modbus.c  **** 		writeSingleRegister(qPacket);
 3235              		.loc 1 144 0
 3236 00b4 7868     		ldr	r0, [r7, #4]
 3237 00b6 FFF7FEFF 		bl	writeSingleRegister
 145:src/modbus.c  **** 		return 1;
 3238              		.loc 1 145 0
 3239 00ba 4FF00103 		mov	r3, #1
 3240 00be 13E0     		b	.L123
 3241              	.L120:
 146:src/modbus.c  **** 		break;
 147:src/modbus.c  **** 	case WRITE_MULTIPLE_COILS:
 148:src/modbus.c  **** 		writeMultipleCoils(qPacket);
 3242              		.loc 1 148 0
 3243 00c0 7868     		ldr	r0, [r7, #4]
 3244 00c2 FFF7FEFF 		bl	writeMultipleCoils
 149:src/modbus.c  **** 		return 1;
 3245              		.loc 1 149 0
 3246 00c6 4FF00103 		mov	r3, #1
 3247 00ca 0DE0     		b	.L123
 3248              	.L121:
 150:src/modbus.c  **** 		break;
 151:src/modbus.c  **** 	case WRITE_MULTIPLE_REGISTERS:
 152:src/modbus.c  **** 		writeMultipleRegisters(qPacket);
 3249              		.loc 1 152 0
 3250 00cc 7868     		ldr	r0, [r7, #4]
 3251 00ce FFF7FEFF 		bl	writeMultipleRegisters
 153:src/modbus.c  **** 		return 1;
 3252              		.loc 1 153 0
 3253 00d2 4FF00103 		mov	r3, #1
 3254 00d6 07E0     		b	.L123
 3255              	.L119:
 154:src/modbus.c  **** 		break;
 155:src/modbus.c  **** 	case READ_EXCEPTION_STATUS:
 156:src/modbus.c  **** 		readExceptionStatus(qPacket);
 3256              		.loc 1 156 0
 3257 00d8 7868     		ldr	r0, [r7, #4]
 3258 00da FFF7FEFF 		bl	readExceptionStatus
 157:src/modbus.c  **** 		return 1;
 3259              		.loc 1 157 0
 3260 00de 4FF00103 		mov	r3, #1
 3261 00e2 01E0     		b	.L123
 3262              	.L112:
 158:src/modbus.c  **** 		break;
 159:src/modbus.c  **** 	default:
 160:src/modbus.c  **** 		return 0;
 3263              		.loc 1 160 0
 3264 00e4 4FF00003 		mov	r3, #0
 3265              	.L123:
 161:src/modbus.c  **** 	}
 162:src/modbus.c  **** }
 3266              		.loc 1 162 0
 3267 00e8 1846     		mov	r0, r3
 3268 00ea 07F10807 		add	r7, r7, #8
 3269 00ee BD46     		mov	sp, r7
 3270 00f0 80BD     		pop	{r7, pc}
 3271              	.L125:
 3272 00f2 00BF     		.align	2
 3273              	.L124:
 3274 00f4 00000000 		.word	rPacket
 3275              		.cfi_endproc
 3276              	.LFE6:
 3278              		.section	.text.writeMultipleRegisters,"ax",%progbits
 3279              		.align	2
 3280              		.global	writeMultipleRegisters
 3281              		.thumb
 3282              		.thumb_func
 3284              	writeMultipleRegisters:
 3285              	.LFB7:
 163:src/modbus.c  **** 
 164:src/modbus.c  **** 
 165:src/modbus.c  **** //TODO : Code to be checked for Multiple Register Writing
 166:src/modbus.c  **** uint32_t writeMultipleRegisters(uint32_t *qPacket) {
 3286              		.loc 1 166 0
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 56
 3289              		@ frame_needed = 1, uses_anonymous_args = 0
 3290 0000 80B5     		push	{r7, lr}
 3291              	.LCFI21:
 3292              		.cfi_def_cfa_offset 8
 3293 0002 8EB0     		sub	sp, sp, #56
 3294              	.LCFI22:
 3295              		.cfi_def_cfa_offset 64
 3296 0004 00AF     		add	r7, sp, #0
 3297              		.cfi_offset 14, -4
 3298              		.cfi_offset 7, -8
 3299              	.LCFI23:
 3300              		.cfi_def_cfa_register 7
 3301 0006 7860     		str	r0, [r7, #4]
 167:src/modbus.c  **** 
 168:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 169:src/modbus.c  **** 	qPacket++;
 3302              		.loc 1 169 0
 3303 0008 7B68     		ldr	r3, [r7, #4]
 3304 000a 03F10403 		add	r3, r3, #4
 3305 000e 7B60     		str	r3, [r7, #4]
 170:src/modbus.c  **** 
 171:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 172:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3306              		.loc 1 172 0
 3307 0010 7B68     		ldr	r3, [r7, #4]
 3308 0012 1B68     		ldr	r3, [r3, #0]
 3309 0014 03F51C43 		add	r3, r3, #39936
 3310 0018 03F14003 		add	r3, r3, #64
 3311 001c 584A     		ldr	r2, .L132
 3312 001e 1360     		str	r3, [r2, #0]
 3313 0020 7B68     		ldr	r3, [r7, #4]
 3314 0022 03F10403 		add	r3, r3, #4
 3315 0026 7B60     		str	r3, [r7, #4]
 173:src/modbus.c  **** 
 174:src/modbus.c  **** 	//Data address of first coil
 175:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3316              		.loc 1 175 0
 3317 0028 564B     		ldr	r3, .L132+4
 3318 002a 1B68     		ldr	r3, [r3, #0]
 3319 002c 544A     		ldr	r2, .L132
 3320 002e 1268     		ldr	r2, [r2, #0]
 3321 0030 1A60     		str	r2, [r3, #0]
 176:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 177:src/modbus.c  **** 	rPacket++;
 3322              		.loc 1 177 0
 3323 0032 544B     		ldr	r3, .L132+4
 3324 0034 1B68     		ldr	r3, [r3, #0]
 3325 0036 03F10402 		add	r2, r3, #4
 3326 003a 524B     		ldr	r3, .L132+4
 3327 003c 1A60     		str	r2, [r3, #0]
 178:src/modbus.c  **** 
 179:src/modbus.c  **** 	//move the number of registers to be written.
 180:src/modbus.c  **** 	totalRequest = *qPacket++;
 3328              		.loc 1 180 0
 3329 003e 7B68     		ldr	r3, [r7, #4]
 3330 0040 1A68     		ldr	r2, [r3, #0]
 3331 0042 514B     		ldr	r3, .L132+8
 3332 0044 1A60     		str	r2, [r3, #0]
 3333 0046 7B68     		ldr	r3, [r7, #4]
 3334 0048 03F10403 		add	r3, r3, #4
 3335 004c 7B60     		str	r3, [r7, #4]
 181:src/modbus.c  **** 
 182:src/modbus.c  **** 	//Number of registers to be written
 183:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3336              		.loc 1 183 0
 3337 004e 4D4B     		ldr	r3, .L132+4
 3338 0050 1B68     		ldr	r3, [r3, #0]
 3339 0052 4D4A     		ldr	r2, .L132+8
 3340 0054 1268     		ldr	r2, [r2, #0]
 3341 0056 1A60     		str	r2, [r3, #0]
 184:src/modbus.c  **** 	rPacket++;
 3342              		.loc 1 184 0
 3343 0058 4A4B     		ldr	r3, .L132+4
 3344 005a 1B68     		ldr	r3, [r3, #0]
 3345 005c 03F10402 		add	r2, r3, #4
 3346 0060 484B     		ldr	r3, .L132+4
 3347 0062 1A60     		str	r2, [r3, #0]
 185:src/modbus.c  **** 
 186:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 187:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3348              		.loc 1 187 0
 3349 0064 7B68     		ldr	r3, [r7, #4]
 3350 0066 1B68     		ldr	r3, [r3, #0]
 3351 0068 FB61     		str	r3, [r7, #28]
 3352 006a 7B68     		ldr	r3, [r7, #4]
 3353 006c 03F10403 		add	r3, r3, #4
 3354 0070 7B60     		str	r3, [r7, #4]
 188:src/modbus.c  **** 
 189:src/modbus.c  **** 	//Fetch first address data.
 190:src/modbus.c  **** 	s = getData(firstRequest++);
 3355              		.loc 1 190 0
 3356 0072 434B     		ldr	r3, .L132
 3357 0074 1B68     		ldr	r3, [r3, #0]
 3358 0076 1A46     		mov	r2, r3
 3359 0078 03F10101 		add	r1, r3, #1
 3360 007c 404B     		ldr	r3, .L132
 3361 007e 1960     		str	r1, [r3, #0]
 3362 0080 1046     		mov	r0, r2
 3363 0082 FFF7FEFF 		bl	getData
 3364 0086 0246     		mov	r2, r0
 3365 0088 404B     		ldr	r3, .L132+12
 3366 008a 1A60     		str	r2, [r3, #0]
 191:src/modbus.c  **** 
 192:src/modbus.c  **** 	//For WRITE_MULTIPLE_REGISTERS
 193:src/modbus.c  **** 	uint32_t *tempWriteData = qPacket;
 3367              		.loc 1 193 0
 3368 008c 7B68     		ldr	r3, [r7, #4]
 3369 008e BB61     		str	r3, [r7, #24]
 194:src/modbus.c  **** 
 195:src/modbus.c  **** 	int dataToBeWritten = *tempWriteData++;
 3370              		.loc 1 195 0
 3371 0090 BB69     		ldr	r3, [r7, #24]
 3372 0092 1B68     		ldr	r3, [r3, #0]
 3373 0094 7B61     		str	r3, [r7, #20]
 3374 0096 BB69     		ldr	r3, [r7, #24]
 3375 0098 03F10403 		add	r3, r3, #4
 3376 009c BB61     		str	r3, [r7, #24]
 196:src/modbus.c  **** 
 197:src/modbus.c  **** 	int tempWriteRequest = (int) dataToBeWritten;
 3377              		.loc 1 197 0
 3378 009e 7B69     		ldr	r3, [r7, #20]
 3379 00a0 7B63     		str	r3, [r7, #52]
 198:src/modbus.c  **** 	int count = byteStream;
 3380              		.loc 1 198 0
 3381 00a2 FB69     		ldr	r3, [r7, #28]
 3382 00a4 3B63     		str	r3, [r7, #48]
 199:src/modbus.c  **** 	int fromBit = 0;
 3383              		.loc 1 199 0
 3384 00a6 4FF00003 		mov	r3, #0
 3385 00aa FB62     		str	r3, [r7, #44]
 200:src/modbus.c  **** 	int toBit = 7;
 3386              		.loc 1 200 0
 3387 00ac 4FF00703 		mov	r3, #7
 3388 00b0 BB62     		str	r3, [r7, #40]
 201:src/modbus.c  **** 	int shiftRight;
 202:src/modbus.c  **** 	//int d;
 203:src/modbus.c  **** 
 204:src/modbus.c  **** 	again: while (count != 0) {
 3389              		.loc 1 204 0
 3390 00b2 5AE0     		b	.L128
 3391              	.L131:
 3392              	.LBB9:
 205:src/modbus.c  **** 
 206:src/modbus.c  **** 		//Call masking function and store value in r.
 207:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3393              		.loc 1 207 0
 3394 00b4 F86A     		ldr	r0, [r7, #44]
 3395 00b6 B96A     		ldr	r1, [r7, #40]
 3396 00b8 FFF7FEFF 		bl	getMask
 3397 00bc 3861     		str	r0, [r7, #16]
 208:src/modbus.c  **** 
 209:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 210:src/modbus.c  **** 		unsigned int result = r & s->value;
 3398              		.loc 1 210 0
 3399 00be 334B     		ldr	r3, .L132+12
 3400 00c0 1B68     		ldr	r3, [r3, #0]
 3401 00c2 5B68     		ldr	r3, [r3, #4]
 3402 00c4 1A46     		mov	r2, r3
 3403 00c6 3B69     		ldr	r3, [r7, #16]
 3404 00c8 02EA0303 		and	r3, r2, r3
 3405 00cc 3B62     		str	r3, [r7, #32]
 211:src/modbus.c  **** 
 212:src/modbus.c  **** 		tempWriteRequest = r & tempWriteRequest;
 3406              		.loc 1 212 0
 3407 00ce 7A6B     		ldr	r2, [r7, #52]
 3408 00d0 3B69     		ldr	r3, [r7, #16]
 3409 00d2 02EA0303 		and	r3, r2, r3
 3410 00d6 7B63     		str	r3, [r7, #52]
 213:src/modbus.c  **** 
 214:src/modbus.c  **** 		//Else shift right.
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3411              		.loc 1 215 0
 3412 00d8 FB6A     		ldr	r3, [r7, #44]
 3413 00da 7B62     		str	r3, [r7, #36]
 3414 00dc 0BE0     		b	.L129
 3415              	.L130:
 216:src/modbus.c  **** 			result = result >> 1;
 3416              		.loc 1 216 0 discriminator 2
 3417 00de 3B6A     		ldr	r3, [r7, #32]
 3418 00e0 4FEA5303 		lsr	r3, r3, #1
 3419 00e4 3B62     		str	r3, [r7, #32]
 217:src/modbus.c  **** 			tempWriteRequest = tempWriteRequest >> 1;
 3420              		.loc 1 217 0 discriminator 2
 3421 00e6 7B6B     		ldr	r3, [r7, #52]
 3422 00e8 4FEA6303 		asr	r3, r3, #1
 3423 00ec 7B63     		str	r3, [r7, #52]
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3424              		.loc 1 215 0 discriminator 2
 3425 00ee 7B6A     		ldr	r3, [r7, #36]
 3426 00f0 03F1FF33 		add	r3, r3, #-1
 3427 00f4 7B62     		str	r3, [r7, #36]
 3428              	.L129:
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3429              		.loc 1 215 0 is_stmt 0 discriminator 1
 3430 00f6 7B6A     		ldr	r3, [r7, #36]
 3431 00f8 002B     		cmp	r3, #0
 3432 00fa F0DC     		bgt	.L130
 218:src/modbus.c  **** 		}
 219:src/modbus.c  **** 
 220:src/modbus.c  **** 		result = result | tempWriteRequest;
 3433              		.loc 1 220 0 is_stmt 1
 3434 00fc 7B6B     		ldr	r3, [r7, #52]
 3435 00fe 3A6A     		ldr	r2, [r7, #32]
 3436 0100 42EA0303 		orr	r3, r2, r3
 3437 0104 3B62     		str	r3, [r7, #32]
 221:src/modbus.c  **** 
 222:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 223:src/modbus.c  **** 		*rPacket = result;
 3438              		.loc 1 223 0
 3439 0106 1F4B     		ldr	r3, .L132+4
 3440 0108 1B68     		ldr	r3, [r3, #0]
 3441 010a 3A6A     		ldr	r2, [r7, #32]
 3442 010c 1A60     		str	r2, [r3, #0]
 224:src/modbus.c  **** 		rPacket++;
 3443              		.loc 1 224 0
 3444 010e 1D4B     		ldr	r3, .L132+4
 3445 0110 1B68     		ldr	r3, [r3, #0]
 3446 0112 03F10402 		add	r2, r3, #4
 3447 0116 1B4B     		ldr	r3, .L132+4
 3448 0118 1A60     		str	r2, [r3, #0]
 225:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 226:src/modbus.c  **** 
 227:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 228:src/modbus.c  **** 		count--;
 3449              		.loc 1 228 0
 3450 011a 3B6B     		ldr	r3, [r7, #48]
 3451 011c 03F1FF33 		add	r3, r3, #-1
 3452 0120 3B63     		str	r3, [r7, #48]
 229:src/modbus.c  **** 		fromBit = fromBit + 8;
 3453              		.loc 1 229 0
 3454 0122 FB6A     		ldr	r3, [r7, #44]
 3455 0124 03F10803 		add	r3, r3, #8
 3456 0128 FB62     		str	r3, [r7, #44]
 230:src/modbus.c  **** 		toBit = toBit + 8;
 3457              		.loc 1 230 0
 3458 012a BB6A     		ldr	r3, [r7, #40]
 3459 012c 03F10803 		add	r3, r3, #8
 3460 0130 BB62     		str	r3, [r7, #40]
 231:src/modbus.c  **** 		tempWriteRequest = (int) dataToBeWritten;
 3461              		.loc 1 231 0
 3462 0132 7B69     		ldr	r3, [r7, #20]
 3463 0134 7B63     		str	r3, [r7, #52]
 232:src/modbus.c  **** 
 233:src/modbus.c  **** 		// If two bytes written then move on to next register
 234:src/modbus.c  **** 		if (count == 2) {
 3464              		.loc 1 234 0
 3465 0136 3B6B     		ldr	r3, [r7, #48]
 3466 0138 022B     		cmp	r3, #2
 3467 013a 16D1     		bne	.L128
 3468              	.LBB10:
 235:src/modbus.c  **** 			s = getData(firstRequest++);
 3469              		.loc 1 235 0
 3470 013c 104B     		ldr	r3, .L132
 3471 013e 1B68     		ldr	r3, [r3, #0]
 3472 0140 1A46     		mov	r2, r3
 3473 0142 03F10101 		add	r1, r3, #1
 3474 0146 0E4B     		ldr	r3, .L132
 3475 0148 1960     		str	r1, [r3, #0]
 3476 014a 1046     		mov	r0, r2
 3477 014c FFF7FEFF 		bl	getData
 3478 0150 0246     		mov	r2, r0
 3479 0152 0E4B     		ldr	r3, .L132+12
 3480 0154 1A60     		str	r2, [r3, #0]
 236:src/modbus.c  **** 			int dataToBeWritten = *tempWriteData;
 3481              		.loc 1 236 0
 3482 0156 BB69     		ldr	r3, [r7, #24]
 3483 0158 1B68     		ldr	r3, [r3, #0]
 3484 015a FB60     		str	r3, [r7, #12]
 237:src/modbus.c  **** 			fromBit = 0;
 3485              		.loc 1 237 0
 3486 015c 4FF00003 		mov	r3, #0
 3487 0160 FB62     		str	r3, [r7, #44]
 238:src/modbus.c  **** 			toBit = 7;
 3488              		.loc 1 238 0
 3489 0162 4FF00703 		mov	r3, #7
 3490 0166 BB62     		str	r3, [r7, #40]
 239:src/modbus.c  **** 			goto again;
 3491              		.loc 1 239 0
 3492 0168 00BF     		nop
 3493              	.L127:
 3494              	.L128:
 3495              	.LBE10:
 3496              	.LBE9:
 204:src/modbus.c  **** 	again: while (count != 0) {
 3497              		.loc 1 204 0 discriminator 1
 3498 016a 3B6B     		ldr	r3, [r7, #48]
 3499 016c 002B     		cmp	r3, #0
 3500 016e A1D1     		bne	.L131
 240:src/modbus.c  **** 		}
 241:src/modbus.c  **** 	}
 242:src/modbus.c  **** /*
 243:src/modbus.c  **** 	for (d = 0; d < 5; d++) {
 244:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 245:src/modbus.c  **** 	}
 246:src/modbus.c  **** */
 247:src/modbus.c  **** 	return 0;
 3501              		.loc 1 247 0
 3502 0170 4FF00003 		mov	r3, #0
 248:src/modbus.c  **** 
 249:src/modbus.c  **** }
 3503              		.loc 1 249 0
 3504 0174 1846     		mov	r0, r3
 3505 0176 07F13807 		add	r7, r7, #56
 3506 017a BD46     		mov	sp, r7
 3507 017c 80BD     		pop	{r7, pc}
 3508              	.L133:
 3509 017e 00BF     		.align	2
 3510              	.L132:
 3511 0180 00000000 		.word	firstRequest
 3512 0184 00000000 		.word	rPacket
 3513 0188 00000000 		.word	totalRequest
 3514 018c 00000000 		.word	s
 3515              		.cfi_endproc
 3516              	.LFE7:
 3518              		.section	.rodata
 3519              		.align	2
 3520              	.LC1:
 3521 0018 44617461 		.ascii	"Data: 0x%x\012\000"
 3521      3A203078 
 3521      25780A00 
 3522              		.section	.text.writeMultipleCoils,"ax",%progbits
 3523              		.align	2
 3524              		.global	writeMultipleCoils
 3525              		.thumb
 3526              		.thumb_func
 3528              	writeMultipleCoils:
 3529              	.LFB8:
 250:src/modbus.c  **** 
 251:src/modbus.c  **** //TODO : Code to be checked for Multiple Coils Writing
 252:src/modbus.c  **** uint32_t writeMultipleCoils(uint32_t *qPacket) {
 3530              		.loc 1 252 0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 48
 3533              		@ frame_needed = 1, uses_anonymous_args = 0
 3534 0000 80B5     		push	{r7, lr}
 3535              	.LCFI24:
 3536              		.cfi_def_cfa_offset 8
 3537 0002 8CB0     		sub	sp, sp, #48
 3538              	.LCFI25:
 3539              		.cfi_def_cfa_offset 56
 3540 0004 00AF     		add	r7, sp, #0
 3541              		.cfi_offset 14, -4
 3542              		.cfi_offset 7, -8
 3543              	.LCFI26:
 3544              		.cfi_def_cfa_register 7
 3545 0006 7860     		str	r0, [r7, #4]
 253:src/modbus.c  **** 
 254:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 255:src/modbus.c  **** 	qPacket++;
 3546              		.loc 1 255 0
 3547 0008 7B68     		ldr	r3, [r7, #4]
 3548 000a 03F10403 		add	r3, r3, #4
 3549 000e 7B60     		str	r3, [r7, #4]
 256:src/modbus.c  **** 
 257:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 258:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3550              		.loc 1 258 0
 3551 0010 7B68     		ldr	r3, [r7, #4]
 3552 0012 1A68     		ldr	r2, [r3, #0]
 3553 0014 474B     		ldr	r3, .L139
 3554 0016 1A60     		str	r2, [r3, #0]
 3555 0018 7B68     		ldr	r3, [r7, #4]
 3556 001a 03F10403 		add	r3, r3, #4
 3557 001e 7B60     		str	r3, [r7, #4]
 259:src/modbus.c  **** 
 260:src/modbus.c  **** 	//Data address of first coil
 261:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3558              		.loc 1 261 0
 3559 0020 454B     		ldr	r3, .L139+4
 3560 0022 1B68     		ldr	r3, [r3, #0]
 3561 0024 434A     		ldr	r2, .L139
 3562 0026 1268     		ldr	r2, [r2, #0]
 3563 0028 1A60     		str	r2, [r3, #0]
 262:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 263:src/modbus.c  **** 	rPacket++;
 3564              		.loc 1 263 0
 3565 002a 434B     		ldr	r3, .L139+4
 3566 002c 1B68     		ldr	r3, [r3, #0]
 3567 002e 03F10402 		add	r2, r3, #4
 3568 0032 414B     		ldr	r3, .L139+4
 3569 0034 1A60     		str	r2, [r3, #0]
 264:src/modbus.c  **** 
 265:src/modbus.c  **** 	//move the number of coils to be written.
 266:src/modbus.c  **** 	totalRequest = *qPacket++;
 3570              		.loc 1 266 0
 3571 0036 7B68     		ldr	r3, [r7, #4]
 3572 0038 1A68     		ldr	r2, [r3, #0]
 3573 003a 404B     		ldr	r3, .L139+8
 3574 003c 1A60     		str	r2, [r3, #0]
 3575 003e 7B68     		ldr	r3, [r7, #4]
 3576 0040 03F10403 		add	r3, r3, #4
 3577 0044 7B60     		str	r3, [r7, #4]
 267:src/modbus.c  **** 
 268:src/modbus.c  **** 	//Number of coils to be written
 269:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3578              		.loc 1 269 0
 3579 0046 3C4B     		ldr	r3, .L139+4
 3580 0048 1B68     		ldr	r3, [r3, #0]
 3581 004a 3C4A     		ldr	r2, .L139+8
 3582 004c 1268     		ldr	r2, [r2, #0]
 3583 004e 1A60     		str	r2, [r3, #0]
 270:src/modbus.c  **** 	rPacket++;
 3584              		.loc 1 270 0
 3585 0050 394B     		ldr	r3, .L139+4
 3586 0052 1B68     		ldr	r3, [r3, #0]
 3587 0054 03F10402 		add	r2, r3, #4
 3588 0058 374B     		ldr	r3, .L139+4
 3589 005a 1A60     		str	r2, [r3, #0]
 271:src/modbus.c  **** 
 272:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 273:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3590              		.loc 1 273 0
 3591 005c 7B68     		ldr	r3, [r7, #4]
 3592 005e 1B68     		ldr	r3, [r3, #0]
 3593 0060 3B61     		str	r3, [r7, #16]
 3594 0062 7B68     		ldr	r3, [r7, #4]
 3595 0064 03F10403 		add	r3, r3, #4
 3596 0068 7B60     		str	r3, [r7, #4]
 274:src/modbus.c  **** 
 275:src/modbus.c  **** 	//Fetch first address data.
 276:src/modbus.c  **** 	s = getData(firstRequest++);
 3597              		.loc 1 276 0
 3598 006a 324B     		ldr	r3, .L139
 3599 006c 1B68     		ldr	r3, [r3, #0]
 3600 006e 1A46     		mov	r2, r3
 3601 0070 03F10101 		add	r1, r3, #1
 3602 0074 2F4B     		ldr	r3, .L139
 3603 0076 1960     		str	r1, [r3, #0]
 3604 0078 1046     		mov	r0, r2
 3605 007a FFF7FEFF 		bl	getData
 3606 007e 0246     		mov	r2, r0
 3607 0080 2F4B     		ldr	r3, .L139+12
 3608 0082 1A60     		str	r2, [r3, #0]
 277:src/modbus.c  **** 
 278:src/modbus.c  **** 	uint32_t *dataToBeWritten;
 279:src/modbus.c  **** 	dataToBeWritten = qPacket;
 3609              		.loc 1 279 0
 3610 0084 7B68     		ldr	r3, [r7, #4]
 3611 0086 FB62     		str	r3, [r7, #44]
 280:src/modbus.c  **** 	qPacket++;
 3612              		.loc 1 280 0
 3613 0088 7B68     		ldr	r3, [r7, #4]
 3614 008a 03F10403 		add	r3, r3, #4
 3615 008e 7B60     		str	r3, [r7, #4]
 281:src/modbus.c  **** 
 282:src/modbus.c  **** 	int tempWriteRequest = *dataToBeWritten++;
 3616              		.loc 1 282 0
 3617 0090 FB6A     		ldr	r3, [r7, #44]
 3618 0092 1B68     		ldr	r3, [r3, #0]
 3619 0094 BB62     		str	r3, [r7, #40]
 3620 0096 FB6A     		ldr	r3, [r7, #44]
 3621 0098 03F10403 		add	r3, r3, #4
 3622 009c FB62     		str	r3, [r7, #44]
 283:src/modbus.c  **** 	int count = byteStream;
 3623              		.loc 1 283 0
 3624 009e 3B69     		ldr	r3, [r7, #16]
 3625 00a0 7B62     		str	r3, [r7, #36]
 284:src/modbus.c  **** 	int fromBit = 0;
 3626              		.loc 1 284 0
 3627 00a2 4FF00003 		mov	r3, #0
 3628 00a6 3B62     		str	r3, [r7, #32]
 285:src/modbus.c  **** 	int toBit = 7;
 3629              		.loc 1 285 0
 3630 00a8 4FF00703 		mov	r3, #7
 3631 00ac FB61     		str	r3, [r7, #28]
 286:src/modbus.c  **** 	int shiftRight;
 287:src/modbus.c  **** 	int d;
 288:src/modbus.c  **** 
 289:src/modbus.c  **** 	while (count != 0) {
 3632              		.loc 1 289 0
 3633 00ae 36E0     		b	.L135
 3634              	.L138:
 3635              	.LBB11:
 290:src/modbus.c  **** 
 291:src/modbus.c  **** 		//Call masking function and store value in r.
 292:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3636              		.loc 1 292 0
 3637 00b0 386A     		ldr	r0, [r7, #32]
 3638 00b2 F969     		ldr	r1, [r7, #28]
 3639 00b4 FFF7FEFF 		bl	getMask
 3640 00b8 F860     		str	r0, [r7, #12]
 293:src/modbus.c  **** 
 294:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 295:src/modbus.c  **** 		unsigned int result = r & s->value;
 3641              		.loc 1 295 0
 3642 00ba 214B     		ldr	r3, .L139+12
 3643 00bc 1B68     		ldr	r3, [r3, #0]
 3644 00be 5B68     		ldr	r3, [r3, #4]
 3645 00c0 1A46     		mov	r2, r3
 3646 00c2 FB68     		ldr	r3, [r7, #12]
 3647 00c4 02EA0303 		and	r3, r2, r3
 3648 00c8 7B61     		str	r3, [r7, #20]
 296:src/modbus.c  **** 
 297:src/modbus.c  **** 		//tempWriteRequest = r & tempWriteRequest;
 298:src/modbus.c  **** 
 299:src/modbus.c  **** 		//Else shift right.
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3649              		.loc 1 300 0
 3650 00ca 3B6A     		ldr	r3, [r7, #32]
 3651 00cc BB61     		str	r3, [r7, #24]
 3652 00ce 07E0     		b	.L136
 3653              	.L137:
 301:src/modbus.c  **** 			result = result >> 1;
 3654              		.loc 1 301 0 discriminator 2
 3655 00d0 7B69     		ldr	r3, [r7, #20]
 3656 00d2 4FEA5303 		lsr	r3, r3, #1
 3657 00d6 7B61     		str	r3, [r7, #20]
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3658              		.loc 1 300 0 discriminator 2
 3659 00d8 BB69     		ldr	r3, [r7, #24]
 3660 00da 03F1FF33 		add	r3, r3, #-1
 3661 00de BB61     		str	r3, [r7, #24]
 3662              	.L136:
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3663              		.loc 1 300 0 is_stmt 0 discriminator 1
 3664 00e0 BB69     		ldr	r3, [r7, #24]
 3665 00e2 002B     		cmp	r3, #0
 3666 00e4 F4DC     		bgt	.L137
 302:src/modbus.c  **** 			//tempWriteRequest = tempWriteRequest << 1;
 303:src/modbus.c  **** 		}
 304:src/modbus.c  **** 
 305:src/modbus.c  **** 		result = result | tempWriteRequest;
 3667              		.loc 1 305 0 is_stmt 1
 3668 00e6 BB6A     		ldr	r3, [r7, #40]
 3669 00e8 7A69     		ldr	r2, [r7, #20]
 3670 00ea 42EA0303 		orr	r3, r2, r3
 3671 00ee 7B61     		str	r3, [r7, #20]
 306:src/modbus.c  **** 
 307:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 308:src/modbus.c  **** //		*rPacket = result;
 309:src/modbus.c  **** //		rPacket++;
 310:src/modbus.c  **** 		printf("Data: 0x%x\n", result);
 3672              		.loc 1 310 0
 3673 00f0 1448     		ldr	r0, .L139+16
 3674 00f2 7969     		ldr	r1, [r7, #20]
 3675 00f4 FFF7FEFF 		bl	printf
 311:src/modbus.c  **** 
 312:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 313:src/modbus.c  **** 		count--;
 3676              		.loc 1 313 0
 3677 00f8 7B6A     		ldr	r3, [r7, #36]
 3678 00fa 03F1FF33 		add	r3, r3, #-1
 3679 00fe 7B62     		str	r3, [r7, #36]
 314:src/modbus.c  **** 		fromBit = fromBit + 8;
 3680              		.loc 1 314 0
 3681 0100 3B6A     		ldr	r3, [r7, #32]
 3682 0102 03F10803 		add	r3, r3, #8
 3683 0106 3B62     		str	r3, [r7, #32]
 315:src/modbus.c  **** 		toBit = toBit + 8;
 3684              		.loc 1 315 0
 3685 0108 FB69     		ldr	r3, [r7, #28]
 3686 010a 03F10803 		add	r3, r3, #8
 3687 010e FB61     		str	r3, [r7, #28]
 316:src/modbus.c  **** 		tempWriteRequest = *dataToBeWritten++;
 3688              		.loc 1 316 0
 3689 0110 FB6A     		ldr	r3, [r7, #44]
 3690 0112 1B68     		ldr	r3, [r3, #0]
 3691 0114 BB62     		str	r3, [r7, #40]
 3692 0116 FB6A     		ldr	r3, [r7, #44]
 3693 0118 03F10403 		add	r3, r3, #4
 3694 011c FB62     		str	r3, [r7, #44]
 3695              	.L135:
 3696              	.LBE11:
 289:src/modbus.c  **** 	while (count != 0) {
 3697              		.loc 1 289 0 discriminator 1
 3698 011e 7B6A     		ldr	r3, [r7, #36]
 3699 0120 002B     		cmp	r3, #0
 3700 0122 C5D1     		bne	.L138
 317:src/modbus.c  **** 	}
 318:src/modbus.c  **** 
 319:src/modbus.c  **** //	for (d = 0; d < 5; d++) {
 320:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 321:src/modbus.c  **** //	}
 322:src/modbus.c  **** 
 323:src/modbus.c  **** 	return 0;
 3701              		.loc 1 323 0
 3702 0124 4FF00003 		mov	r3, #0
 324:src/modbus.c  **** }
 3703              		.loc 1 324 0
 3704 0128 1846     		mov	r0, r3
 3705 012a 07F13007 		add	r7, r7, #48
 3706 012e BD46     		mov	sp, r7
 3707 0130 80BD     		pop	{r7, pc}
 3708              	.L140:
 3709 0132 00BF     		.align	2
 3710              	.L139:
 3711 0134 00000000 		.word	firstRequest
 3712 0138 00000000 		.word	rPacket
 3713 013c 00000000 		.word	totalRequest
 3714 0140 00000000 		.word	s
 3715 0144 18000000 		.word	.LC1
 3716              		.cfi_endproc
 3717              	.LFE8:
 3719              		.section	.text.readExceptionStatus,"ax",%progbits
 3720              		.align	2
 3721              		.global	readExceptionStatus
 3722              		.thumb
 3723              		.thumb_func
 3725              	readExceptionStatus:
 3726              	.LFB9:
 325:src/modbus.c  **** 
 326:src/modbus.c  **** uint32_t readExceptionStatus(uint32_t *qPacket) {
 3727              		.loc 1 326 0
 3728              		.cfi_startproc
 3729              		@ args = 0, pretend = 0, frame = 8
 3730              		@ frame_needed = 1, uses_anonymous_args = 0
 3731              		@ link register save eliminated.
 3732 0000 80B4     		push	{r7}
 3733              	.LCFI27:
 3734              		.cfi_def_cfa_offset 4
 3735 0002 83B0     		sub	sp, sp, #12
 3736              	.LCFI28:
 3737              		.cfi_def_cfa_offset 16
 3738 0004 00AF     		add	r7, sp, #0
 3739              		.cfi_offset 7, -4
 3740              	.LCFI29:
 3741              		.cfi_def_cfa_register 7
 3742 0006 7860     		str	r0, [r7, #4]
 327:src/modbus.c  **** 	return 0;
 3743              		.loc 1 327 0
 3744 0008 4FF00003 		mov	r3, #0
 328:src/modbus.c  **** }
 3745              		.loc 1 328 0
 3746 000c 1846     		mov	r0, r3
 3747 000e 07F10C07 		add	r7, r7, #12
 3748 0012 BD46     		mov	sp, r7
 3749 0014 80BC     		pop	{r7}
 3750 0016 7047     		bx	lr
 3751              		.cfi_endproc
 3752              	.LFE9:
 3754              		.section	.text.writeSingleRegister,"ax",%progbits
 3755              		.align	2
 3756              		.global	writeSingleRegister
 3757              		.thumb
 3758              		.thumb_func
 3760              	writeSingleRegister:
 3761              	.LFB10:
 329:src/modbus.c  **** 
 330:src/modbus.c  **** uint32_t writeSingleRegister(uint32_t *qPacket) {
 3762              		.loc 1 330 0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 40
 3765              		@ frame_needed = 1, uses_anonymous_args = 0
 3766 0000 80B5     		push	{r7, lr}
 3767              	.LCFI30:
 3768              		.cfi_def_cfa_offset 8
 3769 0002 8AB0     		sub	sp, sp, #40
 3770              	.LCFI31:
 3771              		.cfi_def_cfa_offset 48
 3772 0004 00AF     		add	r7, sp, #0
 3773              		.cfi_offset 14, -4
 3774              		.cfi_offset 7, -8
 3775              	.LCFI32:
 3776              		.cfi_def_cfa_register 7
 3777 0006 7860     		str	r0, [r7, #4]
 331:src/modbus.c  **** 
 332:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 333:src/modbus.c  **** 	qPacket++;
 3778              		.loc 1 333 0
 3779 0008 7B68     		ldr	r3, [r7, #4]
 3780 000a 03F10403 		add	r3, r3, #4
 3781 000e 7B60     		str	r3, [r7, #4]
 334:src/modbus.c  **** 
 335:src/modbus.c  **** 	//Store the address requested and move it to response packet
 336:src/modbus.c  **** 	uint32_t tempWriteAddress = *qPacket;
 3782              		.loc 1 336 0
 3783 0010 7B68     		ldr	r3, [r7, #4]
 3784 0012 1B68     		ldr	r3, [r3, #0]
 3785 0014 FB61     		str	r3, [r7, #28]
 337:src/modbus.c  **** 	*rPacket = (unsigned int) tempWriteAddress;
 3786              		.loc 1 337 0
 3787 0016 304B     		ldr	r3, .L145
 3788 0018 1B68     		ldr	r3, [r3, #0]
 3789 001a FA69     		ldr	r2, [r7, #28]
 3790 001c 1A60     		str	r2, [r3, #0]
 338:src/modbus.c  **** 	rPacket++;
 3791              		.loc 1 338 0
 3792 001e 2E4B     		ldr	r3, .L145
 3793 0020 1B68     		ldr	r3, [r3, #0]
 3794 0022 03F10402 		add	r2, r3, #4
 3795 0026 2C4B     		ldr	r3, .L145
 3796 0028 1A60     		str	r2, [r3, #0]
 339:src/modbus.c  **** 
 340:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 341:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 342:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3797              		.loc 1 342 0
 3798 002a 7B68     		ldr	r3, [r7, #4]
 3799 002c 1B68     		ldr	r3, [r3, #0]
 3800 002e 03F51C43 		add	r3, r3, #39936
 3801 0032 03F14003 		add	r3, r3, #64
 3802 0036 294A     		ldr	r2, .L145+4
 3803 0038 1360     		str	r3, [r2, #0]
 3804 003a 7B68     		ldr	r3, [r7, #4]
 3805 003c 03F10403 		add	r3, r3, #4
 3806 0040 7B60     		str	r3, [r7, #4]
 343:src/modbus.c  **** 
 344:src/modbus.c  **** 	//move the data to be written
 345:src/modbus.c  **** 	writeRequest = *qPacket;
 3807              		.loc 1 345 0
 3808 0042 7B68     		ldr	r3, [r7, #4]
 3809 0044 1A68     		ldr	r2, [r3, #0]
 3810 0046 264B     		ldr	r3, .L145+8
 3811 0048 1A60     		str	r2, [r3, #0]
 346:src/modbus.c  **** 
 347:src/modbus.c  **** 	//stream to be sent back to response packet
 348:src/modbus.c  **** 	//*rPacket = (unsigned int) firstRequest;
 349:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 350:src/modbus.c  **** 	//rPacket++;
 351:src/modbus.c  **** 
 352:src/modbus.c  **** 	//Fetch first address data.
 353:src/modbus.c  **** 	s = getData(firstRequest++);
 3812              		.loc 1 353 0
 3813 004a 244B     		ldr	r3, .L145+4
 3814 004c 1B68     		ldr	r3, [r3, #0]
 3815 004e 1A46     		mov	r2, r3
 3816 0050 03F10101 		add	r1, r3, #1
 3817 0054 214B     		ldr	r3, .L145+4
 3818 0056 1960     		str	r1, [r3, #0]
 3819 0058 1046     		mov	r0, r2
 3820 005a FFF7FEFF 		bl	getData
 3821 005e 0246     		mov	r2, r0
 3822 0060 204B     		ldr	r3, .L145+12
 3823 0062 1A60     		str	r2, [r3, #0]
 354:src/modbus.c  **** 
 355:src/modbus.c  **** 	int tempWriteRequest = (int) writeRequest;
 3824              		.loc 1 355 0
 3825 0064 1E4B     		ldr	r3, .L145+8
 3826 0066 1B68     		ldr	r3, [r3, #0]
 3827 0068 BB61     		str	r3, [r7, #24]
 356:src/modbus.c  **** 	int fromBit = 0;
 3828              		.loc 1 356 0
 3829 006a 4FF00003 		mov	r3, #0
 3830 006e 7B61     		str	r3, [r7, #20]
 357:src/modbus.c  **** 	int toBit = 32;
 3831              		.loc 1 357 0
 3832 0070 4FF02003 		mov	r3, #32
 3833 0074 3B61     		str	r3, [r7, #16]
 358:src/modbus.c  **** 	int shiftRight;
 359:src/modbus.c  **** 	int d;
 360:src/modbus.c  **** 
 361:src/modbus.c  **** 	//Call masking function and store value in r.
 362:src/modbus.c  **** 	unsigned int r = getMask(fromBit, toBit);
 3834              		.loc 1 362 0
 3835 0076 7869     		ldr	r0, [r7, #20]
 3836 0078 3969     		ldr	r1, [r7, #16]
 3837 007a FFF7FEFF 		bl	getMask
 3838 007e F860     		str	r0, [r7, #12]
 363:src/modbus.c  **** 
 364:src/modbus.c  **** 	//Get masking done on data from hash and store in result.
 365:src/modbus.c  **** 	unsigned int result = r & s->value;
 3839              		.loc 1 365 0
 3840 0080 184B     		ldr	r3, .L145+12
 3841 0082 1B68     		ldr	r3, [r3, #0]
 3842 0084 5B68     		ldr	r3, [r3, #4]
 3843 0086 1A46     		mov	r2, r3
 3844 0088 FB68     		ldr	r3, [r7, #12]
 3845 008a 02EA0303 		and	r3, r2, r3
 3846 008e 3B62     		str	r3, [r7, #32]
 366:src/modbus.c  **** 
 367:src/modbus.c  **** 	//Else shift right.
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3847              		.loc 1 368 0
 3848 0090 7B69     		ldr	r3, [r7, #20]
 3849 0092 7B62     		str	r3, [r7, #36]
 3850 0094 07E0     		b	.L143
 3851              	.L144:
 369:src/modbus.c  **** 		result = result >> 1;
 3852              		.loc 1 369 0 discriminator 2
 3853 0096 3B6A     		ldr	r3, [r7, #32]
 3854 0098 4FEA5303 		lsr	r3, r3, #1
 3855 009c 3B62     		str	r3, [r7, #32]
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3856              		.loc 1 368 0 discriminator 2
 3857 009e 7B6A     		ldr	r3, [r7, #36]
 3858 00a0 03F1FF33 		add	r3, r3, #-1
 3859 00a4 7B62     		str	r3, [r7, #36]
 3860              	.L143:
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3861              		.loc 1 368 0 is_stmt 0 discriminator 1
 3862 00a6 7B6A     		ldr	r3, [r7, #36]
 3863 00a8 002B     		cmp	r3, #0
 3864 00aa F4DC     		bgt	.L144
 370:src/modbus.c  **** 	}
 371:src/modbus.c  **** 
 372:src/modbus.c  **** 	//printf("Data: 0x%x\n", result);
 373:src/modbus.c  **** 
 374:src/modbus.c  **** 	result = result | tempWriteRequest;
 3865              		.loc 1 374 0 is_stmt 1
 3866 00ac BB69     		ldr	r3, [r7, #24]
 3867 00ae 3A6A     		ldr	r2, [r7, #32]
 3868 00b0 42EA0303 		orr	r3, r2, r3
 3869 00b4 3B62     		str	r3, [r7, #32]
 375:src/modbus.c  **** 
 376:src/modbus.c  **** 	//Store the data to be sent in response packet one by one till requested bits reached.
 377:src/modbus.c  **** 	//*rPacket = result;
 378:src/modbus.c  **** 	//rPacket++;
 379:src/modbus.c  **** 	*rPacket = tempWriteRequest;
 3870              		.loc 1 379 0
 3871 00b6 084B     		ldr	r3, .L145
 3872 00b8 1B68     		ldr	r3, [r3, #0]
 3873 00ba BA69     		ldr	r2, [r7, #24]
 3874 00bc 1A60     		str	r2, [r3, #0]
 380:src/modbus.c  **** 	rPacket++;
 3875              		.loc 1 380 0
 3876 00be 064B     		ldr	r3, .L145
 3877 00c0 1B68     		ldr	r3, [r3, #0]
 3878 00c2 03F10402 		add	r2, r3, #4
 3879 00c6 044B     		ldr	r3, .L145
 3880 00c8 1A60     		str	r2, [r3, #0]
 381:src/modbus.c  **** 
 382:src/modbus.c  **** //	for (d = 0; d < (1 + 5); d++) {
 383:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 384:src/modbus.c  **** //	}
 385:src/modbus.c  **** 
 386:src/modbus.c  **** 	return 0;
 3881              		.loc 1 386 0
 3882 00ca 4FF00003 		mov	r3, #0
 387:src/modbus.c  **** 
 388:src/modbus.c  **** }
 3883              		.loc 1 388 0
 3884 00ce 1846     		mov	r0, r3
 3885 00d0 07F12807 		add	r7, r7, #40
 3886 00d4 BD46     		mov	sp, r7
 3887 00d6 80BD     		pop	{r7, pc}
 3888              	.L146:
 3889              		.align	2
 3890              	.L145:
 3891 00d8 00000000 		.word	rPacket
 3892 00dc 00000000 		.word	firstRequest
 3893 00e0 00000000 		.word	writeRequest
 3894 00e4 00000000 		.word	s
 3895              		.cfi_endproc
 3896              	.LFE10:
 3898              		.section	.text.writeSingleCoil,"ax",%progbits
 3899              		.align	2
 3900              		.global	writeSingleCoil
 3901              		.thumb
 3902              		.thumb_func
 3904              	writeSingleCoil:
 3905              	.LFB11:
 389:src/modbus.c  **** 
 390:src/modbus.c  **** 
 391:src/modbus.c  **** //TODO : Check what to use for writing ON (0xffff0000 or 0xff00) and OFF (0x00000000 or 0x0000)
 392:src/modbus.c  **** uint32_t writeSingleCoil(uint32_t *qPacket) {
 3906              		.loc 1 392 0
 3907              		.cfi_startproc
 3908              		@ args = 0, pretend = 0, frame = 40
 3909              		@ frame_needed = 1, uses_anonymous_args = 0
 3910 0000 80B5     		push	{r7, lr}
 3911              	.LCFI33:
 3912              		.cfi_def_cfa_offset 8
 3913 0002 8AB0     		sub	sp, sp, #40
 3914              	.LCFI34:
 3915              		.cfi_def_cfa_offset 48
 3916 0004 00AF     		add	r7, sp, #0
 3917              		.cfi_offset 14, -4
 3918              		.cfi_offset 7, -8
 3919              	.LCFI35:
 3920              		.cfi_def_cfa_register 7
 3921 0006 7860     		str	r0, [r7, #4]
 393:src/modbus.c  **** 
 394:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 395:src/modbus.c  **** 	qPacket++;
 3922              		.loc 1 395 0
 3923 0008 7B68     		ldr	r3, [r7, #4]
 3924 000a 03F10403 		add	r3, r3, #4
 3925 000e 7B60     		str	r3, [r7, #4]
 396:src/modbus.c  **** 
 397:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 398:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 399:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3926              		.loc 1 399 0
 3927 0010 7B68     		ldr	r3, [r7, #4]
 3928 0012 1A68     		ldr	r2, [r3, #0]
 3929 0014 374B     		ldr	r3, .L152
 3930 0016 1A60     		str	r2, [r3, #0]
 3931 0018 7B68     		ldr	r3, [r7, #4]
 3932 001a 03F10403 		add	r3, r3, #4
 3933 001e 7B60     		str	r3, [r7, #4]
 400:src/modbus.c  **** 
 401:src/modbus.c  **** 	//move the data to be written
 402:src/modbus.c  **** 	uint32_t *writeRequest = qPacket;
 3934              		.loc 1 402 0
 3935 0020 7B68     		ldr	r3, [r7, #4]
 3936 0022 7B62     		str	r3, [r7, #36]
 403:src/modbus.c  **** //	writeRequest+=3;
 404:src/modbus.c  **** 
 405:src/modbus.c  **** 	//stream to be sent back to response packet
 406:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3937              		.loc 1 406 0
 3938 0024 344B     		ldr	r3, .L152+4
 3939 0026 1B68     		ldr	r3, [r3, #0]
 3940 0028 324A     		ldr	r2, .L152
 3941 002a 1268     		ldr	r2, [r2, #0]
 3942 002c 1A60     		str	r2, [r3, #0]
 407:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 408:src/modbus.c  **** 	rPacket++;
 3943              		.loc 1 408 0
 3944 002e 324B     		ldr	r3, .L152+4
 3945 0030 1B68     		ldr	r3, [r3, #0]
 3946 0032 03F10402 		add	r2, r3, #4
 3947 0036 304B     		ldr	r3, .L152+4
 3948 0038 1A60     		str	r2, [r3, #0]
 409:src/modbus.c  **** 
 410:src/modbus.c  **** 	//Fetch first address data.
 411:src/modbus.c  **** 	s = getData(firstRequest++);
 3949              		.loc 1 411 0
 3950 003a 2E4B     		ldr	r3, .L152
 3951 003c 1B68     		ldr	r3, [r3, #0]
 3952 003e 1A46     		mov	r2, r3
 3953 0040 03F10101 		add	r1, r3, #1
 3954 0044 2B4B     		ldr	r3, .L152
 3955 0046 1960     		str	r1, [r3, #0]
 3956 0048 1046     		mov	r0, r2
 3957 004a FFF7FEFF 		bl	getData
 3958 004e 0246     		mov	r2, r0
 3959 0050 2A4B     		ldr	r3, .L152+8
 3960 0052 1A60     		str	r2, [r3, #0]
 412:src/modbus.c  **** 
 413:src/modbus.c  **** 	//int tempWriteRequest = (int) writeRequest;
 414:src/modbus.c  **** 	int fromBit = 0;
 3961              		.loc 1 414 0
 3962 0054 4FF00003 		mov	r3, #0
 3963 0058 3B62     		str	r3, [r7, #32]
 415:src/modbus.c  **** 	int toBit = 7;
 3964              		.loc 1 415 0
 3965 005a 4FF00703 		mov	r3, #7
 3966 005e FB61     		str	r3, [r7, #28]
 416:src/modbus.c  **** 	int shiftRight;
 417:src/modbus.c  **** 	int d;
 418:src/modbus.c  **** 	int count = 0;
 3967              		.loc 1 418 0
 3968 0060 4FF00003 		mov	r3, #0
 3969 0064 7B61     		str	r3, [r7, #20]
 419:src/modbus.c  **** 	unsigned int result;
 420:src/modbus.c  **** 
 421:src/modbus.c  **** 	while(count < 2){
 3970              		.loc 1 421 0
 3971 0066 3BE0     		b	.L148
 3972              	.L151:
 3973              	.LBB12:
 422:src/modbus.c  **** 		//Call masking function and store value in r.
 423:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3974              		.loc 1 423 0
 3975 0068 386A     		ldr	r0, [r7, #32]
 3976 006a F969     		ldr	r1, [r7, #28]
 3977 006c FFF7FEFF 		bl	getMask
 3978 0070 F860     		str	r0, [r7, #12]
 424:src/modbus.c  **** 
 425:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 426:src/modbus.c  **** 		result = r & s->value;
 3979              		.loc 1 426 0
 3980 0072 224B     		ldr	r3, .L152+8
 3981 0074 1B68     		ldr	r3, [r3, #0]
 3982 0076 5B68     		ldr	r3, [r3, #4]
 3983 0078 1A46     		mov	r2, r3
 3984 007a FB68     		ldr	r3, [r7, #12]
 3985 007c 02EA0303 		and	r3, r2, r3
 3986 0080 3B61     		str	r3, [r7, #16]
 427:src/modbus.c  **** 
 428:src/modbus.c  **** 		//Else shift right.
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3987              		.loc 1 429 0
 3988 0082 3B6A     		ldr	r3, [r7, #32]
 3989 0084 BB61     		str	r3, [r7, #24]
 3990 0086 07E0     		b	.L149
 3991              	.L150:
 430:src/modbus.c  **** 			result = result >> 1;
 3992              		.loc 1 430 0 discriminator 2
 3993 0088 3B69     		ldr	r3, [r7, #16]
 3994 008a 4FEA5303 		lsr	r3, r3, #1
 3995 008e 3B61     		str	r3, [r7, #16]
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3996              		.loc 1 429 0 discriminator 2
 3997 0090 BB69     		ldr	r3, [r7, #24]
 3998 0092 03F1FF33 		add	r3, r3, #-1
 3999 0096 BB61     		str	r3, [r7, #24]
 4000              	.L149:
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4001              		.loc 1 429 0 is_stmt 0 discriminator 1
 4002 0098 BB69     		ldr	r3, [r7, #24]
 4003 009a 002B     		cmp	r3, #0
 4004 009c F4DC     		bgt	.L150
 431:src/modbus.c  **** 		}
 432:src/modbus.c  **** 
 433:src/modbus.c  **** 		*rPacket = *writeRequest;
 4005              		.loc 1 433 0 is_stmt 1
 4006 009e 164B     		ldr	r3, .L152+4
 4007 00a0 1B68     		ldr	r3, [r3, #0]
 4008 00a2 7A6A     		ldr	r2, [r7, #36]
 4009 00a4 1268     		ldr	r2, [r2, #0]
 4010 00a6 1A60     		str	r2, [r3, #0]
 434:src/modbus.c  **** 		rPacket++;
 4011              		.loc 1 434 0
 4012 00a8 134B     		ldr	r3, .L152+4
 4013 00aa 1B68     		ldr	r3, [r3, #0]
 4014 00ac 03F10402 		add	r2, r3, #4
 4015 00b0 114B     		ldr	r3, .L152+4
 4016 00b2 1A60     		str	r2, [r3, #0]
 435:src/modbus.c  **** 
 436:src/modbus.c  **** 		result = result | *writeRequest++;
 4017              		.loc 1 436 0
 4018 00b4 7B6A     		ldr	r3, [r7, #36]
 4019 00b6 1B68     		ldr	r3, [r3, #0]
 4020 00b8 3A69     		ldr	r2, [r7, #16]
 4021 00ba 42EA0303 		orr	r3, r2, r3
 4022 00be 3B61     		str	r3, [r7, #16]
 4023 00c0 7B6A     		ldr	r3, [r7, #36]
 4024 00c2 03F10403 		add	r3, r3, #4
 4025 00c6 7B62     		str	r3, [r7, #36]
 437:src/modbus.c  **** 
 438:src/modbus.c  **** 		fromBit = fromBit + 8;
 4026              		.loc 1 438 0
 4027 00c8 3B6A     		ldr	r3, [r7, #32]
 4028 00ca 03F10803 		add	r3, r3, #8
 4029 00ce 3B62     		str	r3, [r7, #32]
 439:src/modbus.c  **** 		toBit = toBit + 8;
 4030              		.loc 1 439 0
 4031 00d0 FB69     		ldr	r3, [r7, #28]
 4032 00d2 03F10803 		add	r3, r3, #8
 4033 00d6 FB61     		str	r3, [r7, #28]
 440:src/modbus.c  **** 
 441:src/modbus.c  **** 		count++;
 4034              		.loc 1 441 0
 4035 00d8 7B69     		ldr	r3, [r7, #20]
 4036 00da 03F10103 		add	r3, r3, #1
 4037 00de 7B61     		str	r3, [r7, #20]
 4038              	.L148:
 4039              	.LBE12:
 421:src/modbus.c  **** 	while(count < 2){
 4040              		.loc 1 421 0 discriminator 1
 4041 00e0 7B69     		ldr	r3, [r7, #20]
 4042 00e2 012B     		cmp	r3, #1
 4043 00e4 C0DD     		ble	.L151
 442:src/modbus.c  **** 	}
 443:src/modbus.c  **** //		//Store the data to be sent in response packet one by one till requested bits reached.
 444:src/modbus.c  **** //		*rPacket = result;
 445:src/modbus.c  **** //		rPacket++;
 446:src/modbus.c  **** //		//printf("Data: 0x%x\n", result);
 447:src/modbus.c  **** 
 448:src/modbus.c  **** 
 449:src/modbus.c  **** //	for (d = 0; d < (1 + 3); d++) {
 450:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 451:src/modbus.c  **** //	}
 452:src/modbus.c  **** 
 453:src/modbus.c  **** 	return 0;
 4044              		.loc 1 453 0
 4045 00e6 4FF00003 		mov	r3, #0
 454:src/modbus.c  **** 
 455:src/modbus.c  **** }
 4046              		.loc 1 455 0
 4047 00ea 1846     		mov	r0, r3
 4048 00ec 07F12807 		add	r7, r7, #40
 4049 00f0 BD46     		mov	sp, r7
 4050 00f2 80BD     		pop	{r7, pc}
 4051              	.L153:
 4052              		.align	2
 4053              	.L152:
 4054 00f4 00000000 		.word	firstRequest
 4055 00f8 00000000 		.word	rPacket
 4056 00fc 00000000 		.word	s
 4057              		.cfi_endproc
 4058              	.LFE11:
 4060              		.section	.text.readInputRegisters,"ax",%progbits
 4061              		.align	2
 4062              		.global	readInputRegisters
 4063              		.thumb
 4064              		.thumb_func
 4066              	readInputRegisters:
 4067              	.LFB12:
 456:src/modbus.c  **** 
 457:src/modbus.c  **** uint32_t readInputRegisters(uint32_t *qPacket) {
 4068              		.loc 1 457 0
 4069              		.cfi_startproc
 4070              		@ args = 0, pretend = 0, frame = 48
 4071              		@ frame_needed = 1, uses_anonymous_args = 0
 4072 0000 80B5     		push	{r7, lr}
 4073              	.LCFI36:
 4074              		.cfi_def_cfa_offset 8
 4075 0002 8CB0     		sub	sp, sp, #48
 4076              	.LCFI37:
 4077              		.cfi_def_cfa_offset 56
 4078 0004 00AF     		add	r7, sp, #0
 4079              		.cfi_offset 14, -4
 4080              		.cfi_offset 7, -8
 4081              	.LCFI38:
 4082              		.cfi_def_cfa_register 7
 4083 0006 7860     		str	r0, [r7, #4]
 458:src/modbus.c  **** 
 459:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 460:src/modbus.c  **** 	qPacket++;
 4084              		.loc 1 460 0
 4085 0008 7B68     		ldr	r3, [r7, #4]
 4086 000a 03F10403 		add	r3, r3, #4
 4087 000e 7B60     		str	r3, [r7, #4]
 461:src/modbus.c  **** 
 462:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 463:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 464:src/modbus.c  **** 	firstRequest = 0x7530 + *qPacket++;
 4088              		.loc 1 464 0
 4089 0010 7B68     		ldr	r3, [r7, #4]
 4090 0012 1B68     		ldr	r3, [r3, #0]
 4091 0014 03F5EA43 		add	r3, r3, #29952
 4092 0018 03F13003 		add	r3, r3, #48
 4093 001c 5F4A     		ldr	r2, .L167
 4094 001e 1360     		str	r3, [r2, #0]
 4095 0020 7B68     		ldr	r3, [r7, #4]
 4096 0022 03F10403 		add	r3, r3, #4
 4097 0026 7B60     		str	r3, [r7, #4]
 465:src/modbus.c  **** 	totalRequest = *qPacket;
 4098              		.loc 1 465 0
 4099 0028 7B68     		ldr	r3, [r7, #4]
 4100 002a 1A68     		ldr	r2, [r3, #0]
 4101 002c 5C4B     		ldr	r3, .L167+4
 4102 002e 1A60     		str	r2, [r3, #0]
 466:src/modbus.c  **** 
 467:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 468:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4103              		.loc 1 468 0
 4104 0030 5B4B     		ldr	r3, .L167+4
 4105 0032 1B68     		ldr	r3, [r3, #0]
 4106 0034 4FEAD303 		lsr	r3, r3, #3
 4107 0038 03F10103 		add	r3, r3, #1
 4108 003c FB60     		str	r3, [r7, #12]
 469:src/modbus.c  **** 
 470:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 471:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4109              		.loc 1 471 0
 4110 003e 594B     		ldr	r3, .L167+8
 4111 0040 1B68     		ldr	r3, [r3, #0]
 4112 0042 FA68     		ldr	r2, [r7, #12]
 4113 0044 1A60     		str	r2, [r3, #0]
 472:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 473:src/modbus.c  **** 	rPacket++;
 4114              		.loc 1 473 0
 4115 0046 574B     		ldr	r3, .L167+8
 4116 0048 1B68     		ldr	r3, [r3, #0]
 4117 004a 03F10402 		add	r2, r3, #4
 4118 004e 554B     		ldr	r3, .L167+8
 4119 0050 1A60     		str	r2, [r3, #0]
 474:src/modbus.c  **** 
 475:src/modbus.c  **** 	//Fetch first address data.
 476:src/modbus.c  **** 	s = getData(firstRequest++);
 4120              		.loc 1 476 0
 4121 0052 524B     		ldr	r3, .L167
 4122 0054 1B68     		ldr	r3, [r3, #0]
 4123 0056 1A46     		mov	r2, r3
 4124 0058 03F10101 		add	r1, r3, #1
 4125 005c 4F4B     		ldr	r3, .L167
 4126 005e 1960     		str	r1, [r3, #0]
 4127 0060 1046     		mov	r0, r2
 4128 0062 FFF7FEFF 		bl	getData
 4129 0066 0246     		mov	r2, r0
 4130 0068 4F4B     		ldr	r3, .L167+12
 4131 006a 1A60     		str	r2, [r3, #0]
 477:src/modbus.c  **** 
 478:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4132              		.loc 1 478 0
 4133 006c 4C4B     		ldr	r3, .L167+4
 4134 006e 1B68     		ldr	r3, [r3, #0]
 4135 0070 FB62     		str	r3, [r7, #44]
 479:src/modbus.c  **** 	int count = 0;
 4136              		.loc 1 479 0
 4137 0072 4FF00003 		mov	r3, #0
 4138 0076 BB62     		str	r3, [r7, #40]
 480:src/modbus.c  **** 	int fromBit = 0;
 4139              		.loc 1 480 0
 4140 0078 4FF00003 		mov	r3, #0
 4141 007c 7B62     		str	r3, [r7, #36]
 481:src/modbus.c  **** 	int toBit = 7;
 4142              		.loc 1 481 0
 4143 007e 4FF00703 		mov	r3, #7
 4144 0082 3B62     		str	r3, [r7, #32]
 482:src/modbus.c  **** 	int shiftRight;
 483:src/modbus.c  **** 	int flag = 0;
 4145              		.loc 1 483 0
 4146 0084 4FF00003 		mov	r3, #0
 4147 0088 BB61     		str	r3, [r7, #24]
 484:src/modbus.c  **** 	int maxCount = 0;
 4148              		.loc 1 484 0
 4149 008a 4FF00003 		mov	r3, #0
 4150 008e 7B61     		str	r3, [r7, #20]
 485:src/modbus.c  **** 	//int d;
 486:src/modbus.c  **** 
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4151              		.loc 1 487 0
 4152 0090 79E0     		b	.L156
 4153              	.L165:
 4154              	.LBB13:
 488:src/modbus.c  **** 
 489:src/modbus.c  **** 		if (totalRequest < 8) {
 4155              		.loc 1 489 0
 4156 0092 434B     		ldr	r3, .L167+4
 4157 0094 1B68     		ldr	r3, [r3, #0]
 4158 0096 072B     		cmp	r3, #7
 4159 0098 04D8     		bhi	.L157
 490:src/modbus.c  **** 			toBit = totalRequest - 1;
 4160              		.loc 1 490 0
 4161 009a 414B     		ldr	r3, .L167+4
 4162 009c 1B68     		ldr	r3, [r3, #0]
 4163 009e 03F1FF33 		add	r3, r3, #-1
 4164 00a2 3B62     		str	r3, [r7, #32]
 4165              	.L157:
 491:src/modbus.c  **** 		}
 492:src/modbus.c  **** 
 493:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 494:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4166              		.loc 1 494 0
 4167 00a4 FA6A     		ldr	r2, [r7, #44]
 4168 00a6 3E4B     		ldr	r3, .L167+4
 4169 00a8 1B68     		ldr	r3, [r3, #0]
 4170 00aa 03F00703 		and	r3, r3, #7
 4171 00ae 9A42     		cmp	r2, r3
 4172 00b0 09D1     		bne	.L158
 4173              		.loc 1 494 0 is_stmt 0 discriminator 1
 4174 00b2 BB69     		ldr	r3, [r7, #24]
 4175 00b4 012B     		cmp	r3, #1
 4176 00b6 06D1     		bne	.L158
 495:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4177              		.loc 1 495 0 is_stmt 1
 4178 00b8 394B     		ldr	r3, .L167+4
 4179 00ba 1B68     		ldr	r3, [r3, #0]
 4180 00bc 03F00703 		and	r3, r3, #7
 4181 00c0 03F1FF33 		add	r3, r3, #-1
 4182 00c4 3B62     		str	r3, [r7, #32]
 4183              	.L158:
 496:src/modbus.c  **** 		}
 497:src/modbus.c  **** 
 498:src/modbus.c  **** 		//Call masking function and store value in r.
 499:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4184              		.loc 1 499 0
 4185 00c6 786A     		ldr	r0, [r7, #36]
 4186 00c8 396A     		ldr	r1, [r7, #32]
 4187 00ca FFF7FEFF 		bl	getMask
 4188 00ce B860     		str	r0, [r7, #8]
 500:src/modbus.c  **** 
 501:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 502:src/modbus.c  **** 		unsigned int result = r & s->value;
 4189              		.loc 1 502 0
 4190 00d0 354B     		ldr	r3, .L167+12
 4191 00d2 1B68     		ldr	r3, [r3, #0]
 4192 00d4 5B68     		ldr	r3, [r3, #4]
 4193 00d6 1A46     		mov	r2, r3
 4194 00d8 BB68     		ldr	r3, [r7, #8]
 4195 00da 02EA0303 		and	r3, r2, r3
 4196 00de 3B61     		str	r3, [r7, #16]
 503:src/modbus.c  **** 
 504:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 505:src/modbus.c  **** 		if (toBit == 7) {
 4197              		.loc 1 505 0
 4198 00e0 3B6A     		ldr	r3, [r7, #32]
 4199 00e2 072B     		cmp	r3, #7
 4200 00e4 0ED0     		beq	.L166
 4201              	.L159:
 506:src/modbus.c  **** 			goto next;
 507:src/modbus.c  **** 		}
 508:src/modbus.c  **** 
 509:src/modbus.c  **** 		//Else shift right.
 510:src/modbus.c  **** 		else {
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4202              		.loc 1 511 0
 4203 00e6 7B6A     		ldr	r3, [r7, #36]
 4204 00e8 FB61     		str	r3, [r7, #28]
 4205 00ea 07E0     		b	.L161
 4206              	.L162:
 512:src/modbus.c  **** 				result = result >> 1;
 4207              		.loc 1 512 0 discriminator 2
 4208 00ec 3B69     		ldr	r3, [r7, #16]
 4209 00ee 4FEA5303 		lsr	r3, r3, #1
 4210 00f2 3B61     		str	r3, [r7, #16]
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4211              		.loc 1 511 0 discriminator 2
 4212 00f4 FB69     		ldr	r3, [r7, #28]
 4213 00f6 03F1FF33 		add	r3, r3, #-1
 4214 00fa FB61     		str	r3, [r7, #28]
 4215              	.L161:
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4216              		.loc 1 511 0 is_stmt 0 discriminator 1
 4217 00fc FB69     		ldr	r3, [r7, #28]
 4218 00fe 002B     		cmp	r3, #0
 4219 0100 F4DC     		bgt	.L162
 4220 0102 00E0     		b	.L160
 4221              	.L166:
 506:src/modbus.c  **** 			goto next;
 4222              		.loc 1 506 0 is_stmt 1
 4223 0104 00BF     		nop
 4224              	.L160:
 513:src/modbus.c  **** 			}
 514:src/modbus.c  **** 		}
 515:src/modbus.c  **** 
 516:src/modbus.c  **** 		//Label
 517:src/modbus.c  **** 		next:
 518:src/modbus.c  **** 
 519:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 520:src/modbus.c  **** 		*rPacket = result;
 4225              		.loc 1 520 0
 4226 0106 274B     		ldr	r3, .L167+8
 4227 0108 1B68     		ldr	r3, [r3, #0]
 4228 010a 3A69     		ldr	r2, [r7, #16]
 4229 010c 1A60     		str	r2, [r3, #0]
 521:src/modbus.c  **** 		rPacket++;
 4230              		.loc 1 521 0
 4231 010e 254B     		ldr	r3, .L167+8
 4232 0110 1B68     		ldr	r3, [r3, #0]
 4233 0112 03F10402 		add	r2, r3, #4
 4234 0116 234B     		ldr	r3, .L167+8
 4235 0118 1A60     		str	r2, [r3, #0]
 522:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 523:src/modbus.c  **** 
 524:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 525:src/modbus.c  **** 		count++;
 4236              		.loc 1 525 0
 4237 011a BB6A     		ldr	r3, [r7, #40]
 4238 011c 03F10103 		add	r3, r3, #1
 4239 0120 BB62     		str	r3, [r7, #40]
 526:src/modbus.c  **** 
 527:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 528:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4240              		.loc 1 528 0
 4241 0122 FB6A     		ldr	r3, [r7, #44]
 4242 0124 A3F10803 		sub	r3, r3, #8
 4243 0128 FB62     		str	r3, [r7, #44]
 529:src/modbus.c  **** 
 530:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 531:src/modbus.c  **** 		if (totalRequest >= 32) {
 4244              		.loc 1 531 0
 4245 012a 1D4B     		ldr	r3, .L167+4
 4246 012c 1B68     		ldr	r3, [r3, #0]
 4247 012e 1F2B     		cmp	r3, #31
 4248 0130 02D9     		bls	.L163
 532:src/modbus.c  **** 			maxCount = 4;
 4249              		.loc 1 532 0
 4250 0132 4FF00403 		mov	r3, #4
 4251 0136 7B61     		str	r3, [r7, #20]
 4252              	.L163:
 533:src/modbus.c  **** 		}
 534:src/modbus.c  **** 
 535:src/modbus.c  **** 		//If not then set
 536:src/modbus.c  **** 		/*else{
 537:src/modbus.c  **** 		 count = 0;
 538:src/modbus.c  **** 		 fromBit = 0;
 539:src/modbus.c  **** 		 toBit = 7;
 540:src/modbus.c  **** 		 flag = 1;
 541:src/modbus.c  **** 		 goto again;
 542:src/modbus.c  **** 		 }*/
 543:src/modbus.c  **** 
 544:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 545:src/modbus.c  **** 		if (count == maxCount) {
 4253              		.loc 1 545 0
 4254 0138 BA6A     		ldr	r2, [r7, #40]
 4255 013a 7B69     		ldr	r3, [r7, #20]
 4256 013c 9A42     		cmp	r2, r3
 4257 013e 1AD1     		bne	.L164
 546:src/modbus.c  **** 			s = getData(firstRequest++);
 4258              		.loc 1 546 0
 4259 0140 164B     		ldr	r3, .L167
 4260 0142 1B68     		ldr	r3, [r3, #0]
 4261 0144 1A46     		mov	r2, r3
 4262 0146 03F10101 		add	r1, r3, #1
 4263 014a 144B     		ldr	r3, .L167
 4264 014c 1960     		str	r1, [r3, #0]
 4265 014e 1046     		mov	r0, r2
 4266 0150 FFF7FEFF 		bl	getData
 4267 0154 0246     		mov	r2, r0
 4268 0156 144B     		ldr	r3, .L167+12
 4269 0158 1A60     		str	r2, [r3, #0]
 547:src/modbus.c  **** 			count = 0;
 4270              		.loc 1 547 0
 4271 015a 4FF00003 		mov	r3, #0
 4272 015e BB62     		str	r3, [r7, #40]
 548:src/modbus.c  **** 			fromBit = 0;
 4273              		.loc 1 548 0
 4274 0160 4FF00003 		mov	r3, #0
 4275 0164 7B62     		str	r3, [r7, #36]
 549:src/modbus.c  **** 			toBit = 7;
 4276              		.loc 1 549 0
 4277 0166 4FF00703 		mov	r3, #7
 4278 016a 3B62     		str	r3, [r7, #32]
 550:src/modbus.c  **** 			flag = 1;
 4279              		.loc 1 550 0
 4280 016c 4FF00103 		mov	r3, #1
 4281 0170 BB61     		str	r3, [r7, #24]
 551:src/modbus.c  **** 			goto again;
 4282              		.loc 1 551 0
 4283 0172 00BF     		nop
 4284              	.L155:
 4285              	.LBE13:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4286              		.loc 1 487 0
 4287 0174 07E0     		b	.L156
 4288              	.L164:
 4289              	.LBB14:
 552:src/modbus.c  **** 		}
 553:src/modbus.c  **** 
 554:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 555:src/modbus.c  **** 		fromBit = fromBit + 8;
 4290              		.loc 1 555 0
 4291 0176 7B6A     		ldr	r3, [r7, #36]
 4292 0178 03F10803 		add	r3, r3, #8
 4293 017c 7B62     		str	r3, [r7, #36]
 556:src/modbus.c  **** 		toBit = toBit + 8;
 4294              		.loc 1 556 0
 4295 017e 3B6A     		ldr	r3, [r7, #32]
 4296 0180 03F10803 		add	r3, r3, #8
 4297 0184 3B62     		str	r3, [r7, #32]
 4298              	.L156:
 4299              	.LBE14:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4300              		.loc 1 487 0 discriminator 1
 4301 0186 FB6A     		ldr	r3, [r7, #44]
 4302 0188 002B     		cmp	r3, #0
 4303 018a 82DC     		bgt	.L165
 557:src/modbus.c  **** 	}
 558:src/modbus.c  **** /*
 559:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 560:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 561:src/modbus.c  **** 	}
 562:src/modbus.c  **** 
 563:src/modbus.c  **** */
 564:src/modbus.c  **** 	return 0;
 4304              		.loc 1 564 0
 4305 018c 4FF00003 		mov	r3, #0
 565:src/modbus.c  **** 
 566:src/modbus.c  **** }
 4306              		.loc 1 566 0
 4307 0190 1846     		mov	r0, r3
 4308 0192 07F13007 		add	r7, r7, #48
 4309 0196 BD46     		mov	sp, r7
 4310 0198 80BD     		pop	{r7, pc}
 4311              	.L168:
 4312 019a 00BF     		.align	2
 4313              	.L167:
 4314 019c 00000000 		.word	firstRequest
 4315 01a0 00000000 		.word	totalRequest
 4316 01a4 00000000 		.word	rPacket
 4317 01a8 00000000 		.word	s
 4318              		.cfi_endproc
 4319              	.LFE12:
 4321              		.section	.text.readHoldingRegisters,"ax",%progbits
 4322              		.align	2
 4323              		.global	readHoldingRegisters
 4324              		.thumb
 4325              		.thumb_func
 4327              	readHoldingRegisters:
 4328              	.LFB13:
 567:src/modbus.c  **** 
 568:src/modbus.c  **** uint32_t readHoldingRegisters(uint32_t *qPacket) {
 4329              		.loc 1 568 0
 4330              		.cfi_startproc
 4331              		@ args = 0, pretend = 0, frame = 48
 4332              		@ frame_needed = 1, uses_anonymous_args = 0
 4333 0000 80B5     		push	{r7, lr}
 4334              	.LCFI39:
 4335              		.cfi_def_cfa_offset 8
 4336 0002 8CB0     		sub	sp, sp, #48
 4337              	.LCFI40:
 4338              		.cfi_def_cfa_offset 56
 4339 0004 00AF     		add	r7, sp, #0
 4340              		.cfi_offset 14, -4
 4341              		.cfi_offset 7, -8
 4342              	.LCFI41:
 4343              		.cfi_def_cfa_register 7
 4344 0006 7860     		str	r0, [r7, #4]
 569:src/modbus.c  **** 
 570:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 571:src/modbus.c  **** 	qPacket++;
 4345              		.loc 1 571 0
 4346 0008 7B68     		ldr	r3, [r7, #4]
 4347 000a 03F10403 		add	r3, r3, #4
 4348 000e 7B60     		str	r3, [r7, #4]
 572:src/modbus.c  **** 
 573:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 574:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 575:src/modbus.c  **** 	firstRequest = 0x9C40 | *qPacket++;
 4349              		.loc 1 575 0
 4350 0010 7B68     		ldr	r3, [r7, #4]
 4351 0012 1B68     		ldr	r3, [r3, #0]
 4352 0014 43F41C43 		orr	r3, r3, #39936
 4353 0018 43F04003 		orr	r3, r3, #64
 4354 001c 404A     		ldr	r2, .L176
 4355 001e 1360     		str	r3, [r2, #0]
 4356 0020 7B68     		ldr	r3, [r7, #4]
 4357 0022 03F10403 		add	r3, r3, #4
 4358 0026 7B60     		str	r3, [r7, #4]
 576:src/modbus.c  **** 	totalRequest = *qPacket;
 4359              		.loc 1 576 0
 4360 0028 7B68     		ldr	r3, [r7, #4]
 4361 002a 1A68     		ldr	r2, [r3, #0]
 4362 002c 3D4B     		ldr	r3, .L176+4
 4363 002e 1A60     		str	r2, [r3, #0]
 577:src/modbus.c  **** 
 578:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 579:src/modbus.c  **** 	unsigned int byteStream = totalRequest * 2;
 4364              		.loc 1 579 0
 4365 0030 3C4B     		ldr	r3, .L176+4
 4366 0032 1B68     		ldr	r3, [r3, #0]
 4367 0034 4FEA4303 		lsl	r3, r3, #1
 4368 0038 BB61     		str	r3, [r7, #24]
 580:src/modbus.c  **** 
 581:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to response packet
 582:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4369              		.loc 1 582 0
 4370 003a 3B4B     		ldr	r3, .L176+8
 4371 003c 1B68     		ldr	r3, [r3, #0]
 4372 003e BA69     		ldr	r2, [r7, #24]
 4373 0040 1A60     		str	r2, [r3, #0]
 583:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 584:src/modbus.c  **** 	rPacket++;
 4374              		.loc 1 584 0
 4375 0042 394B     		ldr	r3, .L176+8
 4376 0044 1B68     		ldr	r3, [r3, #0]
 4377 0046 03F10402 		add	r2, r3, #4
 4378 004a 374B     		ldr	r3, .L176+8
 4379 004c 1A60     		str	r2, [r3, #0]
 585:src/modbus.c  **** 
 586:src/modbus.c  **** 	//Fetch first address data.
 587:src/modbus.c  **** 	s = getData(firstRequest++);
 4380              		.loc 1 587 0
 4381 004e 344B     		ldr	r3, .L176
 4382 0050 1B68     		ldr	r3, [r3, #0]
 4383 0052 1A46     		mov	r2, r3
 4384 0054 03F10101 		add	r1, r3, #1
 4385 0058 314B     		ldr	r3, .L176
 4386 005a 1960     		str	r1, [r3, #0]
 4387 005c 1046     		mov	r0, r2
 4388 005e FFF7FEFF 		bl	getData
 4389 0062 0246     		mov	r2, r0
 4390 0064 314B     		ldr	r3, .L176+12
 4391 0066 1A60     		str	r2, [r3, #0]
 588:src/modbus.c  **** 
 589:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4392              		.loc 1 589 0
 4393 0068 2E4B     		ldr	r3, .L176+4
 4394 006a 1B68     		ldr	r3, [r3, #0]
 4395 006c FB62     		str	r3, [r7, #44]
 590:src/modbus.c  **** 	int fromBit = 0;
 4396              		.loc 1 590 0
 4397 006e 4FF00003 		mov	r3, #0
 4398 0072 7B61     		str	r3, [r7, #20]
 591:src/modbus.c  **** 	int toBit = 15;
 4399              		.loc 1 591 0
 4400 0074 4FF00F03 		mov	r3, #15
 4401 0078 3B61     		str	r3, [r7, #16]
 592:src/modbus.c  **** 	int shiftRight;
 593:src/modbus.c  **** 	//int d;
 594:src/modbus.c  **** 
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4402              		.loc 1 595 0
 4403 007a 47E0     		b	.L170
 4404              	.L175:
 4405              	.LBB15:
 596:src/modbus.c  **** 
 597:src/modbus.c  **** 		int fromBit = 0;
 4406              		.loc 1 597 0
 4407 007c 4FF00003 		mov	r3, #0
 4408 0080 7B62     		str	r3, [r7, #36]
 598:src/modbus.c  **** 		int toBit = 7;
 4409              		.loc 1 598 0
 4410 0082 4FF00703 		mov	r3, #7
 4411 0086 3B62     		str	r3, [r7, #32]
 599:src/modbus.c  **** 
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4412              		.loc 1 600 0
 4413 0088 2CE0     		b	.L171
 4414              	.L174:
 4415              	.LBB16:
 601:src/modbus.c  **** 				//Call masking function and store value in r.
 602:src/modbus.c  **** 				unsigned int r = getMask(fromBit, toBit);
 4416              		.loc 1 602 0
 4417 008a 786A     		ldr	r0, [r7, #36]
 4418 008c 396A     		ldr	r1, [r7, #32]
 4419 008e FFF7FEFF 		bl	getMask
 4420 0092 F860     		str	r0, [r7, #12]
 603:src/modbus.c  **** 
 604:src/modbus.c  **** 				//Get masking done on data from hash and store in result.
 605:src/modbus.c  **** 				unsigned int result = r & s->value;
 4421              		.loc 1 605 0
 4422 0094 254B     		ldr	r3, .L176+12
 4423 0096 1B68     		ldr	r3, [r3, #0]
 4424 0098 5B68     		ldr	r3, [r3, #4]
 4425 009a 1A46     		mov	r2, r3
 4426 009c FB68     		ldr	r3, [r7, #12]
 4427 009e 02EA0303 		and	r3, r2, r3
 4428 00a2 FB61     		str	r3, [r7, #28]
 606:src/modbus.c  **** 
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4429              		.loc 1 607 0
 4430 00a4 7B6A     		ldr	r3, [r7, #36]
 4431 00a6 BB62     		str	r3, [r7, #40]
 4432 00a8 07E0     		b	.L172
 4433              	.L173:
 608:src/modbus.c  **** 					result = result >> 1;
 4434              		.loc 1 608 0 discriminator 2
 4435 00aa FB69     		ldr	r3, [r7, #28]
 4436 00ac 4FEA5303 		lsr	r3, r3, #1
 4437 00b0 FB61     		str	r3, [r7, #28]
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4438              		.loc 1 607 0 discriminator 2
 4439 00b2 BB6A     		ldr	r3, [r7, #40]
 4440 00b4 03F1FF33 		add	r3, r3, #-1
 4441 00b8 BB62     		str	r3, [r7, #40]
 4442              	.L172:
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4443              		.loc 1 607 0 is_stmt 0 discriminator 1
 4444 00ba BB6A     		ldr	r3, [r7, #40]
 4445 00bc 002B     		cmp	r3, #0
 4446 00be F4DC     		bgt	.L173
 609:src/modbus.c  **** 				}
 610:src/modbus.c  **** 
 611:src/modbus.c  **** 				//Store the data to be sent in response packet one by one till requested bits reached.
 612:src/modbus.c  **** 				*rPacket = result;
 4447              		.loc 1 612 0 is_stmt 1
 4448 00c0 194B     		ldr	r3, .L176+8
 4449 00c2 1B68     		ldr	r3, [r3, #0]
 4450 00c4 FA69     		ldr	r2, [r7, #28]
 4451 00c6 1A60     		str	r2, [r3, #0]
 613:src/modbus.c  **** 				rPacket++;
 4452              		.loc 1 613 0
 4453 00c8 174B     		ldr	r3, .L176+8
 4454 00ca 1B68     		ldr	r3, [r3, #0]
 4455 00cc 03F10402 		add	r2, r3, #4
 4456 00d0 154B     		ldr	r3, .L176+8
 4457 00d2 1A60     		str	r2, [r3, #0]
 614:src/modbus.c  **** 				//printf("Data: 0x%x\n", result);
 615:src/modbus.c  **** 
 616:src/modbus.c  **** 
 617:src/modbus.c  **** 				//Increase from and to bit
 618:src/modbus.c  **** 				fromBit = fromBit + 8;
 4458              		.loc 1 618 0
 4459 00d4 7B6A     		ldr	r3, [r7, #36]
 4460 00d6 03F10803 		add	r3, r3, #8
 4461 00da 7B62     		str	r3, [r7, #36]
 619:src/modbus.c  **** 				toBit = toBit + 8;
 4462              		.loc 1 619 0
 4463 00dc 3B6A     		ldr	r3, [r7, #32]
 4464 00de 03F10803 		add	r3, r3, #8
 4465 00e2 3B62     		str	r3, [r7, #32]
 4466              	.L171:
 4467              	.LBE16:
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4468              		.loc 1 600 0 discriminator 1
 4469 00e4 7B6A     		ldr	r3, [r7, #36]
 4470 00e6 082B     		cmp	r3, #8
 4471 00e8 CFDD     		ble	.L174
 620:src/modbus.c  **** 		}
 621:src/modbus.c  **** 
 622:src/modbus.c  **** 		//Decrement request count
 623:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 1;
 4472              		.loc 1 623 0
 4473 00ea FB6A     		ldr	r3, [r7, #44]
 4474 00ec 03F1FF33 		add	r3, r3, #-1
 4475 00f0 FB62     		str	r3, [r7, #44]
 624:src/modbus.c  **** 
 625:src/modbus.c  **** 		//Fetch next data .
 626:src/modbus.c  **** 		s = getData(firstRequest++);
 4476              		.loc 1 626 0
 4477 00f2 0B4B     		ldr	r3, .L176
 4478 00f4 1B68     		ldr	r3, [r3, #0]
 4479 00f6 1A46     		mov	r2, r3
 4480 00f8 03F10101 		add	r1, r3, #1
 4481 00fc 084B     		ldr	r3, .L176
 4482 00fe 1960     		str	r1, [r3, #0]
 4483 0100 1046     		mov	r0, r2
 4484 0102 FFF7FEFF 		bl	getData
 4485 0106 0246     		mov	r2, r0
 4486 0108 084B     		ldr	r3, .L176+12
 4487 010a 1A60     		str	r2, [r3, #0]
 4488              	.L170:
 4489              	.LBE15:
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4490              		.loc 1 595 0 discriminator 1
 4491 010c FB6A     		ldr	r3, [r7, #44]
 4492 010e 002B     		cmp	r3, #0
 4493 0110 B4DC     		bgt	.L175
 627:src/modbus.c  **** 	}
 628:src/modbus.c  **** 
 629:src/modbus.c  **** /*	for (d = 0; d < ((byteStream / 2) + 3); d++) {
 630:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 631:src/modbus.c  **** 	}
 632:src/modbus.c  **** */
 633:src/modbus.c  **** 	return 0;
 4494              		.loc 1 633 0
 4495 0112 4FF00003 		mov	r3, #0
 634:src/modbus.c  **** }
 4496              		.loc 1 634 0
 4497 0116 1846     		mov	r0, r3
 4498 0118 07F13007 		add	r7, r7, #48
 4499 011c BD46     		mov	sp, r7
 4500 011e 80BD     		pop	{r7, pc}
 4501              	.L177:
 4502              		.align	2
 4503              	.L176:
 4504 0120 00000000 		.word	firstRequest
 4505 0124 00000000 		.word	totalRequest
 4506 0128 00000000 		.word	rPacket
 4507 012c 00000000 		.word	s
 4508              		.cfi_endproc
 4509              	.LFE13:
 4511              		.section	.text.readDiscreteInputs,"ax",%progbits
 4512              		.align	2
 4513              		.global	readDiscreteInputs
 4514              		.thumb
 4515              		.thumb_func
 4517              	readDiscreteInputs:
 4518              	.LFB14:
 635:src/modbus.c  **** 
 636:src/modbus.c  **** uint32_t readDiscreteInputs(uint32_t *qPacket) {
 4519              		.loc 1 636 0
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 48
 4522              		@ frame_needed = 1, uses_anonymous_args = 0
 4523 0000 80B5     		push	{r7, lr}
 4524              	.LCFI42:
 4525              		.cfi_def_cfa_offset 8
 4526 0002 8CB0     		sub	sp, sp, #48
 4527              	.LCFI43:
 4528              		.cfi_def_cfa_offset 56
 4529 0004 00AF     		add	r7, sp, #0
 4530              		.cfi_offset 14, -4
 4531              		.cfi_offset 7, -8
 4532              	.LCFI44:
 4533              		.cfi_def_cfa_register 7
 4534 0006 7860     		str	r0, [r7, #4]
 637:src/modbus.c  **** 
 638:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 639:src/modbus.c  **** 	qPacket++;
 4535              		.loc 1 639 0
 4536 0008 7B68     		ldr	r3, [r7, #4]
 4537 000a 03F10403 		add	r3, r3, #4
 4538 000e 7B60     		str	r3, [r7, #4]
 640:src/modbus.c  **** 
 641:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 642:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 643:src/modbus.c  **** 	firstRequest = 0x2710 | *qPacket++;
 4539              		.loc 1 643 0
 4540 0010 7B68     		ldr	r3, [r7, #4]
 4541 0012 1B68     		ldr	r3, [r3, #0]
 4542 0014 43F41C53 		orr	r3, r3, #9984
 4543 0018 43F01003 		orr	r3, r3, #16
 4544 001c 5F4A     		ldr	r2, .L191
 4545 001e 1360     		str	r3, [r2, #0]
 4546 0020 7B68     		ldr	r3, [r7, #4]
 4547 0022 03F10403 		add	r3, r3, #4
 4548 0026 7B60     		str	r3, [r7, #4]
 644:src/modbus.c  **** 	totalRequest = *qPacket;
 4549              		.loc 1 644 0
 4550 0028 7B68     		ldr	r3, [r7, #4]
 4551 002a 1A68     		ldr	r2, [r3, #0]
 4552 002c 5C4B     		ldr	r3, .L191+4
 4553 002e 1A60     		str	r2, [r3, #0]
 645:src/modbus.c  **** 
 646:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 647:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4554              		.loc 1 647 0
 4555 0030 5B4B     		ldr	r3, .L191+4
 4556 0032 1B68     		ldr	r3, [r3, #0]
 4557 0034 4FEAD303 		lsr	r3, r3, #3
 4558 0038 03F10103 		add	r3, r3, #1
 4559 003c FB60     		str	r3, [r7, #12]
 648:src/modbus.c  **** 
 649:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 650:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4560              		.loc 1 650 0
 4561 003e 594B     		ldr	r3, .L191+8
 4562 0040 1B68     		ldr	r3, [r3, #0]
 4563 0042 FA68     		ldr	r2, [r7, #12]
 4564 0044 1A60     		str	r2, [r3, #0]
 651:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 652:src/modbus.c  **** 	rPacket++;
 4565              		.loc 1 652 0
 4566 0046 574B     		ldr	r3, .L191+8
 4567 0048 1B68     		ldr	r3, [r3, #0]
 4568 004a 03F10402 		add	r2, r3, #4
 4569 004e 554B     		ldr	r3, .L191+8
 4570 0050 1A60     		str	r2, [r3, #0]
 653:src/modbus.c  **** 
 654:src/modbus.c  **** 	//Fetch first address data.
 655:src/modbus.c  **** 	s = getData(firstRequest++);
 4571              		.loc 1 655 0
 4572 0052 524B     		ldr	r3, .L191
 4573 0054 1B68     		ldr	r3, [r3, #0]
 4574 0056 1A46     		mov	r2, r3
 4575 0058 03F10101 		add	r1, r3, #1
 4576 005c 4F4B     		ldr	r3, .L191
 4577 005e 1960     		str	r1, [r3, #0]
 4578 0060 1046     		mov	r0, r2
 4579 0062 FFF7FEFF 		bl	getData
 4580 0066 0246     		mov	r2, r0
 4581 0068 4F4B     		ldr	r3, .L191+12
 4582 006a 1A60     		str	r2, [r3, #0]
 656:src/modbus.c  **** 
 657:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4583              		.loc 1 657 0
 4584 006c 4C4B     		ldr	r3, .L191+4
 4585 006e 1B68     		ldr	r3, [r3, #0]
 4586 0070 FB62     		str	r3, [r7, #44]
 658:src/modbus.c  **** 	int count = 0;
 4587              		.loc 1 658 0
 4588 0072 4FF00003 		mov	r3, #0
 4589 0076 BB62     		str	r3, [r7, #40]
 659:src/modbus.c  **** 	int fromBit = 0;
 4590              		.loc 1 659 0
 4591 0078 4FF00003 		mov	r3, #0
 4592 007c 7B62     		str	r3, [r7, #36]
 660:src/modbus.c  **** 	int toBit = 7;
 4593              		.loc 1 660 0
 4594 007e 4FF00703 		mov	r3, #7
 4595 0082 3B62     		str	r3, [r7, #32]
 661:src/modbus.c  **** 	int shiftRight;
 662:src/modbus.c  **** 	int flag = 0;
 4596              		.loc 1 662 0
 4597 0084 4FF00003 		mov	r3, #0
 4598 0088 BB61     		str	r3, [r7, #24]
 663:src/modbus.c  **** 	int maxCount = 0;
 4599              		.loc 1 663 0
 4600 008a 4FF00003 		mov	r3, #0
 4601 008e 7B61     		str	r3, [r7, #20]
 664:src/modbus.c  **** 	//int d;
 665:src/modbus.c  **** 
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4602              		.loc 1 666 0
 4603 0090 79E0     		b	.L180
 4604              	.L189:
 4605              	.LBB17:
 667:src/modbus.c  **** 
 668:src/modbus.c  **** 		if (totalRequest < 8) {
 4606              		.loc 1 668 0
 4607 0092 434B     		ldr	r3, .L191+4
 4608 0094 1B68     		ldr	r3, [r3, #0]
 4609 0096 072B     		cmp	r3, #7
 4610 0098 04D8     		bhi	.L181
 669:src/modbus.c  **** 			toBit = totalRequest - 1;
 4611              		.loc 1 669 0
 4612 009a 414B     		ldr	r3, .L191+4
 4613 009c 1B68     		ldr	r3, [r3, #0]
 4614 009e 03F1FF33 		add	r3, r3, #-1
 4615 00a2 3B62     		str	r3, [r7, #32]
 4616              	.L181:
 670:src/modbus.c  **** 		}
 671:src/modbus.c  **** 
 672:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 673:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4617              		.loc 1 673 0
 4618 00a4 FA6A     		ldr	r2, [r7, #44]
 4619 00a6 3E4B     		ldr	r3, .L191+4
 4620 00a8 1B68     		ldr	r3, [r3, #0]
 4621 00aa 03F00703 		and	r3, r3, #7
 4622 00ae 9A42     		cmp	r2, r3
 4623 00b0 09D1     		bne	.L182
 4624              		.loc 1 673 0 is_stmt 0 discriminator 1
 4625 00b2 BB69     		ldr	r3, [r7, #24]
 4626 00b4 012B     		cmp	r3, #1
 4627 00b6 06D1     		bne	.L182
 674:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4628              		.loc 1 674 0 is_stmt 1
 4629 00b8 394B     		ldr	r3, .L191+4
 4630 00ba 1B68     		ldr	r3, [r3, #0]
 4631 00bc 03F00703 		and	r3, r3, #7
 4632 00c0 03F1FF33 		add	r3, r3, #-1
 4633 00c4 3B62     		str	r3, [r7, #32]
 4634              	.L182:
 675:src/modbus.c  **** 		}
 676:src/modbus.c  **** 
 677:src/modbus.c  **** 		//Call masking function and store value in r.
 678:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4635              		.loc 1 678 0
 4636 00c6 786A     		ldr	r0, [r7, #36]
 4637 00c8 396A     		ldr	r1, [r7, #32]
 4638 00ca FFF7FEFF 		bl	getMask
 4639 00ce B860     		str	r0, [r7, #8]
 679:src/modbus.c  **** 
 680:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 681:src/modbus.c  **** 		unsigned int result = r & s->value;
 4640              		.loc 1 681 0
 4641 00d0 354B     		ldr	r3, .L191+12
 4642 00d2 1B68     		ldr	r3, [r3, #0]
 4643 00d4 5B68     		ldr	r3, [r3, #4]
 4644 00d6 1A46     		mov	r2, r3
 4645 00d8 BB68     		ldr	r3, [r7, #8]
 4646 00da 02EA0303 		and	r3, r2, r3
 4647 00de 3B61     		str	r3, [r7, #16]
 682:src/modbus.c  **** 
 683:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 684:src/modbus.c  **** 		if (toBit == 7) {
 4648              		.loc 1 684 0
 4649 00e0 3B6A     		ldr	r3, [r7, #32]
 4650 00e2 072B     		cmp	r3, #7
 4651 00e4 0ED0     		beq	.L190
 4652              	.L183:
 685:src/modbus.c  **** 			goto next;
 686:src/modbus.c  **** 		}
 687:src/modbus.c  **** 
 688:src/modbus.c  **** 		//Else shift right.
 689:src/modbus.c  **** 		else {
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4653              		.loc 1 690 0
 4654 00e6 7B6A     		ldr	r3, [r7, #36]
 4655 00e8 FB61     		str	r3, [r7, #28]
 4656 00ea 07E0     		b	.L185
 4657              	.L186:
 691:src/modbus.c  **** 				result = result >> 1;
 4658              		.loc 1 691 0 discriminator 2
 4659 00ec 3B69     		ldr	r3, [r7, #16]
 4660 00ee 4FEA5303 		lsr	r3, r3, #1
 4661 00f2 3B61     		str	r3, [r7, #16]
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4662              		.loc 1 690 0 discriminator 2
 4663 00f4 FB69     		ldr	r3, [r7, #28]
 4664 00f6 03F1FF33 		add	r3, r3, #-1
 4665 00fa FB61     		str	r3, [r7, #28]
 4666              	.L185:
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4667              		.loc 1 690 0 is_stmt 0 discriminator 1
 4668 00fc FB69     		ldr	r3, [r7, #28]
 4669 00fe 002B     		cmp	r3, #0
 4670 0100 F4DC     		bgt	.L186
 4671 0102 00E0     		b	.L184
 4672              	.L190:
 685:src/modbus.c  **** 			goto next;
 4673              		.loc 1 685 0 is_stmt 1
 4674 0104 00BF     		nop
 4675              	.L184:
 692:src/modbus.c  **** 			}
 693:src/modbus.c  **** 		}
 694:src/modbus.c  **** 
 695:src/modbus.c  **** 		//Label
 696:src/modbus.c  **** 		next:
 697:src/modbus.c  **** 
 698:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 699:src/modbus.c  **** 		*rPacket = result;
 4676              		.loc 1 699 0
 4677 0106 274B     		ldr	r3, .L191+8
 4678 0108 1B68     		ldr	r3, [r3, #0]
 4679 010a 3A69     		ldr	r2, [r7, #16]
 4680 010c 1A60     		str	r2, [r3, #0]
 700:src/modbus.c  **** 		rPacket++;
 4681              		.loc 1 700 0
 4682 010e 254B     		ldr	r3, .L191+8
 4683 0110 1B68     		ldr	r3, [r3, #0]
 4684 0112 03F10402 		add	r2, r3, #4
 4685 0116 234B     		ldr	r3, .L191+8
 4686 0118 1A60     		str	r2, [r3, #0]
 701:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 702:src/modbus.c  **** 
 703:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 704:src/modbus.c  **** 		count++;
 4687              		.loc 1 704 0
 4688 011a BB6A     		ldr	r3, [r7, #40]
 4689 011c 03F10103 		add	r3, r3, #1
 4690 0120 BB62     		str	r3, [r7, #40]
 705:src/modbus.c  **** 
 706:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 707:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4691              		.loc 1 707 0
 4692 0122 FB6A     		ldr	r3, [r7, #44]
 4693 0124 A3F10803 		sub	r3, r3, #8
 4694 0128 FB62     		str	r3, [r7, #44]
 708:src/modbus.c  **** 
 709:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 710:src/modbus.c  **** 		if (totalRequest >= 32) {
 4695              		.loc 1 710 0
 4696 012a 1D4B     		ldr	r3, .L191+4
 4697 012c 1B68     		ldr	r3, [r3, #0]
 4698 012e 1F2B     		cmp	r3, #31
 4699 0130 02D9     		bls	.L187
 711:src/modbus.c  **** 			maxCount = 4;
 4700              		.loc 1 711 0
 4701 0132 4FF00403 		mov	r3, #4
 4702 0136 7B61     		str	r3, [r7, #20]
 4703              	.L187:
 712:src/modbus.c  **** 		}
 713:src/modbus.c  **** 
 714:src/modbus.c  **** 		//If not then set
 715:src/modbus.c  **** 		/*else{
 716:src/modbus.c  **** 		 count = 0;
 717:src/modbus.c  **** 		 fromBit = 0;
 718:src/modbus.c  **** 		 toBit = 7;
 719:src/modbus.c  **** 		 flag = 1;
 720:src/modbus.c  **** 		 goto again;
 721:src/modbus.c  **** 		 }*/
 722:src/modbus.c  **** 
 723:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 724:src/modbus.c  **** 		if (count == maxCount) {
 4704              		.loc 1 724 0
 4705 0138 BA6A     		ldr	r2, [r7, #40]
 4706 013a 7B69     		ldr	r3, [r7, #20]
 4707 013c 9A42     		cmp	r2, r3
 4708 013e 1AD1     		bne	.L188
 725:src/modbus.c  **** 			s = getData(firstRequest++);
 4709              		.loc 1 725 0
 4710 0140 164B     		ldr	r3, .L191
 4711 0142 1B68     		ldr	r3, [r3, #0]
 4712 0144 1A46     		mov	r2, r3
 4713 0146 03F10101 		add	r1, r3, #1
 4714 014a 144B     		ldr	r3, .L191
 4715 014c 1960     		str	r1, [r3, #0]
 4716 014e 1046     		mov	r0, r2
 4717 0150 FFF7FEFF 		bl	getData
 4718 0154 0246     		mov	r2, r0
 4719 0156 144B     		ldr	r3, .L191+12
 4720 0158 1A60     		str	r2, [r3, #0]
 726:src/modbus.c  **** 			count = 0;
 4721              		.loc 1 726 0
 4722 015a 4FF00003 		mov	r3, #0
 4723 015e BB62     		str	r3, [r7, #40]
 727:src/modbus.c  **** 			fromBit = 0;
 4724              		.loc 1 727 0
 4725 0160 4FF00003 		mov	r3, #0
 4726 0164 7B62     		str	r3, [r7, #36]
 728:src/modbus.c  **** 			toBit = 7;
 4727              		.loc 1 728 0
 4728 0166 4FF00703 		mov	r3, #7
 4729 016a 3B62     		str	r3, [r7, #32]
 729:src/modbus.c  **** 			flag = 1;
 4730              		.loc 1 729 0
 4731 016c 4FF00103 		mov	r3, #1
 4732 0170 BB61     		str	r3, [r7, #24]
 730:src/modbus.c  **** 			goto again;
 4733              		.loc 1 730 0
 4734 0172 00BF     		nop
 4735              	.L179:
 4736              	.LBE17:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4737              		.loc 1 666 0
 4738 0174 07E0     		b	.L180
 4739              	.L188:
 4740              	.LBB18:
 731:src/modbus.c  **** 		}
 732:src/modbus.c  **** 
 733:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 734:src/modbus.c  **** 		fromBit = fromBit + 8;
 4741              		.loc 1 734 0
 4742 0176 7B6A     		ldr	r3, [r7, #36]
 4743 0178 03F10803 		add	r3, r3, #8
 4744 017c 7B62     		str	r3, [r7, #36]
 735:src/modbus.c  **** 		toBit = toBit + 8;
 4745              		.loc 1 735 0
 4746 017e 3B6A     		ldr	r3, [r7, #32]
 4747 0180 03F10803 		add	r3, r3, #8
 4748 0184 3B62     		str	r3, [r7, #32]
 4749              	.L180:
 4750              	.LBE18:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4751              		.loc 1 666 0 discriminator 1
 4752 0186 FB6A     		ldr	r3, [r7, #44]
 4753 0188 002B     		cmp	r3, #0
 4754 018a 82DC     		bgt	.L189
 736:src/modbus.c  **** 	}
 737:src/modbus.c  **** /*
 738:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 739:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 740:src/modbus.c  **** 	}
 741:src/modbus.c  **** */
 742:src/modbus.c  **** 	return 0;
 4755              		.loc 1 742 0
 4756 018c 4FF00003 		mov	r3, #0
 743:src/modbus.c  **** 
 744:src/modbus.c  **** }
 4757              		.loc 1 744 0
 4758 0190 1846     		mov	r0, r3
 4759 0192 07F13007 		add	r7, r7, #48
 4760 0196 BD46     		mov	sp, r7
 4761 0198 80BD     		pop	{r7, pc}
 4762              	.L192:
 4763 019a 00BF     		.align	2
 4764              	.L191:
 4765 019c 00000000 		.word	firstRequest
 4766 01a0 00000000 		.word	totalRequest
 4767 01a4 00000000 		.word	rPacket
 4768 01a8 00000000 		.word	s
 4769              		.cfi_endproc
 4770              	.LFE14:
 4772              		.section	.text.readCoil,"ax",%progbits
 4773              		.align	2
 4774              		.global	readCoil
 4775              		.thumb
 4776              		.thumb_func
 4778              	readCoil:
 4779              	.LFB15:
 745:src/modbus.c  **** 
 746:src/modbus.c  **** uint32_t readCoil(uint32_t *qPacket) {
 4780              		.loc 1 746 0
 4781              		.cfi_startproc
 4782              		@ args = 0, pretend = 0, frame = 48
 4783              		@ frame_needed = 1, uses_anonymous_args = 0
 4784 0000 80B5     		push	{r7, lr}
 4785              	.LCFI45:
 4786              		.cfi_def_cfa_offset 8
 4787 0002 8CB0     		sub	sp, sp, #48
 4788              	.LCFI46:
 4789              		.cfi_def_cfa_offset 56
 4790 0004 00AF     		add	r7, sp, #0
 4791              		.cfi_offset 14, -4
 4792              		.cfi_offset 7, -8
 4793              	.LCFI47:
 4794              		.cfi_def_cfa_register 7
 4795 0006 7860     		str	r0, [r7, #4]
 747:src/modbus.c  **** 
 748:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 749:src/modbus.c  **** 	qPacket++;
 4796              		.loc 1 749 0
 4797 0008 7B68     		ldr	r3, [r7, #4]
 4798 000a 03F10403 		add	r3, r3, #4
 4799 000e 7B60     		str	r3, [r7, #4]
 750:src/modbus.c  **** 
 751:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 752:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 753:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 4800              		.loc 1 753 0
 4801 0010 7B68     		ldr	r3, [r7, #4]
 4802 0012 1A68     		ldr	r2, [r3, #0]
 4803 0014 5F4B     		ldr	r3, .L206
 4804 0016 1A60     		str	r2, [r3, #0]
 4805 0018 7B68     		ldr	r3, [r7, #4]
 4806 001a 03F10403 		add	r3, r3, #4
 4807 001e 7B60     		str	r3, [r7, #4]
 754:src/modbus.c  **** 	totalRequest = *qPacket;
 4808              		.loc 1 754 0
 4809 0020 7B68     		ldr	r3, [r7, #4]
 4810 0022 1A68     		ldr	r2, [r3, #0]
 4811 0024 5C4B     		ldr	r3, .L206+4
 4812 0026 1A60     		str	r2, [r3, #0]
 755:src/modbus.c  **** 
 756:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 757:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4813              		.loc 1 757 0
 4814 0028 5B4B     		ldr	r3, .L206+4
 4815 002a 1B68     		ldr	r3, [r3, #0]
 4816 002c 4FEAD303 		lsr	r3, r3, #3
 4817 0030 03F10103 		add	r3, r3, #1
 4818 0034 FB60     		str	r3, [r7, #12]
 758:src/modbus.c  **** 
 759:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 760:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4819              		.loc 1 760 0
 4820 0036 594B     		ldr	r3, .L206+8
 4821 0038 1B68     		ldr	r3, [r3, #0]
 4822 003a FA68     		ldr	r2, [r7, #12]
 4823 003c 1A60     		str	r2, [r3, #0]
 761:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 762:src/modbus.c  **** 	rPacket++;
 4824              		.loc 1 762 0
 4825 003e 574B     		ldr	r3, .L206+8
 4826 0040 1B68     		ldr	r3, [r3, #0]
 4827 0042 03F10402 		add	r2, r3, #4
 4828 0046 554B     		ldr	r3, .L206+8
 4829 0048 1A60     		str	r2, [r3, #0]
 763:src/modbus.c  **** 
 764:src/modbus.c  **** 	//Fetch first address data.
 765:src/modbus.c  **** 	s = getData(firstRequest++);
 4830              		.loc 1 765 0
 4831 004a 524B     		ldr	r3, .L206
 4832 004c 1B68     		ldr	r3, [r3, #0]
 4833 004e 1A46     		mov	r2, r3
 4834 0050 03F10101 		add	r1, r3, #1
 4835 0054 4F4B     		ldr	r3, .L206
 4836 0056 1960     		str	r1, [r3, #0]
 4837 0058 1046     		mov	r0, r2
 4838 005a FFF7FEFF 		bl	getData
 4839 005e 0246     		mov	r2, r0
 4840 0060 4F4B     		ldr	r3, .L206+12
 4841 0062 1A60     		str	r2, [r3, #0]
 766:src/modbus.c  **** 
 767:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4842              		.loc 1 767 0
 4843 0064 4C4B     		ldr	r3, .L206+4
 4844 0066 1B68     		ldr	r3, [r3, #0]
 4845 0068 FB62     		str	r3, [r7, #44]
 768:src/modbus.c  **** 	int count = 0;
 4846              		.loc 1 768 0
 4847 006a 4FF00003 		mov	r3, #0
 4848 006e BB62     		str	r3, [r7, #40]
 769:src/modbus.c  **** 	int fromBit = 0;
 4849              		.loc 1 769 0
 4850 0070 4FF00003 		mov	r3, #0
 4851 0074 7B62     		str	r3, [r7, #36]
 770:src/modbus.c  **** 	int toBit = 7;
 4852              		.loc 1 770 0
 4853 0076 4FF00703 		mov	r3, #7
 4854 007a 3B62     		str	r3, [r7, #32]
 771:src/modbus.c  **** 	int shiftRight;
 772:src/modbus.c  **** 	int flag = 0;
 4855              		.loc 1 772 0
 4856 007c 4FF00003 		mov	r3, #0
 4857 0080 BB61     		str	r3, [r7, #24]
 773:src/modbus.c  **** 	int maxCount = 0;
 4858              		.loc 1 773 0
 4859 0082 4FF00003 		mov	r3, #0
 4860 0086 7B61     		str	r3, [r7, #20]
 774:src/modbus.c  **** 	//int d;
 775:src/modbus.c  **** 
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4861              		.loc 1 776 0
 4862 0088 79E0     		b	.L195
 4863              	.L204:
 4864              	.LBB19:
 777:src/modbus.c  **** 
 778:src/modbus.c  **** 		if (totalRequest < 8) {
 4865              		.loc 1 778 0
 4866 008a 434B     		ldr	r3, .L206+4
 4867 008c 1B68     		ldr	r3, [r3, #0]
 4868 008e 072B     		cmp	r3, #7
 4869 0090 04D8     		bhi	.L196
 779:src/modbus.c  **** 			toBit = totalRequest - 1;
 4870              		.loc 1 779 0
 4871 0092 414B     		ldr	r3, .L206+4
 4872 0094 1B68     		ldr	r3, [r3, #0]
 4873 0096 03F1FF33 		add	r3, r3, #-1
 4874 009a 3B62     		str	r3, [r7, #32]
 4875              	.L196:
 780:src/modbus.c  **** 		}
 781:src/modbus.c  **** 
 782:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 783:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4876              		.loc 1 783 0
 4877 009c FA6A     		ldr	r2, [r7, #44]
 4878 009e 3E4B     		ldr	r3, .L206+4
 4879 00a0 1B68     		ldr	r3, [r3, #0]
 4880 00a2 03F00703 		and	r3, r3, #7
 4881 00a6 9A42     		cmp	r2, r3
 4882 00a8 09D1     		bne	.L197
 4883              		.loc 1 783 0 is_stmt 0 discriminator 1
 4884 00aa BB69     		ldr	r3, [r7, #24]
 4885 00ac 012B     		cmp	r3, #1
 4886 00ae 06D1     		bne	.L197
 784:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4887              		.loc 1 784 0 is_stmt 1
 4888 00b0 394B     		ldr	r3, .L206+4
 4889 00b2 1B68     		ldr	r3, [r3, #0]
 4890 00b4 03F00703 		and	r3, r3, #7
 4891 00b8 03F1FF33 		add	r3, r3, #-1
 4892 00bc 3B62     		str	r3, [r7, #32]
 4893              	.L197:
 785:src/modbus.c  **** 		}
 786:src/modbus.c  **** 
 787:src/modbus.c  **** 		//Call masking function and store value in r.
 788:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4894              		.loc 1 788 0
 4895 00be 786A     		ldr	r0, [r7, #36]
 4896 00c0 396A     		ldr	r1, [r7, #32]
 4897 00c2 FFF7FEFF 		bl	getMask
 4898 00c6 B860     		str	r0, [r7, #8]
 789:src/modbus.c  **** 
 790:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 791:src/modbus.c  **** 		unsigned int result = r & s->value;
 4899              		.loc 1 791 0
 4900 00c8 354B     		ldr	r3, .L206+12
 4901 00ca 1B68     		ldr	r3, [r3, #0]
 4902 00cc 5B68     		ldr	r3, [r3, #4]
 4903 00ce 1A46     		mov	r2, r3
 4904 00d0 BB68     		ldr	r3, [r7, #8]
 4905 00d2 02EA0303 		and	r3, r2, r3
 4906 00d6 3B61     		str	r3, [r7, #16]
 792:src/modbus.c  **** 
 793:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 794:src/modbus.c  **** 		if (toBit == 7) {
 4907              		.loc 1 794 0
 4908 00d8 3B6A     		ldr	r3, [r7, #32]
 4909 00da 072B     		cmp	r3, #7
 4910 00dc 0ED0     		beq	.L205
 4911              	.L198:
 795:src/modbus.c  **** 			goto next;
 796:src/modbus.c  **** 		}
 797:src/modbus.c  **** 
 798:src/modbus.c  **** 		//Else shift right.
 799:src/modbus.c  **** 		else {
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4912              		.loc 1 800 0
 4913 00de 7B6A     		ldr	r3, [r7, #36]
 4914 00e0 FB61     		str	r3, [r7, #28]
 4915 00e2 07E0     		b	.L200
 4916              	.L201:
 801:src/modbus.c  **** 				result = result >> 1;
 4917              		.loc 1 801 0 discriminator 2
 4918 00e4 3B69     		ldr	r3, [r7, #16]
 4919 00e6 4FEA5303 		lsr	r3, r3, #1
 4920 00ea 3B61     		str	r3, [r7, #16]
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4921              		.loc 1 800 0 discriminator 2
 4922 00ec FB69     		ldr	r3, [r7, #28]
 4923 00ee 03F1FF33 		add	r3, r3, #-1
 4924 00f2 FB61     		str	r3, [r7, #28]
 4925              	.L200:
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4926              		.loc 1 800 0 is_stmt 0 discriminator 1
 4927 00f4 FB69     		ldr	r3, [r7, #28]
 4928 00f6 002B     		cmp	r3, #0
 4929 00f8 F4DC     		bgt	.L201
 4930 00fa 00E0     		b	.L199
 4931              	.L205:
 795:src/modbus.c  **** 			goto next;
 4932              		.loc 1 795 0 is_stmt 1
 4933 00fc 00BF     		nop
 4934              	.L199:
 802:src/modbus.c  **** 			}
 803:src/modbus.c  **** 		}
 804:src/modbus.c  **** 
 805:src/modbus.c  **** 		//Label
 806:src/modbus.c  **** 		next:
 807:src/modbus.c  **** 
 808:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 809:src/modbus.c  **** 		*rPacket = result;
 4935              		.loc 1 809 0
 4936 00fe 274B     		ldr	r3, .L206+8
 4937 0100 1B68     		ldr	r3, [r3, #0]
 4938 0102 3A69     		ldr	r2, [r7, #16]
 4939 0104 1A60     		str	r2, [r3, #0]
 810:src/modbus.c  **** 		rPacket++;
 4940              		.loc 1 810 0
 4941 0106 254B     		ldr	r3, .L206+8
 4942 0108 1B68     		ldr	r3, [r3, #0]
 4943 010a 03F10402 		add	r2, r3, #4
 4944 010e 234B     		ldr	r3, .L206+8
 4945 0110 1A60     		str	r2, [r3, #0]
 811:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 812:src/modbus.c  **** 
 813:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 814:src/modbus.c  **** 		count++;
 4946              		.loc 1 814 0
 4947 0112 BB6A     		ldr	r3, [r7, #40]
 4948 0114 03F10103 		add	r3, r3, #1
 4949 0118 BB62     		str	r3, [r7, #40]
 815:src/modbus.c  **** 
 816:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 817:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4950              		.loc 1 817 0
 4951 011a FB6A     		ldr	r3, [r7, #44]
 4952 011c A3F10803 		sub	r3, r3, #8
 4953 0120 FB62     		str	r3, [r7, #44]
 818:src/modbus.c  **** 
 819:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 820:src/modbus.c  **** 		if (totalRequest >= 32) {
 4954              		.loc 1 820 0
 4955 0122 1D4B     		ldr	r3, .L206+4
 4956 0124 1B68     		ldr	r3, [r3, #0]
 4957 0126 1F2B     		cmp	r3, #31
 4958 0128 02D9     		bls	.L202
 821:src/modbus.c  **** 			maxCount = 4;
 4959              		.loc 1 821 0
 4960 012a 4FF00403 		mov	r3, #4
 4961 012e 7B61     		str	r3, [r7, #20]
 4962              	.L202:
 822:src/modbus.c  **** 		}
 823:src/modbus.c  **** 
 824:src/modbus.c  **** 		//If not then set
 825:src/modbus.c  **** 		/*else{
 826:src/modbus.c  **** 		 count = 0;
 827:src/modbus.c  **** 		 fromBit = 0;
 828:src/modbus.c  **** 		 toBit = 7;
 829:src/modbus.c  **** 		 flag = 1;
 830:src/modbus.c  **** 		 goto again;
 831:src/modbus.c  **** 		 }*/
 832:src/modbus.c  **** 
 833:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 834:src/modbus.c  **** 		if (count == maxCount) {
 4963              		.loc 1 834 0
 4964 0130 BA6A     		ldr	r2, [r7, #40]
 4965 0132 7B69     		ldr	r3, [r7, #20]
 4966 0134 9A42     		cmp	r2, r3
 4967 0136 1AD1     		bne	.L203
 835:src/modbus.c  **** 			s = getData(firstRequest++);
 4968              		.loc 1 835 0
 4969 0138 164B     		ldr	r3, .L206
 4970 013a 1B68     		ldr	r3, [r3, #0]
 4971 013c 1A46     		mov	r2, r3
 4972 013e 03F10101 		add	r1, r3, #1
 4973 0142 144B     		ldr	r3, .L206
 4974 0144 1960     		str	r1, [r3, #0]
 4975 0146 1046     		mov	r0, r2
 4976 0148 FFF7FEFF 		bl	getData
 4977 014c 0246     		mov	r2, r0
 4978 014e 144B     		ldr	r3, .L206+12
 4979 0150 1A60     		str	r2, [r3, #0]
 836:src/modbus.c  **** 			count = 0;
 4980              		.loc 1 836 0
 4981 0152 4FF00003 		mov	r3, #0
 4982 0156 BB62     		str	r3, [r7, #40]
 837:src/modbus.c  **** 			fromBit = 0;
 4983              		.loc 1 837 0
 4984 0158 4FF00003 		mov	r3, #0
 4985 015c 7B62     		str	r3, [r7, #36]
 838:src/modbus.c  **** 			toBit = 7;
 4986              		.loc 1 838 0
 4987 015e 4FF00703 		mov	r3, #7
 4988 0162 3B62     		str	r3, [r7, #32]
 839:src/modbus.c  **** 			flag = 1;
 4989              		.loc 1 839 0
 4990 0164 4FF00103 		mov	r3, #1
 4991 0168 BB61     		str	r3, [r7, #24]
 840:src/modbus.c  **** 			goto again;
 4992              		.loc 1 840 0
 4993 016a 00BF     		nop
 4994              	.L194:
 4995              	.LBE19:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4996              		.loc 1 776 0
 4997 016c 07E0     		b	.L195
 4998              	.L203:
 4999              	.LBB20:
 841:src/modbus.c  **** 		}
 842:src/modbus.c  **** 
 843:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 844:src/modbus.c  **** 		fromBit = fromBit + 8;
 5000              		.loc 1 844 0
 5001 016e 7B6A     		ldr	r3, [r7, #36]
 5002 0170 03F10803 		add	r3, r3, #8
 5003 0174 7B62     		str	r3, [r7, #36]
 845:src/modbus.c  **** 		toBit = toBit + 8;
 5004              		.loc 1 845 0
 5005 0176 3B6A     		ldr	r3, [r7, #32]
 5006 0178 03F10803 		add	r3, r3, #8
 5007 017c 3B62     		str	r3, [r7, #32]
 5008              	.L195:
 5009              	.LBE20:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 5010              		.loc 1 776 0 discriminator 1
 5011 017e FB6A     		ldr	r3, [r7, #44]
 5012 0180 002B     		cmp	r3, #0
 5013 0182 82DC     		bgt	.L204
 846:src/modbus.c  **** 	}
 847:src/modbus.c  **** 
 848:src/modbus.c  **** /*	for (d = 0; d < (byteStream + 3); d++) {
 849:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 850:src/modbus.c  **** 	}
 851:src/modbus.c  **** */
 852:src/modbus.c  **** 	return 0;
 5014              		.loc 1 852 0
 5015 0184 4FF00003 		mov	r3, #0
 853:src/modbus.c  **** }
 5016              		.loc 1 853 0
 5017 0188 1846     		mov	r0, r3
 5018 018a 07F13007 		add	r7, r7, #48
 5019 018e BD46     		mov	sp, r7
 5020 0190 80BD     		pop	{r7, pc}
 5021              	.L207:
 5022 0192 00BF     		.align	2
 5023              	.L206:
 5024 0194 00000000 		.word	firstRequest
 5025 0198 00000000 		.word	totalRequest
 5026 019c 00000000 		.word	rPacket
 5027 01a0 00000000 		.word	s
 5028              		.cfi_endproc
 5029              	.LFE15:
 5031              		.section	.text.getMask,"ax",%progbits
 5032              		.align	2
 5033              		.global	getMask
 5034              		.thumb
 5035              		.thumb_func
 5037              	getMask:
 5038              	.LFB16:
 854:src/modbus.c  **** 
 855:src/modbus.c  **** unsigned int getMask(int a, int b) {
 5039              		.loc 1 855 0
 5040              		.cfi_startproc
 5041              		@ args = 0, pretend = 0, frame = 16
 5042              		@ frame_needed = 1, uses_anonymous_args = 0
 5043              		@ link register save eliminated.
 5044 0000 80B4     		push	{r7}
 5045              	.LCFI48:
 5046              		.cfi_def_cfa_offset 4
 5047 0002 85B0     		sub	sp, sp, #20
 5048              	.LCFI49:
 5049              		.cfi_def_cfa_offset 24
 5050 0004 00AF     		add	r7, sp, #0
 5051              		.cfi_offset 7, -4
 5052              	.LCFI50:
 5053              		.cfi_def_cfa_register 7
 5054 0006 7860     		str	r0, [r7, #4]
 5055 0008 3960     		str	r1, [r7, #0]
 856:src/modbus.c  **** 	unsigned int i;
 857:src/modbus.c  **** 	unsigned int r = 0;
 5056              		.loc 1 857 0
 5057 000a 4FF00003 		mov	r3, #0
 5058 000e BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5059              		.loc 1 858 0
 5060 0010 7B68     		ldr	r3, [r7, #4]
 5061 0012 FB60     		str	r3, [r7, #12]
 5062 0014 0CE0     		b	.L209
 5063              	.L210:
 859:src/modbus.c  **** 		r |= 1 << i;
 5064              		.loc 1 859 0 discriminator 2
 5065 0016 FB68     		ldr	r3, [r7, #12]
 5066 0018 4FF00102 		mov	r2, #1
 5067 001c 02FA03F3 		lsl	r3, r2, r3
 5068 0020 BA68     		ldr	r2, [r7, #8]
 5069 0022 42EA0303 		orr	r3, r2, r3
 5070 0026 BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5071              		.loc 1 858 0 discriminator 2
 5072 0028 FB68     		ldr	r3, [r7, #12]
 5073 002a 03F10103 		add	r3, r3, #1
 5074 002e FB60     		str	r3, [r7, #12]
 5075              	.L209:
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5076              		.loc 1 858 0 is_stmt 0 discriminator 1
 5077 0030 3A68     		ldr	r2, [r7, #0]
 5078 0032 FB68     		ldr	r3, [r7, #12]
 5079 0034 9A42     		cmp	r2, r3
 5080 0036 EED2     		bcs	.L210
 860:src/modbus.c  **** 	}
 861:src/modbus.c  **** 	return r;
 5081              		.loc 1 861 0 is_stmt 1
 5082 0038 BB68     		ldr	r3, [r7, #8]
 862:src/modbus.c  **** }
 5083              		.loc 1 862 0
 5084 003a 1846     		mov	r0, r3
 5085 003c 07F11407 		add	r7, r7, #20
 5086 0040 BD46     		mov	sp, r7
 5087 0042 80BC     		pop	{r7}
 5088 0044 7047     		bx	lr
 5089              		.cfi_endproc
 5090              	.LFE16:
 5092 0046 00BF     		.text
 5093              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 modbus.c
     /tmp/ccnrSPwC.s:25     .rodata.crcHi:00000000 $d
     /tmp/ccnrSPwC.s:28     .rodata.crcHi:00000000 crcHi
     /tmp/ccnrSPwC.s:286    .rodata.crcLo:00000000 $d
     /tmp/ccnrSPwC.s:289    .rodata.crcLo:00000000 crcLo
     /tmp/ccnrSPwC.s:551    .bss.firstRequest:00000000 firstRequest
     /tmp/ccnrSPwC.s:548    .bss.firstRequest:00000000 $d
     /tmp/ccnrSPwC.s:558    .bss.totalRequest:00000000 totalRequest
     /tmp/ccnrSPwC.s:555    .bss.totalRequest:00000000 $d
     /tmp/ccnrSPwC.s:565    .bss.writeRequest:00000000 writeRequest
     /tmp/ccnrSPwC.s:562    .bss.writeRequest:00000000 $d
     /tmp/ccnrSPwC.s:572    .bss.arrayResponsePacket:00000000 arrayResponsePacket
     /tmp/ccnrSPwC.s:569    .bss.arrayResponsePacket:00000000 $d
     /tmp/ccnrSPwC.s:579    .data.rPacket:00000000 rPacket
     /tmp/ccnrSPwC.s:576    .data.rPacket:00000000 $d
     /tmp/ccnrSPwC.s:586    .bss.users:00000000 users
     /tmp/ccnrSPwC.s:583    .bss.users:00000000 $d
                            *COM*:00000004 s
     /tmp/ccnrSPwC.s:590    .text.addData:00000000 $t
     /tmp/ccnrSPwC.s:595    .text.addData:00000000 addData
     /tmp/ccnrSPwC.s:844    .text.addData:0000021c $d
     /tmp/ccnrSPwC.s:858    .text.addData:00000248 $d
     /tmp/ccnrSPwC.s:863    .text.addData:00000254 $t
     /tmp/ccnrSPwC.s:1339   .text.addData:00000634 $d
     /tmp/ccnrSPwC.s:1345   .text.addData:00000644 $t
     /tmp/ccnrSPwC.s:1581   .text.addData:00000864 $d
     /tmp/ccnrSPwC.s:1594   .text.addData:00000890 $t
     /tmp/ccnrSPwC.s:2044   .text.addData:00000c60 $d
     /tmp/ccnrSPwC.s:2047   .text.addData:00000c64 $t
     /tmp/ccnrSPwC.s:2205   .rodata:00000000 $d
     /tmp/ccnrSPwC.s:2209   .text.putData:00000000 $t
     /tmp/ccnrSPwC.s:2214   .text.putData:00000000 putData
     /tmp/ccnrSPwC.s:2262   .text.putData:00000034 $d
     /tmp/ccnrSPwC.s:2268   .text.getData:00000000 $t
     /tmp/ccnrSPwC.s:2273   .text.getData:00000000 getData
     /tmp/ccnrSPwC.s:2519   .text.getData:0000021c $d
     /tmp/ccnrSPwC.s:2533   .text.getData:00000248 $d
     /tmp/ccnrSPwC.s:2538   .text.getData:00000254 $t
     /tmp/ccnrSPwC.s:2855   .text.getData:000004e0 $d
     /tmp/ccnrSPwC.s:2860   .text.validateSlaveID:00000000 $t
     /tmp/ccnrSPwC.s:2865   .text.validateSlaveID:00000000 validateSlaveID
     /tmp/ccnrSPwC.s:2918   .text.validateSlaveID:00000040 $d
     /tmp/ccnrSPwC.s:2923   .text.validateCrc:00000000 $t
     /tmp/ccnrSPwC.s:2928   .text.validateCrc:00000000 validateCrc
     /tmp/ccnrSPwC.s:3027   .text.validateCrc:0000009c $d
     /tmp/ccnrSPwC.s:3033   .text.calculateOutputCrc:00000000 $t
     /tmp/ccnrSPwC.s:3038   .text.calculateOutputCrc:00000000 calculateOutputCrc
     /tmp/ccnrSPwC.s:3127   .text.calculateOutputCrc:00000090 $d
     /tmp/ccnrSPwC.s:3134   .text.validateFunction:00000000 $t
     /tmp/ccnrSPwC.s:3139   .text.validateFunction:00000000 validateFunction
     /tmp/ccnrSPwC.s:3183   .text.validateFunction:00000038 $d
     /tmp/ccnrSPwC.s:3201   .text.validateFunction:00000078 $t
     /tmp/ccnrSPwC.s:4778   .text.readCoil:00000000 readCoil
     /tmp/ccnrSPwC.s:4517   .text.readDiscreteInputs:00000000 readDiscreteInputs
     /tmp/ccnrSPwC.s:4327   .text.readHoldingRegisters:00000000 readHoldingRegisters
     /tmp/ccnrSPwC.s:4066   .text.readInputRegisters:00000000 readInputRegisters
     /tmp/ccnrSPwC.s:3904   .text.writeSingleCoil:00000000 writeSingleCoil
     /tmp/ccnrSPwC.s:3760   .text.writeSingleRegister:00000000 writeSingleRegister
     /tmp/ccnrSPwC.s:3528   .text.writeMultipleCoils:00000000 writeMultipleCoils
     /tmp/ccnrSPwC.s:3284   .text.writeMultipleRegisters:00000000 writeMultipleRegisters
     /tmp/ccnrSPwC.s:3725   .text.readExceptionStatus:00000000 readExceptionStatus
     /tmp/ccnrSPwC.s:3274   .text.validateFunction:000000f4 $d
     /tmp/ccnrSPwC.s:3279   .text.writeMultipleRegisters:00000000 $t
     /tmp/ccnrSPwC.s:5037   .text.getMask:00000000 getMask
     /tmp/ccnrSPwC.s:3511   .text.writeMultipleRegisters:00000180 $d
     /tmp/ccnrSPwC.s:3523   .text.writeMultipleCoils:00000000 $t
     /tmp/ccnrSPwC.s:3711   .text.writeMultipleCoils:00000134 $d
     /tmp/ccnrSPwC.s:3720   .text.readExceptionStatus:00000000 $t
     /tmp/ccnrSPwC.s:3755   .text.writeSingleRegister:00000000 $t
     /tmp/ccnrSPwC.s:3891   .text.writeSingleRegister:000000d8 $d
     /tmp/ccnrSPwC.s:3899   .text.writeSingleCoil:00000000 $t
     /tmp/ccnrSPwC.s:4054   .text.writeSingleCoil:000000f4 $d
     /tmp/ccnrSPwC.s:4061   .text.readInputRegisters:00000000 $t
     /tmp/ccnrSPwC.s:4314   .text.readInputRegisters:0000019c $d
     /tmp/ccnrSPwC.s:4322   .text.readHoldingRegisters:00000000 $t
     /tmp/ccnrSPwC.s:4504   .text.readHoldingRegisters:00000120 $d
     /tmp/ccnrSPwC.s:4512   .text.readDiscreteInputs:00000000 $t
     /tmp/ccnrSPwC.s:4765   .text.readDiscreteInputs:0000019c $d
     /tmp/ccnrSPwC.s:4773   .text.readCoil:00000000 $t
     /tmp/ccnrSPwC.s:5024   .text.readCoil:00000194 $d
     /tmp/ccnrSPwC.s:5032   .text.getMask:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcmp
malloc
exit
memset
free
printf
