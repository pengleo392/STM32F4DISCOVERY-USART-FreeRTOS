   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.UsartTask,"ax",%progbits
  25              		.align	2
  26              		.thumb
  27              		.thumb_func
  29              	UsartTask:
  30              	.LFB110:
  31              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * Copyright (C) 2013 Chetan Patil, http://chetanpatil.info
   3:src/main.c    ****  * 
   4:src/main.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   5:src/main.c    ****  * of this software and associated documentation files (the "Software"), to deal
   6:src/main.c    ****  * in the Software without restriction, including without limitation the rights
   7:src/main.c    ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8:src/main.c    ****  * copies of the Software, and to permit persons to whom the Software is
   9:src/main.c    ****  * furnished to do so, subject to the following conditions:
  10:src/main.c    ****  * 
  11:src/main.c    ****  * The above copyright notice and this permission notice shall be included in
  12:src/main.c    ****  * all copies or substantial portions of the Software.
  13:src/main.c    ****  * 
  14:src/main.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15:src/main.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16:src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17:src/main.c    ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18:src/main.c    ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19:src/main.c    ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  20:src/main.c    ****  * THE SOFTWARE.
  21:src/main.c    ****  * 
  22:src/main.c    ****  * @author Chetan Patil | http://chetanpatil.info
  23:src/main.c    ****  */
  24:src/main.c    **** 
  25:src/main.c    **** //Example code to loop back the data sent to USART2 on STM32F4DISCOVERY
  26:src/main.c    **** 
  27:src/main.c    **** //Inlcude header files
  28:src/main.c    **** #include "stm32f4xx.h"
  29:src/main.c    **** #include "FreeRTOS.h"
  30:src/main.c    **** #include "task.h"
  31:src/main.c    **** #include <math.h>
  32:src/main.c    **** #include <stdio.h>
  33:src/main.c    **** #include <stdlib.h>
  34:src/main.c    **** 
  35:src/main.c    **** //Task For Sending Data Via USART
  36:src/main.c    **** static void UsartTask(void *pvParameters)
  37:src/main.c    **** 
  38:src/main.c    **** {
  32              		.loc 1 38 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 16
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 14, -4
  44              		.cfi_offset 7, -8
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
  48              	.LBB2:
  39:src/main.c    **** 
  40:src/main.c    **** while(1) {
  41:src/main.c    **** 
  42:src/main.c    **** 	//Variable to store received data	
  43:src/main.c    **** 	uint32_t Data;
  44:src/main.c    **** 	
  45:src/main.c    **** 	//Wait for character
  46:src/main.c    **** 	while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
  49              		.loc 1 46 0
  50 0008 0AE0     		b	.L2
  51              	.L3:
  47:src/main.c    ****                 if (USART_GetFlagStatus(USART2, (USART_FLAG_ORE | USART_FLAG_NE | USART_FLAG_FE | U
  52              		.loc 1 47 0
  53 000a 1448     		ldr	r0, .L6
  54 000c 4FF00F01 		mov	r1, #15
  55 0010 FFF7FEFF 		bl	USART_GetFlagStatus
  56 0014 0346     		mov	r3, r0
  57 0016 002B     		cmp	r3, #0
  58 0018 02D0     		beq	.L2
  48:src/main.c    **** 		USART_ReceiveData(USART2); // Clear Error
  59              		.loc 1 48 0
  60 001a 1048     		ldr	r0, .L6
  61 001c FFF7FEFF 		bl	USART_ReceiveData
  62              	.L2:
  46:src/main.c    **** 	while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
  63              		.loc 1 46 0 discriminator 1
  64 0020 0E48     		ldr	r0, .L6
  65 0022 4FF02001 		mov	r1, #32
  66 0026 FFF7FEFF 		bl	USART_GetFlagStatus
  67 002a 0346     		mov	r3, r0
  68 002c 002B     		cmp	r3, #0
  69 002e ECD0     		beq	.L3
  49:src/main.c    **** 	}
  50:src/main.c    **** 
  51:src/main.c    **** 	//Collect the caracter
  52:src/main.c    **** 	Data = USART_ReceiveData(USART2);
  70              		.loc 1 52 0
  71 0030 0A48     		ldr	r0, .L6
  72 0032 FFF7FEFF 		bl	USART_ReceiveData
  73 0036 0346     		mov	r3, r0
  74 0038 FB60     		str	r3, [r7, #12]
  53:src/main.c    **** 
  54:src/main.c    **** 	//Wait till the flag resets
  55:src/main.c    **** 	while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
  75              		.loc 1 55 0
  76 003a 00BF     		nop
  77              	.L4:
  78              		.loc 1 55 0 is_stmt 0 discriminator 1
  79 003c 0748     		ldr	r0, .L6
  80 003e 4FF08001 		mov	r1, #128
  81 0042 FFF7FEFF 		bl	USART_GetFlagStatus
  82 0046 0346     		mov	r3, r0
  83 0048 002B     		cmp	r3, #0
  84 004a F7D0     		beq	.L4
  56:src/main.c    **** 
  57:src/main.c    **** 	//Send the data
  58:src/main.c    **** 	USART_SendData(USART2, Data); // Echo Char
  85              		.loc 1 58 0 is_stmt 1
  86 004c FB68     		ldr	r3, [r7, #12]
  87 004e 9BB2     		uxth	r3, r3
  88 0050 0248     		ldr	r0, .L6
  89 0052 1946     		mov	r1, r3
  90 0054 FFF7FEFF 		bl	USART_SendData
  91              	.LBE2:
  59:src/main.c    **** }
  92              		.loc 1 59 0
  93 0058 00BF     		nop
  94              	.LBB3:
  46:src/main.c    **** 	while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
  95              		.loc 1 46 0
  96 005a E1E7     		b	.L2
  97              	.L7:
  98              		.align	2
  99              	.L6:
 100 005c 00440040 		.word	1073759232
 101              	.LBE3:
 102              		.cfi_endproc
 103              	.LFE110:
 105              		.section	.text.initx,"ax",%progbits
 106              		.align	2
 107              		.global	initx
 108              		.thumb
 109              		.thumb_func
 111              	initx:
 112              	.LFB111:
  60:src/main.c    **** 
  61:src/main.c    **** while(1);
  62:src/main.c    **** 
  63:src/main.c    **** }
  64:src/main.c    **** 
  65:src/main.c    **** 
  66:src/main.c    **** //Initialize GPIO and USART2
  67:src/main.c    **** void initx(void){
 113              		.loc 1 67 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 24
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117 0000 80B5     		push	{r7, lr}
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 8
 120 0002 86B0     		sub	sp, sp, #24
 121              	.LCFI4:
 122              		.cfi_def_cfa_offset 32
 123 0004 00AF     		add	r7, sp, #0
 124              		.cfi_offset 14, -4
 125              		.cfi_offset 7, -8
 126              	.LCFI5:
 127              		.cfi_def_cfa_register 7
  68:src/main.c    **** 
  69:src/main.c    **** 	//Enable GPIO Clocks For USART2
  70:src/main.c    ****         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 128              		.loc 1 70 0
 129 0006 4FF00100 		mov	r0, #1
 130 000a 4FF00101 		mov	r1, #1
 131 000e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  71:src/main.c    **** 
  72:src/main.c    **** 	//Enable Clocks for USART2
  73:src/main.c    ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 132              		.loc 1 73 0
 133 0012 4FF40030 		mov	r0, #131072
 134 0016 4FF00101 		mov	r1, #1
 135 001a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  74:src/main.c    **** 
  75:src/main.c    **** 	//Structure With Data For GPIO Configuration
  76:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
  77:src/main.c    **** 
  78:src/main.c    **** 	//Structure With Data For USART Configuration
  79:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
  80:src/main.c    **** 
  81:src/main.c    **** 	//GPIO Configuration
  82:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 136              		.loc 1 82 0
 137 001e 4FF00C03 		mov	r3, #12
 138 0022 3B61     		str	r3, [r7, #16]
  83:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 139              		.loc 1 83 0
 140 0024 4FF00203 		mov	r3, #2
 141 0028 3B75     		strb	r3, [r7, #20]
  84:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 142              		.loc 1 84 0
 143 002a 4FF00003 		mov	r3, #0
 144 002e BB75     		strb	r3, [r7, #22]
  85:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 145              		.loc 1 85 0
 146 0030 4FF00003 		mov	r3, #0
 147 0034 FB75     		strb	r3, [r7, #23]
  86:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 148              		.loc 1 86 0
 149 0036 4FF00203 		mov	r3, #2
 150 003a 7B75     		strb	r3, [r7, #21]
  87:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 151              		.loc 1 87 0
 152 003c 07F11003 		add	r3, r7, #16
 153 0040 2648     		ldr	r0, .L9
 154 0042 1946     		mov	r1, r3
 155 0044 FFF7FEFF 		bl	GPIO_Init
  88:src/main.c    **** 
  89:src/main.c    **** 	//Connect USART pins to AF
  90:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 156              		.loc 1 90 0
 157 0048 2448     		ldr	r0, .L9
 158 004a 4FF00201 		mov	r1, #2
 159 004e 4FF00702 		mov	r2, #7
 160 0052 FFF7FEFF 		bl	GPIO_PinAFConfig
  91:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 161              		.loc 1 91 0
 162 0056 2148     		ldr	r0, .L9
 163 0058 4FF00301 		mov	r1, #3
 164 005c 4FF00702 		mov	r2, #7
 165 0060 FFF7FEFF 		bl	GPIO_PinAFConfig
  92:src/main.c    **** 
  93:src/main.c    **** 	//Initialize LED
  94:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 166              		.loc 1 94 0
 167 0064 4FF00800 		mov	r0, #8
 168 0068 4FF00101 		mov	r1, #1
 169 006c FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  95:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 170              		.loc 1 95 0
 171 0070 4FF47043 		mov	r3, #61440
 172 0074 3B61     		str	r3, [r7, #16]
  96:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 173              		.loc 1 96 0
 174 0076 4FF00103 		mov	r3, #1
 175 007a 3B75     		strb	r3, [r7, #20]
  97:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 176              		.loc 1 97 0
 177 007c 4FF00003 		mov	r3, #0
 178 0080 BB75     		strb	r3, [r7, #22]
  98:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 179              		.loc 1 98 0
 180 0082 4FF00303 		mov	r3, #3
 181 0086 7B75     		strb	r3, [r7, #21]
  99:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 182              		.loc 1 99 0
 183 0088 4FF00003 		mov	r3, #0
 184 008c FB75     		strb	r3, [r7, #23]
 100:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 185              		.loc 1 100 0
 186 008e 07F11003 		add	r3, r7, #16
 187 0092 1348     		ldr	r0, .L9+4
 188 0094 1946     		mov	r1, r3
 189 0096 FFF7FEFF 		bl	GPIO_Init
 101:src/main.c    **** 
 102:src/main.c    **** 	//USART Parameters
 103:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 190              		.loc 1 103 0
 191 009a 4FF41643 		mov	r3, #38400
 192 009e 3B60     		str	r3, [r7, #0]
 104:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 193              		.loc 1 104 0
 194 00a0 4FF00003 		mov	r3, #0
 195 00a4 BB80     		strh	r3, [r7, #4]	@ movhi
 105:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 196              		.loc 1 105 0
 197 00a6 4FF00003 		mov	r3, #0
 198 00aa FB80     		strh	r3, [r7, #6]	@ movhi
 106:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 199              		.loc 1 106 0
 200 00ac 4FF00003 		mov	r3, #0
 201 00b0 3B81     		strh	r3, [r7, #8]	@ movhi
 107:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 202              		.loc 1 107 0
 203 00b2 4FF00003 		mov	r3, #0
 204 00b6 BB81     		strh	r3, [r7, #12]	@ movhi
 108:src/main.c    ****         USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 205              		.loc 1 108 0
 206 00b8 4FF00C03 		mov	r3, #12
 207 00bc 7B81     		strh	r3, [r7, #10]	@ movhi
 109:src/main.c    **** 
 110:src/main.c    **** 	//Configuring And Enabling USART2
 111:src/main.c    **** 	USART_Init(USART2, &USART_InitStructure);
 208              		.loc 1 111 0
 209 00be 3B46     		mov	r3, r7
 210 00c0 0848     		ldr	r0, .L9+8
 211 00c2 1946     		mov	r1, r3
 212 00c4 FFF7FEFF 		bl	USART_Init
 112:src/main.c    **** 	USART_Cmd(USART2, ENABLE);
 213              		.loc 1 112 0
 214 00c8 0648     		ldr	r0, .L9+8
 215 00ca 4FF00101 		mov	r1, #1
 216 00ce FFF7FEFF 		bl	USART_Cmd
 113:src/main.c    **** 
 114:src/main.c    **** }
 217              		.loc 1 114 0
 218 00d2 07F11807 		add	r7, r7, #24
 219 00d6 BD46     		mov	sp, r7
 220 00d8 80BD     		pop	{r7, pc}
 221              	.L10:
 222 00da 00BF     		.align	2
 223              	.L9:
 224 00dc 00000240 		.word	1073872896
 225 00e0 000C0240 		.word	1073875968
 226 00e4 00440040 		.word	1073759232
 227              		.cfi_endproc
 228              	.LFE111:
 230              		.section	.rodata
 231              		.align	2
 232              	.LC0:
 233 0000 55736172 		.ascii	"UsartTask\000"
 233      74546173 
 233      6B00
 234 000a 0000     		.section	.text.main,"ax",%progbits
 235              		.align	2
 236              		.global	main
 237              		.thumb
 238              		.thumb_func
 240              	main:
 241              	.LFB112:
 115:src/main.c    **** 
 116:src/main.c    **** 
 117:src/main.c    **** //Main Function
 118:src/main.c    **** int main(void)
 119:src/main.c    **** {
 242              		.loc 1 119 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246 0000 80B5     		push	{r7, lr}
 247              	.LCFI6:
 248              		.cfi_def_cfa_offset 8
 249 0002 84B0     		sub	sp, sp, #16
 250              	.LCFI7:
 251              		.cfi_def_cfa_offset 24
 252 0004 04AF     		add	r7, sp, #16
 253              		.cfi_offset 14, -4
 254              		.cfi_offset 7, -8
 255              	.LCFI8:
 256              		.cfi_def_cfa 7, 8
 120:src/main.c    **** 
 121:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 122:src/main.c    **** 	initx();
 257              		.loc 1 122 0
 258 0006 FFF7FEFF 		bl	initx
 123:src/main.c    **** 
 124:src/main.c    **** 	//Create Task For USART
 125:src/main.c    **** 	xTaskCreate(UsartTask, (signed char*)"UsartTask", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 259              		.loc 1 125 0
 260 000a 0E4B     		ldr	r3, .L12
 261 000c 4FF00102 		mov	r2, #1
 262 0010 0092     		str	r2, [sp, #0]
 263 0012 4FF00002 		mov	r2, #0
 264 0016 0192     		str	r2, [sp, #4]
 265 0018 4FF00002 		mov	r2, #0
 266 001c 0292     		str	r2, [sp, #8]
 267 001e 4FF00002 		mov	r2, #0
 268 0022 0392     		str	r2, [sp, #12]
 269 0024 0848     		ldr	r0, .L12+4
 270 0026 1946     		mov	r1, r3
 271 0028 4FF08002 		mov	r2, #128
 272 002c 4FF00003 		mov	r3, #0
 273 0030 FFF7FEFF 		bl	xTaskGenericCreate
 126:src/main.c    **** 
 127:src/main.c    **** 	//Call Scheduler
 128:src/main.c    **** 	vTaskStartScheduler();
 274              		.loc 1 128 0
 275 0034 FFF7FEFF 		bl	vTaskStartScheduler
 276 0038 4FF00003 		mov	r3, #0
 129:src/main.c    **** 
 130:src/main.c    **** }
 277              		.loc 1 130 0
 278 003c 1846     		mov	r0, r3
 279 003e BD46     		mov	sp, r7
 280 0040 80BD     		pop	{r7, pc}
 281              	.L13:
 282 0042 00BF     		.align	2
 283              	.L12:
 284 0044 00000000 		.word	.LC0
 285 0048 00000000 		.word	UsartTask
 286              		.cfi_endproc
 287              	.LFE112:
 289              		.text
 290              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccgTyxna.s:25     .text.UsartTask:00000000 $t
     /tmp/ccgTyxna.s:29     .text.UsartTask:00000000 UsartTask
     /tmp/ccgTyxna.s:100    .text.UsartTask:0000005c $d
     /tmp/ccgTyxna.s:106    .text.initx:00000000 $t
     /tmp/ccgTyxna.s:111    .text.initx:00000000 initx
     /tmp/ccgTyxna.s:224    .text.initx:000000dc $d
     /tmp/ccgTyxna.s:231    .rodata:00000000 $d
     /tmp/ccgTyxna.s:235    .text.main:00000000 $t
     /tmp/ccgTyxna.s:240    .text.main:00000000 main
     /tmp/ccgTyxna.s:284    .text.main:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USART_GetFlagStatus
USART_ReceiveData
USART_SendData
RCC_AHB1PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
USART_Init
USART_Cmd
xTaskGenericCreate
vTaskStartScheduler
