/*This code sends data : 0-9 to PC via USART2 on STM32F4DISCOVERY using FreeRTOS*/

/*Inlcude header files*/
#include "stm32f4xx.h"
#include "FreeRTOS.h"
#include "task.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

//Modbus specific
#include "modbus.h"
#include "uthash.h"
#include "test.h"

uint32_t getFrameSize(uint32_t Data);
void createPacket();
uint32_t aryPacket[50];
uint32_t size = 0;
uint32_t *qPacket = aryPacket;
uint32_t tempResponsePacket[50]={0};
extern uint32_t arrayResponsePacket[50];
extern uint32_t *rPacket;

uint32_t deviceID = 0xA5;
enum PACKET_STATE {
	PACKET_START, PACKET_END, PACKET_WAIT, PACKET_PROC
};

//Task For Sending Data Via USART
static void UsartTask(void *pvParameters) {

	createPacket();
	uint32_t usDataLen;
	qPacket = aryPacket;
	uint32_t *tempCRC = qPacket;
	uint32_t* functionPointer = aryPacket;
	functionPointer += 1;
	uint32_t* ptr = aryPacket;
	ptr += 2;


	if(*functionPointer == 0x0F || *functionPointer == 0x10){
		usDataLen = 6;
		tempCRC+=6;
	}
	else if(*functionPointer == 0x05){
		usDataLen = 5;
		tempCRC+=5;
	}
	else{
		usDataLen = 4;
		tempCRC+=4;
	}

	//Create Temporary Data Based on Function
	switch (*functionPointer) {
	case READ_COIL:
		storeReadCoilData(ptr);
		break;
	case READ_DISCRETE_INPUTS:
		storeReadDiscreteInputsData(ptr);
		break;
	case READ_HOLDING_REGISTERS:
		storeReadHoldingRegistersData(ptr);
		break;
	case READ_INPUT_REGISTERS:
		storeReadInputRegistersData(ptr);
		break;
	case WRITE_SINGLE_COIL:
		storeWriteSingleCoilData(ptr);
		break;
	case WRITE_SINGLE_REGISTER:
		storeWriteSingleRegisterData(ptr);
		break;
	case READ_EXCEPTION_STATUS:
		storeReadExceptionStatusData(ptr);
		break;
	case WRITE_MULTIPLE_COILS:
		storeWriteMultipleCoilsData(ptr);
		break;
	case WRITE_MULTIPLE_REGISTERS:
		storeWriteMultipleRegistersData(ptr);
		break;
	default:
		printf("Errr : Something went wrong!\n");
	}

	// Validate the slave ID
	if (!(validateSlaveID(qPacket, deviceID))) {
		printf("Errr : Something went wrong!\n");
		return;
	}

	//Validate CRC
	if (!(validateCrc(qPacket, usDataLen, tempCRC))) {
		printf("Errr : Something went wrong!\n");
		return;
	}


	// Validate the function
	if (!(validateFunction(qPacket))) {
		printf("Errr : Something went wrong!\n");
		return;
	}

	//Calcaulating response packet CRC
	rPacket = arrayResponsePacket;
	uint32_t rPacketLen;

	if(*functionPointer == 0x05){
		uint32_t *tempRpacket = rPacket;
		rPacketLen = 5;
		rPacket = rPacket + rPacketLen ;
		calculateOutputCrc(tempRpacket,rPacketLen);
	}
	else if(*functionPointer == 0x0F)	{
		uint32_t *tempRpacket = rPacket;
		rPacketLen = 4; //Since respondong deviceID,function code,written address & two crc.
		rPacket = rPacket + rPacketLen;
		calculateOutputCrc(tempRpacket,rPacketLen);
	}
	else{
		uint32_t *tempRpacket = rPacket;
		tempRpacket+=2;
		rPacketLen = 3 + *tempRpacket;
		rPacket = rPacket + rPacketLen ;
		tempRpacket-=2;
		calculateOutputCrc(tempRpacket,rPacketLen);
	}



	rPacket = arrayResponsePacket;

	//Send the response
	int MaxLoop = 10;
	int d=0;

//	while (1) {
//		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
		for (d = 0; d < (rPacketLen+2) ; d++) {
	                while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
			USART_SendData(USART2,*rPacket++);
//		break;
	}


}

void createPacket() {
	uint32_t state;
	uint32_t count = 0;
	state = PACKET_WAIT;
	for (; count < 50; count++) {
		aryPacket[count] = 0;
	}
	count = 0;
	size = 0;
	while (1) {

		uint32_t Data;
		while (USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
			if (USART_GetFlagStatus(USART2,
					(USART_FLAG_ORE | USART_FLAG_NE | USART_FLAG_FE
							| USART_FLAG_PE)))
				USART_ReceiveData(USART2); // Clear Error
		}

		//Collect the caracter
		Data = USART_ReceiveData(USART2);

		//Wait till the flag resets
		//while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);

		//Send the data

		switch (state) {
		case PACKET_WAIT:
			if (Data == 0xA5) {
				state = PACKET_START;
				aryPacket[count] = Data;
				count++;
		//		USART_SendData(USART2, Data);
			}

			break;
		case PACKET_START:
			state = PACKET_PROC;
			aryPacket[count] = Data;
			size = getFrameSize(Data);
		//	USART_SendData(USART2, size);
			count++;
			break;
		case PACKET_PROC:
			aryPacket[count] = Data;
			if (count >= size - 1) {
				count = 0;
				state = PACKET_WAIT;
				return;
			}
			count++;
			break;
		case PACKET_END:
			count = 0;
		}

	}
}

uint32_t getFrameSize(uint32_t Data) {

	switch (Data) {

	case READ_COIL :
		return 6;
	case READ_DISCRETE_INPUTS :
		return 6;
	case READ_HOLDING_REGISTERS :
		return 6;
	case READ_INPUT_REGISTERS :
		return 6;
	case WRITE_SINGLE_COIL :
		return 7;
	case WRITE_SINGLE_REGISTER :
		return 6;
	case READ_EXCEPTION_STATUS :
		return 6;
	case WRITE_MULTIPLE_COILS:
		return 6;
	case WRITE_MULTIPLE_REGISTERS:
		return 6;
	}

}

//Initialize GPIO and USART2
void initx(void) {

	//Enable GPIO Clocks For USART2
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	//Enable Clocks for USART2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	//Structure With Data For GPIO Configuration
	GPIO_InitTypeDef GPIO_InitStructure;

	//Structure With Data For USART Configuration
	USART_InitTypeDef USART_InitStructure;

	// Setup USART2 TX Pin As Alternate Function

	//TEST CONFIG
	//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	//      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	//      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	//      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	//      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	//      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//      GPIO_Init(GPIOA, &GPIO_InitStructure);

	//GPIO Configuration
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	//Connect USART pins to AF
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

	//Initialize LED
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14| GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	//Test Configure USART1_Rx as 'input'
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	//GPIO_Init(GPIOA, &GPIO_InitStructure);

	//USART Parameters
	USART_InitStructure.USART_BaudRate = 38400;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	//Configuring And Enabling USART2
	USART_Init(USART2, &USART_InitStructure);
	USART_Cmd(USART2, ENABLE);

}

//Main Function
int main(void) {

	//Call initx(); To Initialize USART & GPIO
	initx();

	//Create Task For USART
	xTaskCreate(UsartTask, (signed char*) "UsartTask", 128, NULL,tskIDLE_PRIORITY + 1, NULL);

	//Call Scheduler
	vTaskStartScheduler();

}

